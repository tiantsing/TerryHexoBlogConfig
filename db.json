{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921725717},{"_id":"themes/yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1567731510149},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1567731510151},{"_id":"themes/yelee/_config - 副本.yml","hash":"622d1c761128b645e0316441fa7bf1160dee7d38","modified":1567731510152},{"_id":"themes/yelee/_config.yml","hash":"6e0b15ee8c951eb1e50daeab8f19e233f92d805a","modified":1567735402294},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1567731510193},{"_id":"source/404/index.md","hash":"a1f6a79142877e3352fd5d4f2c5f72e853bb6ca7","modified":1567733176091},{"_id":"source/_posts/1.初识RabbitMQ.md","hash":"30365544802b6bccd578b835c7004837091e1586","modified":1567739653694},{"_id":"source/_posts/ADB命令简单使用技巧（Android）.md","hash":"1657dcf06af6b02bf5aec33ae90cc843fc1832ce","modified":1492352771719},{"_id":"source/_posts/Android中布局保存成图片.md","hash":"cb20889208c825f612e4d3cfd1affd5aebdb3526","modified":1494582795705},{"_id":"source/_posts/Android卸载测试应用后再次安装应用失败.md","hash":"cce759b239da69eda1310e89be74bdfa6003e840","modified":1493786135483},{"_id":"source/_posts/DEMO1.md","hash":"ca8b392c89cdb7117532e4f13907405240ad8192","modified":1487337499297},{"_id":"source/_posts/Git常用命令汇总.md","hash":"fd5483625553b44cc9ab4ee38c9785ba36228501","modified":1523106946430},{"_id":"source/_posts/JAVA之Servlet.md","hash":"8aa2c11854f3784b9c4ef96bc4e56c0905b71560","modified":1492248340639},{"_id":"source/_posts/JAVA学习之JDBC.md","hash":"4f1df162359a67bca2b7d4db4475b77121d60c7c","modified":1499936294784},{"_id":"source/_posts/JAVA学习之JUnit.md","hash":"428fb4814b72e7bac134425a533d66fab253773a","modified":1490249068078},{"_id":"source/_posts/JAVA学习之Jsp.md","hash":"d411a888c515dd17aa1b8ede77f90d682bc1b716","modified":1492248211278},{"_id":"source/_posts/JAVA学习之MySQL.md","hash":"a62df462e2ec960ac50c31ecdee72c99e5c3ce67","modified":1490185971377},{"_id":"source/_posts/JAVA学习之Struts2框架-二.md","hash":"1fba652367bf8808d0692281ea089dd82edce6e5","modified":1492696585710},{"_id":"source/_posts/JAVA学习之Struts2框架.md","hash":"c73aedf7c9917f0902c611d61e0f969199cc5de3","modified":1507734249350},{"_id":"source/_posts/JAVA学习之常用的数据源配置.md","hash":"82e6b241820e3ba8e568cc551a0eb0680d09aa61","modified":1492249426203},{"_id":"source/_posts/JAVA学习之框架前述.md","hash":"cf28dc22a33487c59d1bd2c5394ac698de9132b9","modified":1492251091294},{"_id":"source/_posts/Java单例模式的5种实现方法.md","hash":"8155eb02fb0e5f87c183ebd45115596adea0cfa1","modified":1597677897565},{"_id":"source/_posts/RecyclerView的万能分割线.md","hash":"eca142f04e5a19758c04ed41f5fdb5fff84851a9","modified":1501396882444},{"_id":"source/_posts/Volley-请求返回数据中文出现乱码.md","hash":"3096c217a6b73e2e949387a11795941db17f7c52","modified":1494336400636},{"_id":"source/_posts/eclipse常用快捷键整理.md","hash":"ced9e82b799017031101e8bec51d0fbfb0244ad5","modified":1506646149498},{"_id":"source/_posts/hello-world.md","hash":"a10b1f2798aed24173e739e26e9df967be4f65d3","modified":1488809671511},{"_id":"source/_posts/java-int类型转换成String-不足10位在前面补0.md","hash":"15cd0282ae98d8bf3e161e9568d06687bc94223e","modified":1494334942090},{"_id":"source/_posts/photo.md","hash":"19c0d8a9b257071f463ea14dafc2b2d855dc2405","modified":1597762551247},{"_id":"source/_posts/photo.md.vswp","hash":"0771be31a762ffa9807bb935183cd0c54896b1f8","modified":1597762550552},{"_id":"source/_posts/使用Hexo-github建设个人博客教程.md","hash":"3cd9db065896781dbc553c0253537bab5a3775f3","modified":1597763466565},{"_id":"source/_posts/使用Hexo-github建设个人博客教程.md.vswp","hash":"27d9a5b83975ca50cde1df8eab3e80d8865114c8","modified":1597763457942},{"_id":"source/_posts/使用Oracle SQL Developer连接mysql数据库.md","hash":"2db2d7d894313c15479aae4e592c56efba18cd84","modified":1502324461655},{"_id":"source/_posts/多个maven项目启动顺序.md","hash":"43fbb6021fb10f0ea7f621a90c11e174b5ca463d","modified":1597678596859},{"_id":"source/_posts/常用工具的环境变量配置.md","hash":"cd91bb8e8fce27fad1e2e257d1f531d430cd9362","modified":1530452492304},{"_id":"source/_posts/常用的专业搜索工具（分类.md","hash":"c2e5e01634a50fb01088e7dd7c2866a6a43cb418","modified":1490354184691},{"_id":"source/_posts/软件分享篇.md","hash":"0a6ba244f6eeca214eb38ac07ab407b2745f6584","modified":1488468496622},{"_id":"source/about/index.md","hash":"02c63aa71c9469652efd70f99baa23386bef02b7","modified":1567733181802},{"_id":"source/categories/index.md","hash":"78db7bf34d2a1805c21f5911189e18b5a77deab8","modified":1488804067315},{"_id":"source/guestbook/index.md","hash":"27ca1c379181c4c9d25a20da2c937c2c60557a46","modified":1488804223914},{"_id":"source/tags/index.md","hash":"359fc2552866dc16023da761a772599d12bf4dce","modified":1488804115553},{"_id":"themes/yelee/.git/FETCH_HEAD","hash":"e916aa588361a657c380988cbf17a455263b1825","modified":1567731568843},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1567731510105},{"_id":"themes/yelee/.git/ORIG_HEAD","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1567731569120},{"_id":"themes/yelee/.git/config","hash":"fc9762f33cf36a22baab4720f661eeaa651e1c24","modified":1567731510119},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1567731503010},{"_id":"themes/yelee/.git/index","hash":"9981d5a1f2868b763d460abf912f305bcf1a0d95","modified":1567731510276},{"_id":"themes/yelee/.git/packed-refs","hash":"20be7a433f279648e8829ffa01ec6c959c5da2fe","modified":1567731510089},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1567731510148},{"_id":"themes/yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1567731510154},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1567731510154},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1567731510155},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1567731510156},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1567731510157},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1567731510188},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1567731510188},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1567731510189},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1567731510189},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1567731510190},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1567731510191},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1567731510192},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1567731510195},{"_id":"source/_posts/.git/COMMIT_EDITMSG","hash":"097b4e66e84b976a861c0a3217cba2be57fee06c","modified":1567605937186},{"_id":"source/_posts/.git/FETCH_HEAD","hash":"59c48dfbff76f0dba3e00963f5396cdcf3d76aa8","modified":1502324461613},{"_id":"source/_posts/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1492690707558},{"_id":"source/_posts/.git/ORIG_HEAD","hash":"a4d140396985185e02fff9f5ae039ea88040aee9","modified":1502324461644},{"_id":"source/_posts/.git/config","hash":"c305943d96b4cfa62e012a66699ebcbba3658e56","modified":1567605965719},{"_id":"source/_posts/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1492690707404},{"_id":"source/_posts/.git/index","hash":"cf60d77bbce642819c74eebb6447aac03c1bb569","modified":1567605937182},{"_id":"source/_posts/images/使用Hexo+github建设个人博客教程1.png","hash":"541b5047ab9477ef4bbf4a912364f5747e890844","modified":1597675645313},{"_id":"source/_posts/photo/1.png","hash":"541b5047ab9477ef4bbf4a912364f5747e890844","modified":1597675645313},{"_id":"source/_posts/使用Hexo-github建设个人博客教程/使用Hexo+github建设个人博客教程1.png","hash":"541b5047ab9477ef4bbf4a912364f5747e890844","modified":1597675645313},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1567731503011},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1567731503012},{"_id":"themes/yelee/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1567731503013},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1567731503014},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1567731503014},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1567731503015},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1567731503016},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1567731503017},{"_id":"themes/yelee/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1567731503017},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1567731503018},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1567731503019},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1567731503021},{"_id":"themes/yelee/.git/logs/HEAD","hash":"266b25efc48d8d36e3c0a0afeda0094fad942b23","modified":1567731510110},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1567731510159},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1567731510161},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1567731510162},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1567731510163},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1567731510164},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1567731510170},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1567731510171},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1567731510172},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1567731510173},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1567731510174},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1567731510175},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1567731510175},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1567731510177},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1567731510178},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1567731510179},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1567731510180},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1567731510185},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1567731510185},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1567731510186},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1567731510187},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1567731510203},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1567731510203},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1567731510205},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1567731510212},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1567731510242},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1567731510243},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1567731510244},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1567731510245},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1567731510246},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1567731510248},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1567731510248},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1567731510249},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1567731510250},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1567731510251},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1567731510252},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1567731510253},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1567731510254},{"_id":"themes/yelee/source/img/favicon.ico","hash":"edd8fc9ce10ced312fe344a95025a02aa5f32cb7","modified":1553181118751},{"_id":"themes/yelee/source/img/head.jpg","hash":"d2659674be5def82e1ad6eb9966f2796110b1b00","modified":1452764671557},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1567731510257},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1567731510259},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1567731510260},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1567731510262},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1567731510262},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1567731510263},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1567731510264},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1567731510265},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1567731510266},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1567731510268},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1567731510270},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1567731510271},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1567731510271},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1567731510273},{"_id":"themes/yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1567731510274},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1567731510275},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1567731510202},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1567731510207},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1567731510209},{"_id":"source/_posts/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1492690707409},{"_id":"source/_posts/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1492690707453},{"_id":"source/_posts/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1492690707457},{"_id":"source/_posts/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1492690707461},{"_id":"source/_posts/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1492690707492},{"_id":"source/_posts/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1492690707508},{"_id":"source/_posts/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1492690707524},{"_id":"source/_posts/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1492690707528},{"_id":"source/_posts/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1492690707540},{"_id":"source/_posts/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1492690707552},{"_id":"source/_posts/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1492690707556},{"_id":"source/_posts/.git/logs/HEAD","hash":"70313893ecc683dc290a0daa4bb758623cdbbd3a","modified":1567605937195},{"_id":"themes/yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1567731510109},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1567731510165},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1567731510166},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1567731510167},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1567731510168},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1567731510169},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1567731510181},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1567731510182},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1567731510182},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1567731510183},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1567731510183},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1567731510184},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1567731510197},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1567731510198},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1567731510199},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1567731510201},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1567731510214},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1567731510226},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1567731510226},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1567731510227},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1567731510228},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1567731510229},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1567731510230},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1567731510231},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1567731510232},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1567731510232},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1567731510233},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1567731510234},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1567731510235},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1567731510236},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1567731510237},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1567731510240},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1567731510241},{"_id":"themes/yelee/.git/objects/pack/pack-6764055f038cc14e016d6166a3a37e85b3890711.idx","hash":"803f925ea35645c71529e589b7aa7eb548575f42","modified":1567731509966},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1567731510216},{"_id":"source/_posts/.git/objects/00/8075af77e5f52a1ed99628b984a38844efaf8d","hash":"060d54602cf102933da08236333ec82e3ceacba3","modified":1567605913000},{"_id":"source/_posts/.git/objects/01/013c2e56f69c7965f00edae1afcaabcc0c856a","hash":"40c59385635d446402f256e8b8daaede91b3912e","modified":1567605913000},{"_id":"source/_posts/.git/objects/02/c467bda2e49c1c18f33ded35b9bda60637c57c","hash":"b2b29c1f5f592f82bf10ec8f75a30e7ca68bce13","modified":1567605913000},{"_id":"source/_posts/.git/objects/07/e79774e6ed03037e27a0a13f3a1ca20f2b6cdd","hash":"0027766ea07696891a4f1363cf4059fec885e000","modified":1567605937179},{"_id":"source/_posts/.git/objects/0a/5d7a370c44b8d8bf0dbd345368a5d502301e0d","hash":"6c8ee2cacdab99938669c2c90d528488f5148e98","modified":1567605913000},{"_id":"source/_posts/.git/objects/10/94c56d17522160f12b202aa16837bdc56930e2","hash":"cdc43087084ee568d5cdb78bd912e67f65572f64","modified":1525330276424},{"_id":"source/_posts/.git/objects/11/51f5b5a4f9219dad6916d54bf6ba09849911d5","hash":"e0bd577e53f10d0312997a391b6ffe7b1b670f7a","modified":1492690761981},{"_id":"source/_posts/.git/objects/18/01a6a9308c794611d9cf91840d1cc013321a62","hash":"e4f733bef5173b2cae3efe06e195571d81470491","modified":1502010441630},{"_id":"source/_posts/.git/objects/13/4da4e7b41b5ce01afae6bed8e34ec1b1d0a920","hash":"9d3936d30297f936462f10965c15e451fb9ad529","modified":1527348662161},{"_id":"source/_posts/.git/objects/1b/e67442847db8ed662a16892bcb745a794f7d01","hash":"5515d375fafc2578766e9c097b445c67215e1380","modified":1494584183103},{"_id":"source/_posts/.git/objects/25/f40edf2e8fd54af0ad486eb261594a2234ea79","hash":"a358fe919b8dc966a34f8d9ad698be36dde82ce5","modified":1567605937188},{"_id":"source/_posts/.git/objects/28/acb9dd312bc2ca3c28618df624841570fd7e44","hash":"48193fdd7893c05ee5d3857537a3058d68b0da4d","modified":1492690740062},{"_id":"source/_posts/.git/objects/3b/a7c0a6945d8b556b57d6003567d2c8052a032f","hash":"fe3a6891560a4755afae67ef2a3218f8626ceb9a","modified":1567605913000},{"_id":"source/_posts/.git/objects/3b/b3a2411ff296995fc853316eb26e80a12da7a0","hash":"181b4c7921b20445174165f77ce49e1c417fe4ad","modified":1567605913000},{"_id":"source/_posts/.git/objects/40/c6a4e7ea1292c533c4636e7fd58e6c4331f2ee","hash":"e9a85b97f830087d19c36a13e9342e0d0c322c68","modified":1492690740268},{"_id":"source/_posts/.git/objects/45/477396a9f1032b9fa16573f11d3da7561d27d9","hash":"c4dfa4073e26e8c109d72b72b927cb90276bd305","modified":1567605913000},{"_id":"source/_posts/.git/objects/45/d17f47dadb5a7c101309fa29de3c42f0838039","hash":"dfcc3e1b4a75a715a10afd6ae08cf12c1c592853","modified":1494340161843},{"_id":"source/_posts/.git/objects/48/1467a8a231bbadcd176e8402865c51dd237413","hash":"acf049be2a4ba14e20bea3f1d2c0d638be5a53b5","modified":1567605913000},{"_id":"source/_posts/.git/objects/49/77b2b91e569019f2eeec26361622b4fa639bc1","hash":"72fd69c51a27d7bd2914b083f75f589051c630f1","modified":1567605913593},{"_id":"source/_posts/.git/objects/4b/d2fbfe8a63826f5278663942e2d030515ba1d0","hash":"d9bc37103d094aca166432d465eae09b8c4a747a","modified":1567605913000},{"_id":"source/_posts/.git/objects/59/2d67e8e3eaede2a4fc3a75f372c055e7ad0e8c","hash":"fe6c3e67d1803320fafd8915e576aa5ce6ac8a3a","modified":1494584183039},{"_id":"source/_posts/.git/objects/5d/705e27716e0853fa20db66daac76cadeb68efd","hash":"b35988888ce456d3f46086adf80f9b9189073d3e","modified":1502324461519},{"_id":"source/_posts/.git/objects/5d/cc88c278596f5a970c614e6d1b11ba800bbda6","hash":"4a6696cbf6ac1de849ece5d221be0455f2caa2f3","modified":1567605913000},{"_id":"source/_posts/.git/objects/63/bc507703a723e0e59662c4f9322f631723cd06","hash":"870a57242b3a55d1c97d2a90ba6a0a22d03c9e32","modified":1527348662108},{"_id":"source/_posts/.git/objects/6c/7868f1f35a5bfeb40d7108afbc2c125751cf9b","hash":"59971608fa7684210465d7965392ce383902e5b6","modified":1567605913000},{"_id":"source/_posts/.git/objects/74/4c1106f904e49b48aee59a6577a938ce33704b","hash":"391a6971ff34140023741508a674a308d5c8ba64","modified":1567605913000},{"_id":"source/_posts/.git/objects/83/2d8d44178db6788db40c9387e2cca75c7189cb","hash":"f0acfb206d1d460e47f36c1f99f214ce488c7640","modified":1567605913000},{"_id":"source/_posts/.git/objects/8d/7baee5fbf61f0880f0a82ae8ac340268bb1398","hash":"02c4f6fd2059bb4bc62e4e79b7684e935d5435f0","modified":1502324461374},{"_id":"source/_posts/.git/objects/93/64f3be26b012c725022fb84f6357947ca7381b","hash":"86519ceba709915aa0e68f9a10874ae756d07dba","modified":1567605913000},{"_id":"source/_posts/.git/objects/96/62bffef31b797ed4433d2da5ca885d097e14f5","hash":"c3c1fb63d59c01017df52db870f81efa9cb7833b","modified":1525330276268},{"_id":"source/_posts/.git/objects/96/a9ebe009141f693802df36b49d54dbb544382d","hash":"224997a39c06bf67bd3e2273e6c6dcb348ea3299","modified":1492690739441},{"_id":"source/_posts/.git/objects/98/d492856358b13f48a51c700c3a514bd5c8213a","hash":"7b6e6821561866e72819d94f1bd399500e0b6f7b","modified":1494340185281},{"_id":"source/_posts/.git/objects/9d/2a69d16d7684053c712f242c610176e3559eef","hash":"5ef0acf1ae1c2f30bf096b82fcbb58282618ff03","modified":1493786713480},{"_id":"source/_posts/.git/objects/9e/a65a377598fa8faf9ffa1438656229ddf69f25","hash":"75329586baaa35e18d9587baff4422c94f578c75","modified":1506594271277},{"_id":"source/_posts/.git/objects/a1/2a89935a6ebb7d0050a23fd6ddfca989c4176a","hash":"4f7fc4b65ec562ba52e16a22fb611ee4efb18c9a","modified":1567605913000},{"_id":"source/_posts/.git/objects/a1/ad900400f7cdd6d28af83878346abe8dcc16bb","hash":"410be8912d53f5ea29014eb1ededefb3c87bc1c5","modified":1506594329887},{"_id":"source/_posts/.git/objects/a4/7c395381238f863d762bef3323b5527bf229d6","hash":"78b2da1baae965ef01104812e860bbc3671f0f3a","modified":1502010441553},{"_id":"source/_posts/.git/objects/a9/f3eae2361ebf9d3d29f080b09fd03cb0c13997","hash":"23e64b96a4520363aa65cc25a7fc6c62963ce715","modified":1567605913000},{"_id":"source/_posts/.git/objects/b0/ce6da530e781c5998fc3162f4663d5d3828992","hash":"45a048932bd9ba68e4168b9ee876cb987d6f367f","modified":1492690739780},{"_id":"source/_posts/.git/objects/b4/9ce845aff35b4748217f7ff61d057b69deca1c","hash":"3c5dfcbad1b19eb3cdb758656cbe42252d68ec65","modified":1567605913000},{"_id":"source/_posts/.git/objects/b9/7895e1661d8d86b73faa62e47da798999b6479","hash":"a6e58589c1cee97beec892d89f1867858729a70f","modified":1567605913000},{"_id":"source/_posts/.git/objects/c2/d8719f04c798e2db45929bb2603dbbc7f949d9","hash":"4c90a0847c0dda01364d06ee9b851be4169914fa","modified":1567605913000},{"_id":"source/_posts/.git/objects/c6/558705d53b3be44688fa3ef9b7d805c14fb4f7","hash":"956c7c769229042811b725ac8014a4f1b37660b0","modified":1506594329860},{"_id":"source/_posts/.git/objects/c9/88fa91a123e975c58048b344535fcac1258b9f","hash":"a261b474b2823a2d2de8aa5f3d49166bad85569a","modified":1493786713462},{"_id":"source/_posts/.git/objects/d6/321ffb1045136a8eed2049b521e5972c63a57a","hash":"d8fb16001b570f5fdf1614ffd9f864e297bba74c","modified":1492690761950},{"_id":"source/_posts/.git/objects/d8/5e5fd1672dffb4263a67d3387baa70280819ac","hash":"e18bb6b2b20ecbcbad02e9f076dedc6feb36b7b4","modified":1567605913000},{"_id":"source/_posts/.git/objects/e5/23a7afca150e0166c49532aee995653d274f37","hash":"e0e96cdc8416c28239cbead8567b73d33808bc48","modified":1494340185296},{"_id":"source/_posts/.git/objects/e5/2bed3c3267382446bb19a564d38428820d7555","hash":"fca41422899a1f6a3cb27e5d2ba9b6341dddcac8","modified":1567605913000},{"_id":"source/_posts/.git/objects/e6/7e337613644d4136b308c9483dd291d393f880","hash":"023deced54db68901543c06a7aed9bc5e3ba5aa3","modified":1492690740143},{"_id":"source/_posts/.git/objects/e6/c22c372791b803bd31db29f686826f5d5c1fb1","hash":"026409710af9dc46150a48edc7e20cba4007dd36","modified":1567605913000},{"_id":"source/_posts/.git/objects/e8/f64657d447fb25d5dc83f2670244b61eb1bba6","hash":"c179d38c6156ad25dfb4e008fedc5374943158b0","modified":1502010486089},{"_id":"source/_posts/.git/objects/f0/e619ac9f79f9bec53dcc3db00f768893eba7a3","hash":"099708bdb3f3299584b375d8888881b87b666b29","modified":1567605913000},{"_id":"source/_posts/.git/objects/f6/2f9b1a6b72f433d2b785e3bebab0b8ca69b05e","hash":"e71af195c845db58c2c2ace315aed220977c8dc4","modified":1502010454461},{"_id":"source/_posts/.git/objects/fa/86c43ca8bc6b432cc97a05a1f4fa3ba1aeb7eb","hash":"c0dd806f7cc86eadf8aa9b3ea1688b0312c47475","modified":1492690739166},{"_id":"source/_posts/.git/objects/fd/fee5080b5c7e4dbc6344484ebe9c238749b791","hash":"53e942e90cb79777742e580cbff439dd30340aaf","modified":1567605913000},{"_id":"source/_posts/.git/refs/heads/master","hash":"5fae84255eb8c6e225a8fd7cefa31371551826b3","modified":1567605937194},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"266b25efc48d8d36e3c0a0afeda0094fad942b23","modified":1567731510112},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1567731510103},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1567731510217},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1567731510219},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1567731510220},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1567731510221},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1567731510222},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1567731510223},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1567731510225},{"_id":"source/_posts/.git/logs/refs/heads/master","hash":"70313893ecc683dc290a0daa4bb758623cdbbd3a","modified":1567605937196},{"_id":"source/_posts/.git/refs/remotes/origin/master","hash":"5fae84255eb8c6e225a8fd7cefa31371551826b3","modified":1567605965724},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"266b25efc48d8d36e3c0a0afeda0094fad942b23","modified":1567731510102},{"_id":"source/_posts/.git/logs/refs/remotes/origin/master","hash":"b7e9ce5f5ffb323d66141e9068557f150512ac00","modified":1567605965727},{"_id":"themes/yelee/.git/objects/pack/pack-6764055f038cc14e016d6166a3a37e85b3890711.pack","hash":"bcc2de2cc7751ed0f846b6bf370f15bc7cfd7847","modified":1567731509959},{"_id":"public/baidusitemap.xml","hash":"11c3698b4766d88cc93dd2b3cb7a0eea9a9066c2","modified":1597763507427},{"_id":"public/atom.xml","hash":"8fdc6958bc4bcef8f4dc68949e18f007211f2b35","modified":1597762770474},{"_id":"public/content.json","hash":"1f6828e9d96542d0665a293289d34546c8fbb2ee","modified":1597763509073},{"_id":"public/search.xml","hash":"cdb7630b7d7c44512146ef744c514f7410c21ba4","modified":1597763509088},{"_id":"public/sitemap.xml","hash":"1334fb62a247314c946ca20d15546b2545b62880","modified":1597763509089},{"_id":"public/404.html","hash":"d5bfab1a02f570bbc7c85eaedfcab98d0bbb4519","modified":1597762770522},{"_id":"public/about/index.html","hash":"443c846464a9bb0bd2b34884e862652ef0f9d47d","modified":1597762770536},{"_id":"public/categories/index.html","hash":"9b4008f36aca93e57c06701512a9b2943a4d550b","modified":1597762770537},{"_id":"public/guestbook/index.html","hash":"28267950bc3d2a403ac248066ebd469a30213474","modified":1597762770537},{"_id":"public/archives/2017/page/3/index.html","hash":"5c20dd3b2573981f2efc68f38c8a0cc3e24d1c06","modified":1597762770537},{"_id":"public/archives/2017/02/index.html","hash":"b3c65ecc5306818685f056e0407c75e786c70865","modified":1597762770537},{"_id":"public/archives/2017/05/index.html","hash":"c4b415d73095d5b39c4da2045f214799a22d811d","modified":1597762770537},{"_id":"public/archives/2017/07/index.html","hash":"025cb13810a1492fafb3c6d6bedf3b220b50c223","modified":1597762770537},{"_id":"public/archives/2017/08/index.html","hash":"d55a77eb951ca5c7595ace33d0f88139e6a8e9ab","modified":1597762770538},{"_id":"public/archives/2018/index.html","hash":"c836d7b5941e96ff01f527a94364c73ecdaf574b","modified":1597762770538},{"_id":"public/archives/2018/04/index.html","hash":"c5107a98a2e9df798d1f6f39c5d3a1e17efec888","modified":1597762770538},{"_id":"public/archives/2019/index.html","hash":"35df206a5b9fafda4db5718a6c5a71e836676103","modified":1597762770538},{"_id":"public/archives/2019/05/index.html","hash":"5c8a2ed4e65a06aa337ad154028dc96dc1c8f669","modified":1597762770538},{"_id":"public/archives/2019/09/index.html","hash":"9ccb4b38eea75e94582a3bdeb945f43224a4af28","modified":1597762770538},{"_id":"public/archives/2020/index.html","hash":"893da2fe8a73f8f5ec85fd71b2a5c9cb58f3eefb","modified":1597762770538},{"_id":"public/archives/2020/08/index.html","hash":"dae9f9d5b1dfc8932ee14f2b38d4d442fbe0e070","modified":1597762770539},{"_id":"public/categories/RabbitMQ/index.html","hash":"b6824bcb2d706a00ca0d899dd7c53ddc65093eff","modified":1597762770539},{"_id":"public/categories/Android/index.html","hash":"3a67e29a200cf38994f56fb222ee472ac7d98673","modified":1597762770539},{"_id":"public/categories/Git/index.html","hash":"5fc2ae9ed31f2b2edabfd030b474adfb06b30407","modified":1597762770539},{"_id":"public/categories/数据库/index.html","hash":"8a606b964f59f53c87f5b6416e90d2327f4de675","modified":1597762770539},{"_id":"public/categories/设计模式/index.html","hash":"96055f67b49fc033889fcec535b99b4caf4c6ca2","modified":1597762770539},{"_id":"public/categories/工具/index.html","hash":"f7ce2a7b106277a09135da2a17757deb335696b0","modified":1597762770539},{"_id":"public/categories/maven/index.html","hash":"87d1d7f827cd43e0fc881855c16cccd9494ee922","modified":1597762770539},{"_id":"public/categories/分享/index.html","hash":"0c1aed7db062ff6bd6e4c720337475112b9bb365","modified":1597762770540},{"_id":"public/categories/Hexo/index.html","hash":"aac6695ff4b5d58e8627b505f810cfa8e7e39b84","modified":1597762770540},{"_id":"public/tags/消息中间件/index.html","hash":"6ab8f238d6b997ae54c88f7934df414e58920343","modified":1597762770540},{"_id":"public/tags/Android/index.html","hash":"d9e48fa6b1c7473b32d5e5ca0d84c9e6c84a78ce","modified":1597762770540},{"_id":"public/tags/ADB/index.html","hash":"a0f757652f30664ca9fb38877ee50e50d7e11941","modified":1597762770540},{"_id":"public/tags/测试/index.html","hash":"998368de1db995af424bdf0baa167a2c9fdc2f7d","modified":1597762770540},{"_id":"public/tags/Git/index.html","hash":"f892c97a30191a4ffffffa21cbfb4fe03224d3db","modified":1597762770540},{"_id":"public/tags/JAVA/page/2/index.html","hash":"85bf703ea00a94f9e068f67f87eedf0a0daa8240","modified":1597762770540},{"_id":"public/tags/Servlet/index.html","hash":"e44c02cb9423cd25a112e1e9ffaba3a182564374","modified":1597762770541},{"_id":"public/tags/JDBC/index.html","hash":"a124b82d6c517bf0779072c174389ffb960bd483","modified":1597762770541},{"_id":"public/tags/JUnit/index.html","hash":"eea4ff83d273a19eb9caebc42e2e1a1129397d9a","modified":1597762770541},{"_id":"public/tags/JSP/index.html","hash":"b1479d1b6b077e712753b3ded3278e34a04fecef","modified":1597762770541},{"_id":"public/tags/MySQL/index.html","hash":"83c6a87a595e5d14274a33c0cb946f12c049b8f7","modified":1597762770541},{"_id":"public/tags/数据库/index.html","hash":"7fd6e4de06fe5a6847656b31ae6d8761357226cc","modified":1597762770541},{"_id":"public/tags/框架/index.html","hash":"53184f6e27b6557cac48dfed295ab6e78d49df7a","modified":1597762770541},{"_id":"public/tags/Struts2/index.html","hash":"c284e95c5eccb02dbe8000b5add5a3409a79d26a","modified":1597762770541},{"_id":"public/tags/连接池/index.html","hash":"a363ef070a8a0b0bd8fcf388afd2c330dcef218f","modified":1597762770541},{"_id":"public/tags/单例模式/index.html","hash":"2b6e210a7d22e469b6a6108172e88110d5c3fcd9","modified":1597762770542},{"_id":"public/tags/Recycle/index.html","hash":"6c12d130fad9ef010b6647ae8838470301e35cae","modified":1597762770542},{"_id":"public/tags/Volley/index.html","hash":"ac60f6f4dd7542d4da63e47db60ed7c12e1b7e44","modified":1597762770542},{"_id":"public/tags/eclipse/index.html","hash":"9cf1e09a956f253f8106f794c929ae7a36cfef18","modified":1597762770542},{"_id":"public/tags/Hexo/index.html","hash":"0cda99048d8569e5a5106dd7d5803931f5004a7f","modified":1597762770542},{"_id":"public/tags/基础/index.html","hash":"97d6749432a152424dd8c2fdedc370b75dbc6264","modified":1597762770542},{"_id":"public/tags/SQL-Developer/index.html","hash":"c5f58ab34ea1f55cba9f918bda20baa168017c1a","modified":1597762770542},{"_id":"public/tags/maven/index.html","hash":"ab40afbadf57dc21606e6cab81a5bc52a21f8e64","modified":1597762770542},{"_id":"public/tags/工具配置/index.html","hash":"4570c457d1580d90c05843f9fdf4d6d49efeb308","modified":1597762770543},{"_id":"public/tags/分享/index.html","hash":"5514e36e4ee35d9f178bb4eb8c9609584e7b3ae7","modified":1597762770543},{"_id":"public/tags/node/index.html","hash":"25565bd8ab6554d28e0b4d36db6f7b46da8c9a5a","modified":1597762770543},{"_id":"public/tags/github/index.html","hash":"278c746421eef8b0179b926297ff474e2e6d5b8a","modified":1597762770543},{"_id":"public/tags/index.html","hash":"b982d7741571038365da7f9e8765a59c66b72f99","modified":1597762770543},{"_id":"public/2020/08/17/多个maven项目启动顺序/index.html","hash":"900516dff3bae0988799dfa5f5fb7272bfad06bd","modified":1597762770543},{"_id":"public/2020/08/17/Java单例模式的5种实现方法/index.html","hash":"3d91f4b7b716eeee9d97c4e71951c92dea19de5a","modified":1597762770544},{"_id":"public/2019/09/05/1.初识RabbitMQ/index.html","hash":"0af10fb956a9b34d4e5d8dca17bbfa8d998aed26","modified":1597762770544},{"_id":"public/2019/05/18/软件分享篇/index.html","hash":"2125a6d7552cf5814fb226e3d4aa2034097140da","modified":1597762770544},{"_id":"public/2018/04/07/Git常用命令汇总/index.html","hash":"b0f2ffd069a02c1eddda540ec2b418a32bf8b89d","modified":1597762770544},{"_id":"public/2017/08/20/eclipse常用快捷键整理/index.html","hash":"728d7a0d3afd6c49d6cd07996147824b2d5304e4","modified":1597762770544},{"_id":"public/2017/08/09/使用Oracle SQL Developer连接mysql数据库/index.html","hash":"26d62a7ebb74c4c1c35004b26739b0ff406cbcd7","modified":1597762770544},{"_id":"public/2017/07/30/常用工具的环境变量配置/index.html","hash":"d92a8acb4ab1fb9e71509de48de5c5baca0d6f06","modified":1597762770544},{"_id":"public/2017/05/12/Android中布局保存成图片/index.html","hash":"0dd51dbe92b5ac10b5db7648d41187d995cf05aa","modified":1597762770544},{"_id":"public/2017/05/09/RecyclerView的万能分割线/index.html","hash":"7c4481db6d6f13c2eb7d64ea11b327154e33c4b5","modified":1597762770545},{"_id":"public/2017/05/09/Volley-请求返回数据中文出现乱码/index.html","hash":"e01aee00609e0aac8ef508bf436b282fabf7b5ef","modified":1597762770545},{"_id":"public/2017/05/09/java-int类型转换成String-不足10位在前面补0/index.html","hash":"67a19cc7ac644c375cf3507b827dbd6a9e4e5112","modified":1597762770545},{"_id":"public/2017/05/03/Android卸载测试应用后再次安装应用失败/index.html","hash":"bf6d20ed8ece0c61b9a3748e81729f3ad80f2e7e","modified":1597762770545},{"_id":"public/2017/04/20/JAVA学习之Struts2框架-二/index.html","hash":"c39d26c8a7402451a6dc10a154fc5f12a4bfca66","modified":1597762770545},{"_id":"public/2017/04/16/ADB命令简单使用技巧（Android）/index.html","hash":"4594c06b2b5aef3c2a15f107011dabbf43dbf0c1","modified":1597762770545},{"_id":"public/2017/04/15/JAVA学习之Struts2框架/index.html","hash":"4ecd4347b08a58b1a60a5b7f1c3272f9873ef375","modified":1597762770545},{"_id":"public/2017/04/15/JAVA学习之框架前述/index.html","hash":"d04806c00c463aa8d0fded9a13b07dbe62476355","modified":1597762770545},{"_id":"public/2017/04/02/JAVA学习之常用的数据源配置/index.html","hash":"f9433e2b1edac3dc1918a6e05036a21b04239943","modified":1597762770545},{"_id":"public/2017/03/29/JAVA学习之Jsp/index.html","hash":"b6edc04ce49f1edcc6aaa4c8499106f94fe617bf","modified":1597762770546},{"_id":"public/2017/03/25/JAVA之Servlet/index.html","hash":"60af9554fc6e007ed804b25e2dbbf9bdceabbdce","modified":1597762770546},{"_id":"public/2017/03/24/常用的专业搜索工具（分类/index.html","hash":"a15b90cf41329434cbd9c3c80fcee3230612e073","modified":1597762770546},{"_id":"public/2017/03/22/JAVA学习之JDBC/index.html","hash":"ce341582ebebebb9f69ce88b74c2b8e9ffbc8f20","modified":1597762770546},{"_id":"public/2017/03/22/JAVA学习之JUnit/index.html","hash":"e6b0b4d2fe2221550d208d35feb0a061d962ee14","modified":1597762770546},{"_id":"public/2017/03/21/JAVA学习之MySQL/index.html","hash":"f2aa7975067b62e5082dbee6ba38bc69fe39be7f","modified":1597762770546},{"_id":"public/2017/02/18/使用Hexo-github建设个人博客教程/index.html","hash":"851f94d794a1159522eba85c36fc43de93268f66","modified":1597763509105},{"_id":"public/2017/02/17/DEMO1/index.html","hash":"9a3fb72e1189199d2b09fc034ffe22328f7c14db","modified":1597762770547},{"_id":"public/2017/02/17/hello-world/index.html","hash":"133ce041bc3b421a0ea8f815ab78e8db98beb066","modified":1597762770547},{"_id":"public/archives/index.html","hash":"16ed6b4100a4b108564608b016d0fc325e4c7d51","modified":1597762770547},{"_id":"public/archives/page/2/index.html","hash":"3e1b2c78f2a8b7119e2325a29e63b33ed8765347","modified":1597762770547},{"_id":"public/archives/page/3/index.html","hash":"08850e9dc7bf4fbad3225880033b6000e2a4f5c8","modified":1597762770547},{"_id":"public/archives/2017/index.html","hash":"fcb634551214d3bb6567d7a23ecd6ad30c0c6306","modified":1597762770547},{"_id":"public/archives/2017/page/2/index.html","hash":"7553213a076eb17a0e524b8b8b73e7dc21eccefd","modified":1597762770549},{"_id":"public/archives/2017/03/index.html","hash":"a2fc71b16cad282dae90b1635d89374cad65aac8","modified":1597762770549},{"_id":"public/archives/2017/04/index.html","hash":"72245d1c9f275a85156ef8af6ecaba2105ddd0f2","modified":1597762770550},{"_id":"public/categories/JAVA/index.html","hash":"370fa746328338fe5153b9cc76b7ffe2b4283546","modified":1597762770550},{"_id":"public/index.html","hash":"9bebd871b38f61ad9f791ad95e9864562a1d5bf1","modified":1597762770550},{"_id":"public/page/2/index.html","hash":"eda774586e505c84d43985246ed1942310a5ab2e","modified":1597762770550},{"_id":"public/page/3/index.html","hash":"b28c5c99f1511d22e6dbb13555abd4c06651a783","modified":1597762770550},{"_id":"public/tags/JAVA/index.html","hash":"e24aa581e6268b049f6c701f66b93c216f79817a","modified":1597762770550},{"_id":"public/2020/08/18/photo/index.html","hash":"cd48676a3d527fcfd74ed411f736226adde4d62d","modified":1597762770556},{"_id":"public/2017/02/18/使用Hexo-github建设个人博客教程/使用Hexo+github建设个人博客教程1.png","hash":"541b5047ab9477ef4bbf4a912364f5747e890844","modified":1597762770609},{"_id":"public/2020/08/18/photo/1.png","hash":"541b5047ab9477ef4bbf4a912364f5747e890844","modified":1597762770666}],"Category":[{"name":"RabbitMQ","_id":"cke02o6tu000464xtxhb42rwb"},{"name":"Android","_id":"cke02o6ua000b64xtdgsx099k"},{"name":"Git","_id":"cke02o6v7000s64xtw6h7dtb0"},{"name":"JAVA","_id":"cke02o6vf000z64xt9lru3y1u"},{"name":"数据库","_id":"cke02o6wi001p64xt6gt8jjkq"},{"name":"设计模式","_id":"cke02o6xm002b64xty8ol0hn8"},{"name":"工具","_id":"cke02o6xs002f64xtlqmepv0r"},{"name":"maven","_id":"cke02o6xv002j64xtc89exp3b"},{"name":"分享","_id":"cke02o6y2002r64xtlgeanoed"},{"name":"Hexo","_id":"cke02o6ya002y64xtbzkgullb"}],"Data":[],"Page":[{"date":"2019-09-06T01:24:38.000Z","title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>","source":"404/index.md","raw":"---\ndate: 2019-09-06 09:24:38\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>","updated":"2019-09-06T01:26:16.091Z","path":"/404.html","layout":"page","_id":"cke02o6th000064xttsig438b","content":"<style type=\"text/css\">\n    .article-header {\n        padding: 0;\n        padding-top: 26px;\n        border-left: none;\n        text-align: center;\n    }\n    .article-header:hover {\n        border-left: none;\n    }\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .article-meta {\n        display: none;\n    }\n    .share {\n        display: none;\n    }\n    .ds-meta {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n    #container .article-info-post.article-info {\n      display: none;\n      }\n    #container .article .article-title {\n    padding: 0;\n    }\n</style>","excerpt":"","more":"<style type=\"text/css\">\n    .article-header {\n        padding: 0;\n        padding-top: 26px;\n        border-left: none;\n        text-align: center;\n    }\n    .article-header:hover {\n        border-left: none;\n    }\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .article-meta {\n        display: none;\n    }\n    .share {\n        display: none;\n    }\n    .ds-meta {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n    #container .article-info-post.article-info {\n      display: none;\n      }\n    #container .article .article-title {\n    padding: 0;\n    }\n</style>"},{"date":"2017-02-17T07:17:36.000Z","fancybox":true,"layout":"about","title":"关于我","description":"用户自定义页面功能演示","comments":0,"reward":false,"_content":"\n <style type=\"text/css\">\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.player {\n\t\ttext-align: center;\n\t\tmargin: .5em auto 0;\n\t\twidth: 100%;\n\t\tmax-width: 22em;\n\t}\n\t.player br {\n\t\tdisplay: none;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n\t#ds-recent-visitors {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\t#ds-recent-visitors div img {\n\t\tdisplay: inline-block !important;\n\t\twidth: 56px !important;\n\t\theight: 56px !important;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 2px;\n\t\tbox-shadow: 1px 1px 1px rgba(0,0,0, .15);\n\t}\n\t.article-entry img:first-child {\n\t\tdisplay: block;\n\t}\n\t.article-entry span {\n\t\tfont-family: Arial;\n\t}\n\t#ds-hot-posts {\n\t\tdisplay: none;\n\t}\n \n     \n</style>\n\n---\n\n\n\n<img src=\"http://ws3.sinaimg.cn/large/ecc5f2dcly1g1e63qybk5j211y0lcjux.jpg\" alt=\"image\" width=\"1366\" data-width=\"1366\" data-height=\"768\">\n\n**开博缘由:**\n> 通过写博客的方式，加深理解，显性化自己的隐性知识；\n\n> 共享知识，吸引同好，交流进步。\n\n**欢迎交流:**\n> QQ：1015236187 　Email:tiantsing@126.com  　\n> [CSDN：Terry_Tian](http://blog.csdn.net/tianqingdezhuanlan)　　　[Sina:Terry_Tian](http://weibo.com/Tianqing1994/profile?rightmod=1&wvr=6&mod=personinfo&is_all=1)　　　[Github:MuTouTQ](https://github.com/MuTouTQ/MuTouTQ.github.io)　\n     　　\n\n## 最近访客： ##\n\n<ul class=\"ds-recent-visitors\" data-num-items=\"30\" data-avatar-size=\"56\"></ul>","source":"about/index.md","raw":"date: 2017-02-17 15:17:36\nfancybox: true\nlayout: about      # 必须\ntitle: 关于我  # 必须，页面名称\ndescription: 用户自定义页面功能演示       # 页面二级标题，描述性文字\ncomments: false     # 禁用评论，可选，默认开启\nreward: false       # 禁用打赏，可选，默认开启\n\n---\n\n <style type=\"text/css\">\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.player {\n\t\ttext-align: center;\n\t\tmargin: .5em auto 0;\n\t\twidth: 100%;\n\t\tmax-width: 22em;\n\t}\n\t.player br {\n\t\tdisplay: none;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n\t#ds-recent-visitors {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\t#ds-recent-visitors div img {\n\t\tdisplay: inline-block !important;\n\t\twidth: 56px !important;\n\t\theight: 56px !important;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 2px;\n\t\tbox-shadow: 1px 1px 1px rgba(0,0,0, .15);\n\t}\n\t.article-entry img:first-child {\n\t\tdisplay: block;\n\t}\n\t.article-entry span {\n\t\tfont-family: Arial;\n\t}\n\t#ds-hot-posts {\n\t\tdisplay: none;\n\t}\n \n     \n</style>\n\n---\n\n\n\n<img src=\"http://ws3.sinaimg.cn/large/ecc5f2dcly1g1e63qybk5j211y0lcjux.jpg\" alt=\"image\" width=\"1366\" data-width=\"1366\" data-height=\"768\">\n\n**开博缘由:**\n> 通过写博客的方式，加深理解，显性化自己的隐性知识；\n\n> 共享知识，吸引同好，交流进步。\n\n**欢迎交流:**\n> QQ：1015236187 　Email:tiantsing@126.com  　\n> [CSDN：Terry_Tian](http://blog.csdn.net/tianqingdezhuanlan)　　　[Sina:Terry_Tian](http://weibo.com/Tianqing1994/profile?rightmod=1&wvr=6&mod=personinfo&is_all=1)　　　[Github:MuTouTQ](https://github.com/MuTouTQ/MuTouTQ.github.io)　\n     　　\n\n## 最近访客： ##\n\n<ul class=\"ds-recent-visitors\" data-num-items=\"30\" data-avatar-size=\"56\"></ul>","updated":"2019-09-06T01:26:21.802Z","path":"about/index.html","_id":"cke02o6tp000264xtvii3nd59","content":" <style type=\"text/css\">\n    strong a {\n        color: #747474;\n    }\n    .player {\n        text-align: center;\n        margin: .5em auto 0;\n        width: 100%;\n        max-width: 22em;\n    }\n    .player br {\n        display: none;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #ds-recent-visitors {\n        margin: 0;\n        padding: 0;\n    }\n    #ds-recent-visitors div img {\n        display: inline-block !important;\n        width: 56px !important;\n        height: 56px !important;\n        border-radius: 50%;\n        border: 1px solid #ddd;\n        padding: 2px;\n        box-shadow: 1px 1px 1px rgba(0,0,0, .15);\n    }\n    .article-entry img:first-child {\n        display: block;\n    }\n    .article-entry span {\n        font-family: Arial;\n    }\n    #ds-hot-posts {\n        display: none;\n    }\n\n\n</style>\n\n<hr>\n<p><img src=\"http://ws3.sinaimg.cn/large/ecc5f2dcly1g1e63qybk5j211y0lcjux.jpg\" alt=\"image\" width=\"1366\" data-width=\"1366\" data-height=\"768\"></p>\n<p><strong>开博缘由:</strong></p>\n<blockquote>\n<p>通过写博客的方式，加深理解，显性化自己的隐性知识；</p>\n<p>共享知识，吸引同好，交流进步。</p>\n</blockquote>\n<p><strong>欢迎交流:</strong></p>\n<blockquote>\n<p>QQ：1015236187 　Email:tiantsing@126.com  　<br><a href=\"http://blog.csdn.net/tianqingdezhuanlan\" target=\"_blank\" rel=\"external\">CSDN：Terry_Tian</a>　　　<a href=\"http://weibo.com/Tianqing1994/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo&amp;is_all=1\" target=\"_blank\" rel=\"external\">Sina:Terry_Tian</a>　　　<a href=\"https://github.com/MuTouTQ/MuTouTQ.github.io\" target=\"_blank\" rel=\"external\">Github:MuTouTQ</a>　\n     　　</p>\n</blockquote>\n<h2 id=\"最近访客：\"><a href=\"#最近访客：\" class=\"headerlink\" title=\"最近访客：\"></a>最近访客：</h2><ul class=\"ds-recent-visitors\" data-num-items=\"30\" data-avatar-size=\"56\"></ul>","excerpt":"","more":" <style type=\"text/css\">\n    strong a {\n        color: #747474;\n    }\n    .player {\n        text-align: center;\n        margin: .5em auto 0;\n        width: 100%;\n        max-width: 22em;\n    }\n    .player br {\n        display: none;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #ds-recent-visitors {\n        margin: 0;\n        padding: 0;\n    }\n    #ds-recent-visitors div img {\n        display: inline-block !important;\n        width: 56px !important;\n        height: 56px !important;\n        border-radius: 50%;\n        border: 1px solid #ddd;\n        padding: 2px;\n        box-shadow: 1px 1px 1px rgba(0,0,0, .15);\n    }\n    .article-entry img:first-child {\n        display: block;\n    }\n    .article-entry span {\n        font-family: Arial;\n    }\n    #ds-hot-posts {\n        display: none;\n    }\n\n\n</style>\n\n<hr>\n<p><img src=\"http://ws3.sinaimg.cn/large/ecc5f2dcly1g1e63qybk5j211y0lcjux.jpg\" alt=\"image\" width=\"1366\" data-width=\"1366\" data-height=\"768\"></p>\n<p><strong>开博缘由:</strong></p>\n<blockquote>\n<p>通过写博客的方式，加深理解，显性化自己的隐性知识；</p>\n<p>共享知识，吸引同好，交流进步。</p>\n</blockquote>\n<p><strong>欢迎交流:</strong></p>\n<blockquote>\n<p>QQ：1015236187 　Email:tiantsing@126.com  　<br><a href=\"http://blog.csdn.net/tianqingdezhuanlan\">CSDN：Terry_Tian</a>　　　<a href=\"http://weibo.com/Tianqing1994/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo&amp;is_all=1\">Sina:Terry_Tian</a>　　　<a href=\"https://github.com/MuTouTQ/MuTouTQ.github.io\">Github:MuTouTQ</a>　\n     　　</p>\n</blockquote>\n<h2 id=\"最近访客：\"><a href=\"#最近访客：\" class=\"headerlink\" title=\"最近访客：\"></a>最近访客：</h2><ul class=\"ds-recent-visitors\" data-num-items=\"30\" data-avatar-size=\"56\"></ul>"},{"date":"2017-02-17T07:17:36.000Z","fancybox":false,"layout":"categories","title":"分类","description":"用户自定义页面功能演示","comments":0,"reward":false,"_content":"","source":"categories/index.md","raw":"date: 2017-02-17 15:17:36\nfancybox: false\nlayout: categories      # 必须\ntitle: 分类  # 必须，页面名称\ndescription: 用户自定义页面功能演示       # 页面二级标题，描述性文字\ncomments: false     # 禁用评论，可选，默认开启\nreward: false       # 禁用打赏，可选，默认开启\n\n---\n","updated":"2017-03-06T12:41:07.315Z","path":"categories/index.html","_id":"cke02o6ty000664xts8ht6ebp","content":"","excerpt":"","more":""},{"title":"留言板","date":"2015-09-30T12:31:36.000Z","fancybox":false,"layout":"guestbook","reward":false,"_content":"\n<style type=\"text/css\">\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.player {\n\t\ttext-align: center;\n\t\tmargin: .5em auto 0;\n\t\twidth: 100%;\n\t\tmax-width: 22em;\n\t}\n\t.player br {\n\t\tdisplay: none;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n\t#ds-recent-visitors {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\t#ds-recent-visitors div img {\n\t\tdisplay: inline-block !important;\n\t\twidth: 56px !important;\n\t\theight: 56px !important;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 2px;\n\t\tbox-shadow: 1px 1px 1px rgba(0,0,0, .15);\n\t}\n\t.article-entry img:first-child {\n\t\tdisplay: block;\n\t}\n\t.article-entry span {\n\t\tfont-family: Arial;\n\t}\n\t#ds-hot-posts {\n\t\tdisplay: none;\n\t}\n</style>\n\n---\n\n　　**如果大家有什么想说的，可以在这里留言！**\n\n<p class=\"sign\"><span>——</span> Terry_Tian, 2017年2月17日</p>\n\n\n\n## 最近访客： ##\n\n\n<ul class=\"ds-recent-visitors\" data-num-items=\"30\" data-avatar-size=\"56\"></ul>","source":"guestbook/index.md","raw":"title:  留言板\ndate: 2015-09-30 20:31:36\nfancybox: false\nlayout: guestbook      # 必须\nreward: false       # 禁用打赏，可选，默认开启\n\n---\n\n<style type=\"text/css\">\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.player {\n\t\ttext-align: center;\n\t\tmargin: .5em auto 0;\n\t\twidth: 100%;\n\t\tmax-width: 22em;\n\t}\n\t.player br {\n\t\tdisplay: none;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n\t#ds-recent-visitors {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\t#ds-recent-visitors div img {\n\t\tdisplay: inline-block !important;\n\t\twidth: 56px !important;\n\t\theight: 56px !important;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 2px;\n\t\tbox-shadow: 1px 1px 1px rgba(0,0,0, .15);\n\t}\n\t.article-entry img:first-child {\n\t\tdisplay: block;\n\t}\n\t.article-entry span {\n\t\tfont-family: Arial;\n\t}\n\t#ds-hot-posts {\n\t\tdisplay: none;\n\t}\n</style>\n\n---\n\n　　**如果大家有什么想说的，可以在这里留言！**\n\n<p class=\"sign\"><span>——</span> Terry_Tian, 2017年2月17日</p>\n\n\n\n## 最近访客： ##\n\n\n<ul class=\"ds-recent-visitors\" data-num-items=\"30\" data-avatar-size=\"56\"></ul>","updated":"2017-03-06T12:43:43.914Z","path":"guestbook/index.html","comments":1,"_id":"cke02o6u2000864xt1wqxzg7x","content":"<style type=\"text/css\">\n    strong a {\n        color: #747474;\n    }\n    .player {\n        text-align: center;\n        margin: .5em auto 0;\n        width: 100%;\n        max-width: 22em;\n    }\n    .player br {\n        display: none;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #ds-recent-visitors {\n        margin: 0;\n        padding: 0;\n    }\n    #ds-recent-visitors div img {\n        display: inline-block !important;\n        width: 56px !important;\n        height: 56px !important;\n        border-radius: 50%;\n        border: 1px solid #ddd;\n        padding: 2px;\n        box-shadow: 1px 1px 1px rgba(0,0,0, .15);\n    }\n    .article-entry img:first-child {\n        display: block;\n    }\n    .article-entry span {\n        font-family: Arial;\n    }\n    #ds-hot-posts {\n        display: none;\n    }\n</style>\n\n<hr>\n<p>　　<strong>如果大家有什么想说的，可以在这里留言！</strong></p>\n<p class=\"sign\"><span>——</span> Terry_Tian, 2017年2月17日</p>\n\n\n\n<h2 id=\"最近访客：\"><a href=\"#最近访客：\" class=\"headerlink\" title=\"最近访客：\"></a>最近访客：</h2><ul class=\"ds-recent-visitors\" data-num-items=\"30\" data-avatar-size=\"56\"></ul>","excerpt":"","more":"<style type=\"text/css\">\n    strong a {\n        color: #747474;\n    }\n    .player {\n        text-align: center;\n        margin: .5em auto 0;\n        width: 100%;\n        max-width: 22em;\n    }\n    .player br {\n        display: none;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #ds-recent-visitors {\n        margin: 0;\n        padding: 0;\n    }\n    #ds-recent-visitors div img {\n        display: inline-block !important;\n        width: 56px !important;\n        height: 56px !important;\n        border-radius: 50%;\n        border: 1px solid #ddd;\n        padding: 2px;\n        box-shadow: 1px 1px 1px rgba(0,0,0, .15);\n    }\n    .article-entry img:first-child {\n        display: block;\n    }\n    .article-entry span {\n        font-family: Arial;\n    }\n    #ds-hot-posts {\n        display: none;\n    }\n</style>\n\n<hr>\n<p>　　<strong>如果大家有什么想说的，可以在这里留言！</strong></p>\n<p class=\"sign\"><span>——</span> Terry_Tian, 2017年2月17日</p>\n\n\n\n<h2 id=\"最近访客：\"><a href=\"#最近访客：\" class=\"headerlink\" title=\"最近访客：\"></a>最近访客：</h2><ul class=\"ds-recent-visitors\" data-num-items=\"30\" data-avatar-size=\"56\"></ul>"},{"date":"2017-02-17T07:17:36.000Z","fancybox":false,"layout":"tags","title":"标签","description":"用户自定义页面功能演示","comments":0,"reward":false,"_content":"","source":"tags/index.md","raw":"date: 2017-02-17 15:17:36\nfancybox: false\nlayout: tags      # 必须\ntitle: 标签  # 必须，页面名称\ndescription: 用户自定义页面功能演示       # 页面二级标题，描述性文字\ncomments: false     # 禁用评论，可选，默认开启\nreward: false       # 禁用打赏，可选，默认开启\n\n---","updated":"2017-03-06T12:41:55.553Z","path":"tags/index.html","_id":"cke02o70w004m64xtm96ebc83","content":"","excerpt":"","more":""}],"Post":[{"title":"1.初识RabbitMQ","date":"2019-09-05T12:52:52.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n*** 感谢阅读这篇博文，欢迎关注与评论！***\n----------\n1. 什么是消息中间件？\n2. 消息中间件的作用\n3. RabbitMQ 的安装及简单使用\n<!-- more --> \n\n<The rest of contents | 余下全文> \n\n### 1.什么是消息中间件？\n消息队列中间件 (Message Queue Middleware ，简称为 MQ) 是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n### 2.消息中间件的作用\n- **解耦**:在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束即可。\n- **冗余〈存储)**： 有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把 个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保存直到你使用完毕。\n- **扩展性**: 因为消息中间件解耦了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n- **削峰**: 在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流 并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费 使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩潰。\n- **可恢复性**: 当系统一部分组件失效时，不会影响到整个系统，消息中间件降低了进程间的稿合度，所以即使处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。\n- **顺序保证**: 在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n- **缓冲**: 在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过 个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速，该缓冲层有助于控制和优化数据流经过系统的速度。\n- **异步通信**: 在很多时候应用不想也不需要立即处理消息 消息中间件提供了异步处理机制，允许应用把 些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n### 3.RabbitMQ 的安装及简单使用\n>RabbitMQ 是由 Erlang 语言编写的 也正因如此 在安装 RabbitMQ 之前需要安装 Erlang 。\n#### 1.安装Erlang(以Linux环境下为例)\n1. 新建文件夹，将 Erlang 与 RabbitMQ 安装到一起，执行如下命令\n```\ncd /usr/local/src/ //进入此目录下\nmkdir rabbitmq     //创建文件夹\ncd rabbitmq        //进入新创建的文件夹\n```\n 2. 修改 rabbitmq-erlang.repo 文件中的内容：\n```\nvi /etc/yum.repos.d/rabbitmq-erlang.repo\n```\n内容如下:（可以看出是安装的21x版本的 Erlang）\n```\n[rabbitmq-erlang] \nname=rabbitmq-erlang\nbaseurl=https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/21/el/7\ngpgcheck=1\ngpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc\nrepo_gpgcheck=0\nenabled=1\n```\n3. 安装 Erlang\n```\nsudo yum install erlang\n```\n4. 验证是否安装成功，输入命令：`erl`。\n#### 2.安装 RabbitMQ(以Linux环境下为例)\n1. 将下载的安装包上传到上边创建的rabbitmq目录下，执行如下命令\n```\nrpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc\nyum install rabbitmq-server-3.6.1-1.noarch.rpm//选择自己的包进行安装\n```\n2. 常用的 rabbitMQ 命令\n```\n启动：systemctl start rabbitmq-server\n停止：service rabbitmq-server stop\n重启：service rabbitmq-server restart\n开机自动启动：systemctl enable rabbitmq-server\n查看 rabbitmq-server 状态：rabbitmqctl status\n```\n3. 设置配置文件\n```\ncd /etc/rabbitmq\ncp /usr/share/doc/rabbitmq-server-3.4.1/rabbitmq.config.example /etc/rabbitmq/\nmv rabbitmq.config.example rabbitmq.config\n```\n4. 开启用户远程访问\n```\nvi /etc/rabbitmq/rabbitmq.config\n```\n```\n%% Uncomment the following line if you want to allow access to the\n   %% guest user from anywhere on the network.\n   %% {loopback_users, []}  //注意要去掉后面的逗号。\n```\n5. 开启web界面管理工具\n```\nrabbitmq-plugins enable rabbitmq_management\nservice rabbitmq-server restart\n```\n可以在本机浏览器输入 `http://localhost:15672` 访问 rabbitmq 主页，账户 `guest` 密码 `guest`。\n\n6. 防火墙开放15672端口\n```\n/sbin/iptables -I INPUT -p tcp --dport 15672 -j ACCEPT\n```\n注：关闭虚拟机centos的防火墙\n```\n一、.对于centos7自带的防火墙的相关指令 \nsystemctl stop firewalld.service #停止firewall \nsystemctl disable firewalld.service #禁止firewall开机启动 \nsystemctl status firewalld.service #查看firewall的状态\n二、iptables防火墙的相关状态 \n关闭虚拟机防火墙： \n关闭命令： service iptables stop \n永久关闭防火墙：chkconfig iptables off \n两个命令同时运行，运行完成后查看防火墙关闭状态 \nservice iptables status \n1 关闭防火墙: service iptables stop \n2 启动防火墙: service iptables start \n3 重启防火墙: service iptables restart \n4 查看防火墙状态: service iptables status \n5 永久关闭防火墙: chkconfig iptables off \n6 永久关闭后启用: chkconfig iptables on\n```\n7.  简单配置 RabbitMQ\n- 添加自定义用户名为 “admin” 以及密码为 “123456” 的管理员账号： 执行命令 `rabbitmqctl add_user admin 123456`。\n- 给 admin 账号设置为管理员：执行命令 `rabbitmqctl set_user_tags admin administrator`。\n- 给 admin 账号授权：执行命令 `rabbitmqctl set_permissions -p / admin “.“ “.“ “.*”`。\n- 查看 admin 账户的权限： 执行命令 `rabbitmqctl list_user_permissions admin`。\n\n8. 日志文件以及配置文件的位置\n- 日志文件在：`$RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME.log`下面，一般 `$RABBITMQ_LOG_BASE=$RABBITMQ_HOME/var/log/rabbitmq`。一般默认日志文件会在`/var/log/rabbitmq`文件下.\n\n该日志文件的开始部分记录了rabbitmq 启动时查找相关文件的记录，例如：\n```\nnode           : rabbit@macvm\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : (none)\ncookie hash    : jzIB5AXnFFYHzF/o4qC9sw==\nlog(s)         : /var/log/rabbitmq/rabbit@macvm.log\n    \t       : /var/log/rabbitmq/rabbit@macvm_upgrade.log\ndatabase dir   : /var/lib/rabbitmq/mnesia/rabbit@macvm\n```\n日志记录显示了各个系统文件对应的位置。","source":"_posts/1.初识RabbitMQ.md","raw":"---\ntitle: 1.初识RabbitMQ\ndate: 2019-09-5 20:52:52\ncategories: RabbitMQ #文章文类\ntags: [消息中间件]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n*** 感谢阅读这篇博文，欢迎关注与评论！***\n----------\n1. 什么是消息中间件？\n2. 消息中间件的作用\n3. RabbitMQ 的安装及简单使用\n<!-- more --> \n\n<The rest of contents | 余下全文> \n\n### 1.什么是消息中间件？\n消息队列中间件 (Message Queue Middleware ，简称为 MQ) 是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n### 2.消息中间件的作用\n- **解耦**:在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束即可。\n- **冗余〈存储)**： 有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把 个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保存直到你使用完毕。\n- **扩展性**: 因为消息中间件解耦了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n- **削峰**: 在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流 并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费 使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩潰。\n- **可恢复性**: 当系统一部分组件失效时，不会影响到整个系统，消息中间件降低了进程间的稿合度，所以即使处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。\n- **顺序保证**: 在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n- **缓冲**: 在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过 个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速，该缓冲层有助于控制和优化数据流经过系统的速度。\n- **异步通信**: 在很多时候应用不想也不需要立即处理消息 消息中间件提供了异步处理机制，允许应用把 些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n### 3.RabbitMQ 的安装及简单使用\n>RabbitMQ 是由 Erlang 语言编写的 也正因如此 在安装 RabbitMQ 之前需要安装 Erlang 。\n#### 1.安装Erlang(以Linux环境下为例)\n1. 新建文件夹，将 Erlang 与 RabbitMQ 安装到一起，执行如下命令\n```\ncd /usr/local/src/ //进入此目录下\nmkdir rabbitmq     //创建文件夹\ncd rabbitmq        //进入新创建的文件夹\n```\n 2. 修改 rabbitmq-erlang.repo 文件中的内容：\n```\nvi /etc/yum.repos.d/rabbitmq-erlang.repo\n```\n内容如下:（可以看出是安装的21x版本的 Erlang）\n```\n[rabbitmq-erlang] \nname=rabbitmq-erlang\nbaseurl=https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/21/el/7\ngpgcheck=1\ngpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc\nrepo_gpgcheck=0\nenabled=1\n```\n3. 安装 Erlang\n```\nsudo yum install erlang\n```\n4. 验证是否安装成功，输入命令：`erl`。\n#### 2.安装 RabbitMQ(以Linux环境下为例)\n1. 将下载的安装包上传到上边创建的rabbitmq目录下，执行如下命令\n```\nrpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc\nyum install rabbitmq-server-3.6.1-1.noarch.rpm//选择自己的包进行安装\n```\n2. 常用的 rabbitMQ 命令\n```\n启动：systemctl start rabbitmq-server\n停止：service rabbitmq-server stop\n重启：service rabbitmq-server restart\n开机自动启动：systemctl enable rabbitmq-server\n查看 rabbitmq-server 状态：rabbitmqctl status\n```\n3. 设置配置文件\n```\ncd /etc/rabbitmq\ncp /usr/share/doc/rabbitmq-server-3.4.1/rabbitmq.config.example /etc/rabbitmq/\nmv rabbitmq.config.example rabbitmq.config\n```\n4. 开启用户远程访问\n```\nvi /etc/rabbitmq/rabbitmq.config\n```\n```\n%% Uncomment the following line if you want to allow access to the\n   %% guest user from anywhere on the network.\n   %% {loopback_users, []}  //注意要去掉后面的逗号。\n```\n5. 开启web界面管理工具\n```\nrabbitmq-plugins enable rabbitmq_management\nservice rabbitmq-server restart\n```\n可以在本机浏览器输入 `http://localhost:15672` 访问 rabbitmq 主页，账户 `guest` 密码 `guest`。\n\n6. 防火墙开放15672端口\n```\n/sbin/iptables -I INPUT -p tcp --dport 15672 -j ACCEPT\n```\n注：关闭虚拟机centos的防火墙\n```\n一、.对于centos7自带的防火墙的相关指令 \nsystemctl stop firewalld.service #停止firewall \nsystemctl disable firewalld.service #禁止firewall开机启动 \nsystemctl status firewalld.service #查看firewall的状态\n二、iptables防火墙的相关状态 \n关闭虚拟机防火墙： \n关闭命令： service iptables stop \n永久关闭防火墙：chkconfig iptables off \n两个命令同时运行，运行完成后查看防火墙关闭状态 \nservice iptables status \n1 关闭防火墙: service iptables stop \n2 启动防火墙: service iptables start \n3 重启防火墙: service iptables restart \n4 查看防火墙状态: service iptables status \n5 永久关闭防火墙: chkconfig iptables off \n6 永久关闭后启用: chkconfig iptables on\n```\n7.  简单配置 RabbitMQ\n- 添加自定义用户名为 “admin” 以及密码为 “123456” 的管理员账号： 执行命令 `rabbitmqctl add_user admin 123456`。\n- 给 admin 账号设置为管理员：执行命令 `rabbitmqctl set_user_tags admin administrator`。\n- 给 admin 账号授权：执行命令 `rabbitmqctl set_permissions -p / admin “.“ “.“ “.*”`。\n- 查看 admin 账户的权限： 执行命令 `rabbitmqctl list_user_permissions admin`。\n\n8. 日志文件以及配置文件的位置\n- 日志文件在：`$RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME.log`下面，一般 `$RABBITMQ_LOG_BASE=$RABBITMQ_HOME/var/log/rabbitmq`。一般默认日志文件会在`/var/log/rabbitmq`文件下.\n\n该日志文件的开始部分记录了rabbitmq 启动时查找相关文件的记录，例如：\n```\nnode           : rabbit@macvm\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : (none)\ncookie hash    : jzIB5AXnFFYHzF/o4qC9sw==\nlog(s)         : /var/log/rabbitmq/rabbit@macvm.log\n    \t       : /var/log/rabbitmq/rabbit@macvm_upgrade.log\ndatabase dir   : /var/lib/rabbitmq/mnesia/rabbit@macvm\n```\n日志记录显示了各个系统文件对应的位置。","slug":"1.初识RabbitMQ","published":1,"updated":"2019-09-06T03:14:13.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6tk000164xtydb7fjmw","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h2 id=\"感谢阅读这篇博文，欢迎关注与评论！\"><a href=\"#感谢阅读这篇博文，欢迎关注与评论！\" class=\"headerlink\" title=\" 感谢阅读这篇博文，欢迎关注与评论！\"></a><strong><em> 感谢阅读这篇博文，欢迎关注与评论！</em></strong></h2><ol>\n<li>什么是消息中间件？</li>\n<li>消息中间件的作用</li>\n<li>RabbitMQ 的安装及简单使用<a id=\"more\"></a> \n</li>\n</ol>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"> \n\n<h3 id=\"1-什么是消息中间件？\"><a href=\"#1-什么是消息中间件？\" class=\"headerlink\" title=\"1.什么是消息中间件？\"></a>1.什么是消息中间件？</h3><p>消息队列中间件 (Message Queue Middleware ，简称为 MQ) 是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<h3 id=\"2-消息中间件的作用\"><a href=\"#2-消息中间件的作用\" class=\"headerlink\" title=\"2.消息中间件的作用\"></a>2.消息中间件的作用</h3><ul>\n<li><strong>解耦</strong>:在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束即可。</li>\n<li><strong>冗余〈存储)</strong>： 有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把 个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保存直到你使用完毕。</li>\n<li><strong>扩展性</strong>: 因为消息中间件解耦了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</li>\n<li><strong>削峰</strong>: 在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流 并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费 使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩潰。</li>\n<li><strong>可恢复性</strong>: 当系统一部分组件失效时，不会影响到整个系统，消息中间件降低了进程间的稿合度，所以即使处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。</li>\n<li><strong>顺序保证</strong>: 在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</li>\n<li><strong>缓冲</strong>: 在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过 个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速，该缓冲层有助于控制和优化数据流经过系统的速度。</li>\n<li><strong>异步通信</strong>: 在很多时候应用不想也不需要立即处理消息 消息中间件提供了异步处理机制，允许应用把 些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。<h3 id=\"3-RabbitMQ-的安装及简单使用\"><a href=\"#3-RabbitMQ-的安装及简单使用\" class=\"headerlink\" title=\"3.RabbitMQ 的安装及简单使用\"></a>3.RabbitMQ 的安装及简单使用</h3><blockquote>\n<p>RabbitMQ 是由 Erlang 语言编写的 也正因如此 在安装 RabbitMQ 之前需要安装 Erlang 。</p>\n<h4 id=\"1-安装Erlang-以Linux环境下为例\"><a href=\"#1-安装Erlang-以Linux环境下为例\" class=\"headerlink\" title=\"1.安装Erlang(以Linux环境下为例)\"></a>1.安装Erlang(以Linux环境下为例)</h4></blockquote>\n</li>\n</ul>\n<ol>\n<li><p>新建文件夹，将 Erlang 与 RabbitMQ 安装到一起，执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/src/ //进入此目录下</div><div class=\"line\">mkdir rabbitmq     //创建文件夹</div><div class=\"line\">cd rabbitmq        //进入新创建的文件夹</div></pre></td></tr></table></figure>\n<ol>\n<li>修改 rabbitmq-erlang.repo 文件中的内容：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/yum.repos.d/rabbitmq-erlang.repo</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p>内容如下:（可以看出是安装的21x版本的 Erlang）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[rabbitmq-erlang] </div><div class=\"line\">name=rabbitmq-erlang</div><div class=\"line\">baseurl=https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/21/el/7</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</div><div class=\"line\">repo_gpgcheck=0</div><div class=\"line\">enabled=1</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>安装 Erlang</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install erlang</div></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否安装成功，输入命令：<code>erl</code>。</p>\n<h4 id=\"2-安装-RabbitMQ-以Linux环境下为例\"><a href=\"#2-安装-RabbitMQ-以Linux环境下为例\" class=\"headerlink\" title=\"2.安装 RabbitMQ(以Linux环境下为例)\"></a>2.安装 RabbitMQ(以Linux环境下为例)</h4></li>\n<li><p>将下载的安装包上传到上边创建的rabbitmq目录下，执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc</div><div class=\"line\">yum install rabbitmq-server-3.6.1-1.noarch.rpm//选择自己的包进行安装</div></pre></td></tr></table></figure>\n</li>\n<li><p>常用的 rabbitMQ 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动：systemctl start rabbitmq-server</div><div class=\"line\">停止：service rabbitmq-server stop</div><div class=\"line\">重启：service rabbitmq-server restart</div><div class=\"line\">开机自动启动：systemctl enable rabbitmq-server</div><div class=\"line\">查看 rabbitmq-server 状态：rabbitmqctl status</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /etc/rabbitmq</div><div class=\"line\">cp /usr/share/doc/rabbitmq-server-3.4.1/rabbitmq.config.example /etc/rabbitmq/</div><div class=\"line\">mv rabbitmq.config.example rabbitmq.config</div></pre></td></tr></table></figure>\n</li>\n<li><p>开启用户远程访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/rabbitmq/rabbitmq.config</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">%% Uncomment the following line if you want to allow access to the</div><div class=\"line\">   %% guest user from anywhere on the network.</div><div class=\"line\">   %% &#123;loopback_users, []&#125;  //注意要去掉后面的逗号。</div></pre></td></tr></table></figure>\n<ol>\n<li>开启web界面管理工具<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmq-plugins enable rabbitmq_management</div><div class=\"line\">service rabbitmq-server restart</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以在本机浏览器输入 <code>http://localhost:15672</code> 访问 rabbitmq 主页，账户 <code>guest</code> 密码 <code>guest</code>。</p>\n<ol>\n<li>防火墙开放15672端口<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/sbin/iptables -I INPUT -p tcp --dport 15672 -j ACCEPT</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注：关闭虚拟机centos的防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">一、.对于centos7自带的防火墙的相关指令 </div><div class=\"line\">systemctl stop firewalld.service #停止firewall </div><div class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动 </div><div class=\"line\">systemctl status firewalld.service #查看firewall的状态</div><div class=\"line\">二、iptables防火墙的相关状态 </div><div class=\"line\">关闭虚拟机防火墙： </div><div class=\"line\">关闭命令： service iptables stop </div><div class=\"line\">永久关闭防火墙：chkconfig iptables off </div><div class=\"line\">两个命令同时运行，运行完成后查看防火墙关闭状态 </div><div class=\"line\">service iptables status </div><div class=\"line\">1 关闭防火墙: service iptables stop </div><div class=\"line\">2 启动防火墙: service iptables start </div><div class=\"line\">3 重启防火墙: service iptables restart </div><div class=\"line\">4 查看防火墙状态: service iptables status </div><div class=\"line\">5 永久关闭防火墙: chkconfig iptables off </div><div class=\"line\">6 永久关闭后启用: chkconfig iptables on</div></pre></td></tr></table></figure></p>\n<ol>\n<li>简单配置 RabbitMQ</li>\n</ol>\n<ul>\n<li>添加自定义用户名为 “admin” 以及密码为 “123456” 的管理员账号： 执行命令 <code>rabbitmqctl add_user admin 123456</code>。</li>\n<li>给 admin 账号设置为管理员：执行命令 <code>rabbitmqctl set_user_tags admin administrator</code>。</li>\n<li>给 admin 账号授权：执行命令 <code>rabbitmqctl set_permissions -p / admin “.“ “.“ “.*”</code>。</li>\n<li>查看 admin 账户的权限： 执行命令 <code>rabbitmqctl list_user_permissions admin</code>。</li>\n</ul>\n<ol>\n<li>日志文件以及配置文件的位置</li>\n</ol>\n<ul>\n<li>日志文件在：<code>$RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME.log</code>下面，一般 <code>$RABBITMQ_LOG_BASE=$RABBITMQ_HOME/var/log/rabbitmq</code>。一般默认日志文件会在<code>/var/log/rabbitmq</code>文件下.</li>\n</ul>\n<p>该日志文件的开始部分记录了rabbitmq 启动时查找相关文件的记录，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">node           : rabbit@macvm</div><div class=\"line\">home dir       : /var/lib/rabbitmq</div><div class=\"line\">config file(s) : (none)</div><div class=\"line\">cookie hash    : jzIB5AXnFFYHzF/o4qC9sw==</div><div class=\"line\">log(s)         : /var/log/rabbitmq/rabbit@macvm.log</div><div class=\"line\">    \t       : /var/log/rabbitmq/rabbit@macvm_upgrade.log</div><div class=\"line\">database dir   : /var/lib/rabbitmq/mnesia/rabbit@macvm</div></pre></td></tr></table></figure></p>\n<p>日志记录显示了各个系统文件对应的位置。</p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h2 id=\"感谢阅读这篇博文，欢迎关注与评论！\"><a href=\"#感谢阅读这篇博文，欢迎关注与评论！\" class=\"headerlink\" title=\" 感谢阅读这篇博文，欢迎关注与评论！\"></a><strong><em> 感谢阅读这篇博文，欢迎关注与评论！</em></strong></h2><ol>\n<li>什么是消息中间件？</li>\n<li>消息中间件的作用</li>\n<li>RabbitMQ 的安装及简单使用</li></ol></Excerpt>","more":"\n\n<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"> \n\n<h3 id=\"1-什么是消息中间件？\"><a href=\"#1-什么是消息中间件？\" class=\"headerlink\" title=\"1.什么是消息中间件？\"></a>1.什么是消息中间件？</h3><p>消息队列中间件 (Message Queue Middleware ，简称为 MQ) 是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<h3 id=\"2-消息中间件的作用\"><a href=\"#2-消息中间件的作用\" class=\"headerlink\" title=\"2.消息中间件的作用\"></a>2.消息中间件的作用</h3><ul>\n<li><strong>解耦</strong>:在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束即可。</li>\n<li><strong>冗余〈存储)</strong>： 有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把 个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保存直到你使用完毕。</li>\n<li><strong>扩展性</strong>: 因为消息中间件解耦了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</li>\n<li><strong>削峰</strong>: 在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流 并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费 使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩潰。</li>\n<li><strong>可恢复性</strong>: 当系统一部分组件失效时，不会影响到整个系统，消息中间件降低了进程间的稿合度，所以即使处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。</li>\n<li><strong>顺序保证</strong>: 在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</li>\n<li><strong>缓冲</strong>: 在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过 个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速，该缓冲层有助于控制和优化数据流经过系统的速度。</li>\n<li><strong>异步通信</strong>: 在很多时候应用不想也不需要立即处理消息 消息中间件提供了异步处理机制，允许应用把 些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。<h3 id=\"3-RabbitMQ-的安装及简单使用\"><a href=\"#3-RabbitMQ-的安装及简单使用\" class=\"headerlink\" title=\"3.RabbitMQ 的安装及简单使用\"></a>3.RabbitMQ 的安装及简单使用</h3><blockquote>\n<p>RabbitMQ 是由 Erlang 语言编写的 也正因如此 在安装 RabbitMQ 之前需要安装 Erlang 。</p>\n<h4 id=\"1-安装Erlang-以Linux环境下为例\"><a href=\"#1-安装Erlang-以Linux环境下为例\" class=\"headerlink\" title=\"1.安装Erlang(以Linux环境下为例)\"></a>1.安装Erlang(以Linux环境下为例)</h4></blockquote>\n</li>\n</ul>\n<ol>\n<li><p>新建文件夹，将 Erlang 与 RabbitMQ 安装到一起，执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/src/ //进入此目录下</div><div class=\"line\">mkdir rabbitmq     //创建文件夹</div><div class=\"line\">cd rabbitmq        //进入新创建的文件夹</div></pre></td></tr></table></figure>\n<ol>\n<li>修改 rabbitmq-erlang.repo 文件中的内容：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/yum.repos.d/rabbitmq-erlang.repo</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p>内容如下:（可以看出是安装的21x版本的 Erlang）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[rabbitmq-erlang] </div><div class=\"line\">name=rabbitmq-erlang</div><div class=\"line\">baseurl=https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/21/el/7</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</div><div class=\"line\">repo_gpgcheck=0</div><div class=\"line\">enabled=1</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>安装 Erlang</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install erlang</div></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否安装成功，输入命令：<code>erl</code>。</p>\n<h4 id=\"2-安装-RabbitMQ-以Linux环境下为例\"><a href=\"#2-安装-RabbitMQ-以Linux环境下为例\" class=\"headerlink\" title=\"2.安装 RabbitMQ(以Linux环境下为例)\"></a>2.安装 RabbitMQ(以Linux环境下为例)</h4></li>\n<li><p>将下载的安装包上传到上边创建的rabbitmq目录下，执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc</div><div class=\"line\">yum install rabbitmq-server-3.6.1-1.noarch.rpm//选择自己的包进行安装</div></pre></td></tr></table></figure>\n</li>\n<li><p>常用的 rabbitMQ 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动：systemctl start rabbitmq-server</div><div class=\"line\">停止：service rabbitmq-server stop</div><div class=\"line\">重启：service rabbitmq-server restart</div><div class=\"line\">开机自动启动：systemctl enable rabbitmq-server</div><div class=\"line\">查看 rabbitmq-server 状态：rabbitmqctl status</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /etc/rabbitmq</div><div class=\"line\">cp /usr/share/doc/rabbitmq-server-3.4.1/rabbitmq.config.example /etc/rabbitmq/</div><div class=\"line\">mv rabbitmq.config.example rabbitmq.config</div></pre></td></tr></table></figure>\n</li>\n<li><p>开启用户远程访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/rabbitmq/rabbitmq.config</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">%% Uncomment the following line if you want to allow access to the</div><div class=\"line\">   %% guest user from anywhere on the network.</div><div class=\"line\">   %% &#123;loopback_users, []&#125;  //注意要去掉后面的逗号。</div></pre></td></tr></table></figure>\n<ol>\n<li>开启web界面管理工具<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmq-plugins enable rabbitmq_management</div><div class=\"line\">service rabbitmq-server restart</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以在本机浏览器输入 <code>http://localhost:15672</code> 访问 rabbitmq 主页，账户 <code>guest</code> 密码 <code>guest</code>。</p>\n<ol>\n<li>防火墙开放15672端口<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/sbin/iptables -I INPUT -p tcp --dport 15672 -j ACCEPT</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注：关闭虚拟机centos的防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">一、.对于centos7自带的防火墙的相关指令 </div><div class=\"line\">systemctl stop firewalld.service #停止firewall </div><div class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动 </div><div class=\"line\">systemctl status firewalld.service #查看firewall的状态</div><div class=\"line\">二、iptables防火墙的相关状态 </div><div class=\"line\">关闭虚拟机防火墙： </div><div class=\"line\">关闭命令： service iptables stop </div><div class=\"line\">永久关闭防火墙：chkconfig iptables off </div><div class=\"line\">两个命令同时运行，运行完成后查看防火墙关闭状态 </div><div class=\"line\">service iptables status </div><div class=\"line\">1 关闭防火墙: service iptables stop </div><div class=\"line\">2 启动防火墙: service iptables start </div><div class=\"line\">3 重启防火墙: service iptables restart </div><div class=\"line\">4 查看防火墙状态: service iptables status </div><div class=\"line\">5 永久关闭防火墙: chkconfig iptables off </div><div class=\"line\">6 永久关闭后启用: chkconfig iptables on</div></pre></td></tr></table></figure></p>\n<ol>\n<li>简单配置 RabbitMQ</li>\n</ol>\n<ul>\n<li>添加自定义用户名为 “admin” 以及密码为 “123456” 的管理员账号： 执行命令 <code>rabbitmqctl add_user admin 123456</code>。</li>\n<li>给 admin 账号设置为管理员：执行命令 <code>rabbitmqctl set_user_tags admin administrator</code>。</li>\n<li>给 admin 账号授权：执行命令 <code>rabbitmqctl set_permissions -p / admin “.“ “.“ “.*”</code>。</li>\n<li>查看 admin 账户的权限： 执行命令 <code>rabbitmqctl list_user_permissions admin</code>。</li>\n</ul>\n<ol>\n<li>日志文件以及配置文件的位置</li>\n</ol>\n<ul>\n<li>日志文件在：<code>$RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME.log</code>下面，一般 <code>$RABBITMQ_LOG_BASE=$RABBITMQ_HOME/var/log/rabbitmq</code>。一般默认日志文件会在<code>/var/log/rabbitmq</code>文件下.</li>\n</ul>\n<p>该日志文件的开始部分记录了rabbitmq 启动时查找相关文件的记录，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">node           : rabbit@macvm</div><div class=\"line\">home dir       : /var/lib/rabbitmq</div><div class=\"line\">config file(s) : (none)</div><div class=\"line\">cookie hash    : jzIB5AXnFFYHzF/o4qC9sw==</div><div class=\"line\">log(s)         : /var/log/rabbitmq/rabbit@macvm.log</div><div class=\"line\">    \t       : /var/log/rabbitmq/rabbit@macvm_upgrade.log</div><div class=\"line\">database dir   : /var/lib/rabbitmq/mnesia/rabbit@macvm</div></pre></td></tr></table></figure></p>\n<p>日志记录显示了各个系统文件对应的位置。</p></The>"},{"title":"ADB的简单使用技巧（Android）","date":"2017-04-16T12:52:52.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n\n\n*** 感谢阅读这篇博文，欢迎关注与评论！***\n----------\n\n   **连接手机和电脑的“脐带”，就是ADB——Android Debug Bridge。**\n\n   **？？？？？此处为ADB的简单定义？？？？？？**\n\n<!-- more --> \n\n<The rest of contents | 余下全文>  \n\n## ADB基础 ##\n  \n     ADB工具是位于SDK的`platfrom-tools`目录下，因此在命令行中使用ADB的时候，需要通过cd命令，切换到该目录下，或者将\n     platform-tools的路径添加到系统变量中，这样就可以直接使用了。配置好后，在命令行中输入以下命令。\n\n   ![](http://i.imgur.com/8ToBAAY.png)\n     \n     如果显示如下内容，就说明配置成功了。\n\n   ![](http://i.imgur.com/ieZuG7l.png)\n\n     接着，在命令行中输入以下命令。\n    \n  ![](http://i.imgur.com/n6D8C6G.png)\n     \n     接下来就可以使用shell命令了。（不要问我这里Android这里为什么会出现shell，shell不是在Linux中的吗？因为Android就是就是Linux开发的！）\n## ADB常用命令 ##\n\n    \n  - 显示系统中的全部Android平台\n    \n        C：\\User\\Administrator>android list targets\n  - 安装Apk程序（Install）    \n\n          adb install -r 应用程序.apk\n          C：\\User\\Administrator>adb install -r G:\\Test.apk\n   \n  - 安装Apk程序（Push）\n\n          adb push <local><remote>\n          C：\\User\\Administrator>adb push G:\\Test.apk /system/app\n    \n     \n    > **区别:**\n \n      以上两种方法都可以将Apk安装到手机上，但也有不同。\n     \n        1. adb Install 是将apk安装到 data/data 下，作为普通的用户应用程序。\n        2. adb push 不是安装命令，它是将一个文件写入到手机存储系统。因此，只要拥有相应的权限，就可以把任何apk放到任何目录下，甚至\n           放到System目录下，成为一个系统应用程序。\n  \n    > **adb push 补充：**  \n   \n      \n       1. 向手机写入文件\n   \n            adb push <local><remote>\n            C：\\User\\Administrator>adb push G:\\Test.txt /system/temp/\n       2. 从手机获取文件\n       \n            adb push <remote><local>\n            C：\\User\\Administrator>adb push /system/temp/ G:\\Test.txt \n\n- 删除应用\n    \n        adb remount （重新挂载系统分区，使系统分区重新可写）\n        adb shell\n        cd system/app\n        rm *.apk\n\n- 查看系统盘符\n        \n        adb shell df\n\n- 输出所有已经安装的应用\n    \n        adb shell pm list packages -f\n\n- 模拟按键输入\n        \n        adb shell input keyevent \n        C：\\User\\Administrator>adb shell input keyevent 3\n\n        ps：82 menu   \n            3  home\n           19  up\n           20  down\n           21  left\n           22  right\n           66  enter\n           4   back\n\n- 模拟滑动输入\n   \n        adb shell input touchscreen <x1><y1><x2><y2>\n        adb shell input touchscreen swipe 18 665 18 350\n\n- 录制屏幕\n       \n        adb shell screenrecord /sdcard/demo.mp4\n\n- 重新启动\n     \n        adb reboot  \n\n-------------------\n\n更多信息，大家可以去网上去查询！\n\n\n\n","source":"_posts/ADB命令简单使用技巧（Android）.md","raw":"---\ntitle: ADB的简单使用技巧（Android）\ndate: 2017-04-16 20:52:52\ncategories: Android #文章文类\ntags: [Android,ADB]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n\n\n*** 感谢阅读这篇博文，欢迎关注与评论！***\n----------\n\n   **连接手机和电脑的“脐带”，就是ADB——Android Debug Bridge。**\n\n   **？？？？？此处为ADB的简单定义？？？？？？**\n\n<!-- more --> \n\n<The rest of contents | 余下全文>  \n\n## ADB基础 ##\n  \n     ADB工具是位于SDK的`platfrom-tools`目录下，因此在命令行中使用ADB的时候，需要通过cd命令，切换到该目录下，或者将\n     platform-tools的路径添加到系统变量中，这样就可以直接使用了。配置好后，在命令行中输入以下命令。\n\n   ![](http://i.imgur.com/8ToBAAY.png)\n     \n     如果显示如下内容，就说明配置成功了。\n\n   ![](http://i.imgur.com/ieZuG7l.png)\n\n     接着，在命令行中输入以下命令。\n    \n  ![](http://i.imgur.com/n6D8C6G.png)\n     \n     接下来就可以使用shell命令了。（不要问我这里Android这里为什么会出现shell，shell不是在Linux中的吗？因为Android就是就是Linux开发的！）\n## ADB常用命令 ##\n\n    \n  - 显示系统中的全部Android平台\n    \n        C：\\User\\Administrator>android list targets\n  - 安装Apk程序（Install）    \n\n          adb install -r 应用程序.apk\n          C：\\User\\Administrator>adb install -r G:\\Test.apk\n   \n  - 安装Apk程序（Push）\n\n          adb push <local><remote>\n          C：\\User\\Administrator>adb push G:\\Test.apk /system/app\n    \n     \n    > **区别:**\n \n      以上两种方法都可以将Apk安装到手机上，但也有不同。\n     \n        1. adb Install 是将apk安装到 data/data 下，作为普通的用户应用程序。\n        2. adb push 不是安装命令，它是将一个文件写入到手机存储系统。因此，只要拥有相应的权限，就可以把任何apk放到任何目录下，甚至\n           放到System目录下，成为一个系统应用程序。\n  \n    > **adb push 补充：**  \n   \n      \n       1. 向手机写入文件\n   \n            adb push <local><remote>\n            C：\\User\\Administrator>adb push G:\\Test.txt /system/temp/\n       2. 从手机获取文件\n       \n            adb push <remote><local>\n            C：\\User\\Administrator>adb push /system/temp/ G:\\Test.txt \n\n- 删除应用\n    \n        adb remount （重新挂载系统分区，使系统分区重新可写）\n        adb shell\n        cd system/app\n        rm *.apk\n\n- 查看系统盘符\n        \n        adb shell df\n\n- 输出所有已经安装的应用\n    \n        adb shell pm list packages -f\n\n- 模拟按键输入\n        \n        adb shell input keyevent \n        C：\\User\\Administrator>adb shell input keyevent 3\n\n        ps：82 menu   \n            3  home\n           19  up\n           20  down\n           21  left\n           22  right\n           66  enter\n           4   back\n\n- 模拟滑动输入\n   \n        adb shell input touchscreen <x1><y1><x2><y2>\n        adb shell input touchscreen swipe 18 665 18 350\n\n- 录制屏幕\n       \n        adb shell screenrecord /sdcard/demo.mp4\n\n- 重新启动\n     \n        adb reboot  \n\n-------------------\n\n更多信息，大家可以去网上去查询！\n\n\n\n","slug":"ADB命令简单使用技巧（Android）","published":1,"updated":"2017-04-16T14:26:11.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6ts000364xt6b9vwa0v","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n\n<h2 id=\"感谢阅读这篇博文，欢迎关注与评论！\"><a href=\"#感谢阅读这篇博文，欢迎关注与评论！\" class=\"headerlink\" title=\" 感谢阅读这篇博文，欢迎关注与评论！\"></a><strong><em> 感谢阅读这篇博文，欢迎关注与评论！</em></strong></h2><p>   <strong>连接手机和电脑的“脐带”，就是ADB——Android Debug Bridge。</strong></p>\n<p>   <strong>？？？？？此处为ADB的简单定义？？？？？？</strong></p>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">  \n\n<h2 id=\"ADB基础\"><a href=\"#ADB基础\" class=\"headerlink\" title=\"ADB基础\"></a>ADB基础</h2><pre><code>ADB工具是位于SDK的`platfrom-tools`目录下，因此在命令行中使用ADB的时候，需要通过cd命令，切换到该目录下，或者将\nplatform-tools的路径添加到系统变量中，这样就可以直接使用了。配置好后，在命令行中输入以下命令。\n</code></pre><p>   <img src=\"http://i.imgur.com/8ToBAAY.png\" alt=\"\"></p>\n<pre><code>如果显示如下内容，就说明配置成功了。\n</code></pre><p>   <img src=\"http://i.imgur.com/ieZuG7l.png\" alt=\"\"></p>\n<pre><code>接着，在命令行中输入以下命令。\n</code></pre><p>  <img src=\"http://i.imgur.com/n6D8C6G.png\" alt=\"\"></p>\n<pre><code>接下来就可以使用shell命令了。（不要问我这里Android这里为什么会出现shell，shell不是在Linux中的吗？因为Android就是就是Linux开发的！）\n</code></pre><h2 id=\"ADB常用命令\"><a href=\"#ADB常用命令\" class=\"headerlink\" title=\"ADB常用命令\"></a>ADB常用命令</h2><ul>\n<li><p>显示系统中的全部Android平台</p>\n<pre><code>C：\\User\\Administrator&gt;android list targets\n</code></pre></li>\n<li><p>安装Apk程序（Install）    </p>\n<pre><code>adb install -r 应用程序.apk\nC：\\User\\Administrator&gt;adb install -r G:\\Test.apk\n</code></pre></li>\n<li><p>安装Apk程序（Push）</p>\n<pre><code>adb push &lt;local&gt;&lt;remote&gt;\nC：\\User\\Administrator&gt;adb push G:\\Test.apk /system/app\n</code></pre></li>\n</ul>\n<pre><code>&gt; **区别:**\n\n  以上两种方法都可以将Apk安装到手机上，但也有不同。\n\n    1. adb Install 是将apk安装到 data/data 下，作为普通的用户应用程序。\n    2. adb push 不是安装命令，它是将一个文件写入到手机存储系统。因此，只要拥有相应的权限，就可以把任何apk放到任何目录下，甚至\n       放到System目录下，成为一个系统应用程序。\n\n&gt; **adb push 补充：**  \n\n\n   1. 向手机写入文件\n\n        adb push &lt;local&gt;&lt;remote&gt;\n        C：\\User\\Administrator&gt;adb push G:\\Test.txt /system/temp/\n   2. 从手机获取文件\n\n        adb push &lt;remote&gt;&lt;local&gt;\n        C：\\User\\Administrator&gt;adb push /system/temp/ G:\\Test.txt \n</code></pre><ul>\n<li><p>删除应用</p>\n<pre><code>adb remount （重新挂载系统分区，使系统分区重新可写）\nadb shell\ncd system/app\nrm *.apk\n</code></pre></li>\n<li><p>查看系统盘符</p>\n<pre><code>adb shell df\n</code></pre></li>\n<li><p>输出所有已经安装的应用</p>\n<pre><code>adb shell pm list packages -f\n</code></pre></li>\n<li><p>模拟按键输入</p>\n<pre><code>adb shell input keyevent \nC：\\User\\Administrator&gt;adb shell input keyevent 3\n\nps：82 menu   \n    3  home\n   19  up\n   20  down\n   21  left\n   22  right\n   66  enter\n   4   back\n</code></pre></li>\n<li><p>模拟滑动输入</p>\n<pre><code>adb shell input touchscreen &lt;x1&gt;&lt;y1&gt;&lt;x2&gt;&lt;y2&gt;\nadb shell input touchscreen swipe 18 665 18 350\n</code></pre></li>\n<li><p>录制屏幕</p>\n<pre><code>adb shell screenrecord /sdcard/demo.mp4\n</code></pre></li>\n<li><p>重新启动</p>\n<pre><code>adb reboot  \n</code></pre></li>\n</ul>\n<hr>\n<p>更多信息，大家可以去网上去查询！</p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n\n<h2 id=\"感谢阅读这篇博文，欢迎关注与评论！\"><a href=\"#感谢阅读这篇博文，欢迎关注与评论！\" class=\"headerlink\" title=\" 感谢阅读这篇博文，欢迎关注与评论！\"></a><strong><em> 感谢阅读这篇博文，欢迎关注与评论！</em></strong></h2><p>   <strong>连接手机和电脑的“脐带”，就是ADB——Android Debug Bridge。</strong></p>\n<p>   <strong>？？？？？此处为ADB的简单定义？？？？？？</strong></p></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">  \n\n<h2 id=\"ADB基础\"><a href=\"#ADB基础\" class=\"headerlink\" title=\"ADB基础\"></a>ADB基础</h2><pre><code>ADB工具是位于SDK的`platfrom-tools`目录下，因此在命令行中使用ADB的时候，需要通过cd命令，切换到该目录下，或者将\nplatform-tools的路径添加到系统变量中，这样就可以直接使用了。配置好后，在命令行中输入以下命令。\n</code></pre><p>   <img src=\"http://i.imgur.com/8ToBAAY.png\" alt=\"\"></p>\n<pre><code>如果显示如下内容，就说明配置成功了。\n</code></pre><p>   <img src=\"http://i.imgur.com/ieZuG7l.png\" alt=\"\"></p>\n<pre><code>接着，在命令行中输入以下命令。\n</code></pre><p>  <img src=\"http://i.imgur.com/n6D8C6G.png\" alt=\"\"></p>\n<pre><code>接下来就可以使用shell命令了。（不要问我这里Android这里为什么会出现shell，shell不是在Linux中的吗？因为Android就是就是Linux开发的！）\n</code></pre><h2 id=\"ADB常用命令\"><a href=\"#ADB常用命令\" class=\"headerlink\" title=\"ADB常用命令\"></a>ADB常用命令</h2><ul>\n<li><p>显示系统中的全部Android平台</p>\n<pre><code>C：\\User\\Administrator&gt;android list targets\n</code></pre></li>\n<li><p>安装Apk程序（Install）    </p>\n<pre><code>adb install -r 应用程序.apk\nC：\\User\\Administrator&gt;adb install -r G:\\Test.apk\n</code></pre></li>\n<li><p>安装Apk程序（Push）</p>\n<pre><code>adb push &lt;local&gt;&lt;remote&gt;\nC：\\User\\Administrator&gt;adb push G:\\Test.apk /system/app\n</code></pre></li>\n</ul>\n<pre><code>&gt; **区别:**\n\n  以上两种方法都可以将Apk安装到手机上，但也有不同。\n\n    1. adb Install 是将apk安装到 data/data 下，作为普通的用户应用程序。\n    2. adb push 不是安装命令，它是将一个文件写入到手机存储系统。因此，只要拥有相应的权限，就可以把任何apk放到任何目录下，甚至\n       放到System目录下，成为一个系统应用程序。\n\n&gt; **adb push 补充：**  \n\n\n   1. 向手机写入文件\n\n        adb push &lt;local&gt;&lt;remote&gt;\n        C：\\User\\Administrator&gt;adb push G:\\Test.txt /system/temp/\n   2. 从手机获取文件\n\n        adb push &lt;remote&gt;&lt;local&gt;\n        C：\\User\\Administrator&gt;adb push /system/temp/ G:\\Test.txt \n</code></pre><ul>\n<li><p>删除应用</p>\n<pre><code>adb remount （重新挂载系统分区，使系统分区重新可写）\nadb shell\ncd system/app\nrm *.apk\n</code></pre></li>\n<li><p>查看系统盘符</p>\n<pre><code>adb shell df\n</code></pre></li>\n<li><p>输出所有已经安装的应用</p>\n<pre><code>adb shell pm list packages -f\n</code></pre></li>\n<li><p>模拟按键输入</p>\n<pre><code>adb shell input keyevent \nC：\\User\\Administrator&gt;adb shell input keyevent 3\n\nps：82 menu   \n    3  home\n   19  up\n   20  down\n   21  left\n   22  right\n   66  enter\n   4   back\n</code></pre></li>\n<li><p>模拟滑动输入</p>\n<pre><code>adb shell input touchscreen &lt;x1&gt;&lt;y1&gt;&lt;x2&gt;&lt;y2&gt;\nadb shell input touchscreen swipe 18 665 18 350\n</code></pre></li>\n<li><p>录制屏幕</p>\n<pre><code>adb shell screenrecord /sdcard/demo.mp4\n</code></pre></li>\n<li><p>重新启动</p>\n<pre><code>adb reboot  \n</code></pre></li>\n</ul>\n<hr>\n<p>更多信息，大家可以去网上去查询！</p></The>"},{"title":"Android中布局保存成图片","date":"2017-05-12T09:38:29.000Z","_content":"<Excerpt in index | 首页摘要>\n\n# 概述 #\n\n今天做的APP中的一个表单页面需要以后蓝牙连接打印设备后打印出来，当时想过要截屏，但想了一下截屏的话太麻烦，截屏的话是将手机的屏幕截取下来，包含很多无用的信息，所以这个想法就给pass掉了；后来又想到了转化为图片、PDF什么的，在网上搜索了一些相关信息后，发现还是将整个布局变成图片比较简单，并且也找到了一篇不错测教程，文末附有链接。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 实现流程以及实现代码 #\n\n## 设置权限 ##\n\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n## 获取布局 ##\n\n      relativeLayout = (RelativeLayout) findViewById(R.id.layout_rl);\n\n## 设置布局相关设置 ##\n\n     // 获取图片某布局\n    relativeLayout.setDrawingCacheEnabled(true);\n    relativeLayout.buildDrawingCache();\n\n## 获取图片 ##\n\n     final Bitmap bmp = relativeLayout.getDrawingCache(); // 获取图片\n     savePicture(bmp, \"test.jpg\");// 保存图片\n\n## 保存图片 ##\n\n    public void savePicture(Bitmap bm, String fileName) {\n        Log.i(\"xing\", \"savePicture: ------------------------\");\n        if (null == bm) {\n            Log.i(\"xing\", \"savePicture: ------------------图片为空------\");\n            return;\n        }\n        File foder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/test\");\n        if (!foder.exists()) {\n            foder.mkdirs();\n        }\n        File myCaptureFile = new File(foder, fileName);\n        try {\n            if (!myCaptureFile.exists()) {\n                myCaptureFile.createNewFile();\n            }\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(myCaptureFile));\n            //压缩保存到本地\n            bm.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n            bos.flush();\n            bos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Toast.makeText(this, \"保存成功!\", Toast.LENGTH_SHORT).show();\n\n    }\n\n## 释放资源 ##\n\n    relativeLayout.destroyDrawingCache();\n\n## 完整代码如下 ##\n\n    package com.adwan.savephototolocal;\n\n    import android.graphics.Bitmap;\n    import android.os.Environment;\n    import android.os.Handler;\n    import android.support.v7.app.AppCompatActivity;\n    import android.os.Bundle;\n    import android.util.Log;\n    import android.view.View;\n    import android.widget.RelativeLayout;\n    import android.widget.Toast;\n\n    import java.io.BufferedOutputStream;\n    import java.io.File;\n    import java.io.FileOutputStream;\n    import java.io.IOException;\n\n    public class MainActivity extends AppCompatActivity {\n    private RelativeLayout relativeLayout;\n    private Handler mHandler = new Handler();\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        relativeLayout = (RelativeLayout) findViewById(R.id.layout_rl);\n\n    }\n\n    public void save(View view) {\n        initView();\n    }\n    private void initView() {\n        // 获取图片某布局\n        relativeLayout.setDrawingCacheEnabled(true);\n        relativeLayout.buildDrawingCache();\n\n        mHandler.postDelayed(new Runnable() {\n\n            @Override\n            public void run() {\n                // 要在运行在子线程中\n                final Bitmap bmp = relativeLayout.getDrawingCache(); // 获取图片\n                savePicture(bmp, \"test.jpg\");// 保存图片\n                relativeLayout.destroyDrawingCache(); // 保存过后释放资源\n            }\n        },100);\n    }\n\n    public void savePicture(Bitmap bm, String fileName) {\n        Log.i(\"xing\", \"savePicture: ------------------------\");\n        if (null == bm) {\n            Log.i(\"xing\", \"savePicture: ------------------图片为空------\");\n            return;\n        }\n        File foder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/test\");\n        if (!foder.exists()) {\n            foder.mkdirs();\n        }\n        File myCaptureFile = new File(foder, fileName);\n        try {\n            if (!myCaptureFile.exists()) {\n                myCaptureFile.createNewFile();\n            }\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(myCaptureFile));\n            //压缩保存到本地\n            bm.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n            bos.flush();\n            bos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Toast.makeText(this, \"保存成功!\", Toast.LENGTH_SHORT).show();\n\n    }\n\n    }\n\n\n**参考：**\n\n[http://www.jianshu.com/p/72242e612ecb#](http://www.jianshu.com/p/72242e612ecb#)","source":"_posts/Android中布局保存成图片.md","raw":"---\ntitle: Android中布局保存成图片\ndate: 2017-05-12 17:38:29\ncategories: Android #文章文类\ntags: [Android]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n<Excerpt in index | 首页摘要>\n\n# 概述 #\n\n今天做的APP中的一个表单页面需要以后蓝牙连接打印设备后打印出来，当时想过要截屏，但想了一下截屏的话太麻烦，截屏的话是将手机的屏幕截取下来，包含很多无用的信息，所以这个想法就给pass掉了；后来又想到了转化为图片、PDF什么的，在网上搜索了一些相关信息后，发现还是将整个布局变成图片比较简单，并且也找到了一篇不错测教程，文末附有链接。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 实现流程以及实现代码 #\n\n## 设置权限 ##\n\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n## 获取布局 ##\n\n      relativeLayout = (RelativeLayout) findViewById(R.id.layout_rl);\n\n## 设置布局相关设置 ##\n\n     // 获取图片某布局\n    relativeLayout.setDrawingCacheEnabled(true);\n    relativeLayout.buildDrawingCache();\n\n## 获取图片 ##\n\n     final Bitmap bmp = relativeLayout.getDrawingCache(); // 获取图片\n     savePicture(bmp, \"test.jpg\");// 保存图片\n\n## 保存图片 ##\n\n    public void savePicture(Bitmap bm, String fileName) {\n        Log.i(\"xing\", \"savePicture: ------------------------\");\n        if (null == bm) {\n            Log.i(\"xing\", \"savePicture: ------------------图片为空------\");\n            return;\n        }\n        File foder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/test\");\n        if (!foder.exists()) {\n            foder.mkdirs();\n        }\n        File myCaptureFile = new File(foder, fileName);\n        try {\n            if (!myCaptureFile.exists()) {\n                myCaptureFile.createNewFile();\n            }\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(myCaptureFile));\n            //压缩保存到本地\n            bm.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n            bos.flush();\n            bos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Toast.makeText(this, \"保存成功!\", Toast.LENGTH_SHORT).show();\n\n    }\n\n## 释放资源 ##\n\n    relativeLayout.destroyDrawingCache();\n\n## 完整代码如下 ##\n\n    package com.adwan.savephototolocal;\n\n    import android.graphics.Bitmap;\n    import android.os.Environment;\n    import android.os.Handler;\n    import android.support.v7.app.AppCompatActivity;\n    import android.os.Bundle;\n    import android.util.Log;\n    import android.view.View;\n    import android.widget.RelativeLayout;\n    import android.widget.Toast;\n\n    import java.io.BufferedOutputStream;\n    import java.io.File;\n    import java.io.FileOutputStream;\n    import java.io.IOException;\n\n    public class MainActivity extends AppCompatActivity {\n    private RelativeLayout relativeLayout;\n    private Handler mHandler = new Handler();\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        relativeLayout = (RelativeLayout) findViewById(R.id.layout_rl);\n\n    }\n\n    public void save(View view) {\n        initView();\n    }\n    private void initView() {\n        // 获取图片某布局\n        relativeLayout.setDrawingCacheEnabled(true);\n        relativeLayout.buildDrawingCache();\n\n        mHandler.postDelayed(new Runnable() {\n\n            @Override\n            public void run() {\n                // 要在运行在子线程中\n                final Bitmap bmp = relativeLayout.getDrawingCache(); // 获取图片\n                savePicture(bmp, \"test.jpg\");// 保存图片\n                relativeLayout.destroyDrawingCache(); // 保存过后释放资源\n            }\n        },100);\n    }\n\n    public void savePicture(Bitmap bm, String fileName) {\n        Log.i(\"xing\", \"savePicture: ------------------------\");\n        if (null == bm) {\n            Log.i(\"xing\", \"savePicture: ------------------图片为空------\");\n            return;\n        }\n        File foder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/test\");\n        if (!foder.exists()) {\n            foder.mkdirs();\n        }\n        File myCaptureFile = new File(foder, fileName);\n        try {\n            if (!myCaptureFile.exists()) {\n                myCaptureFile.createNewFile();\n            }\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(myCaptureFile));\n            //压缩保存到本地\n            bm.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n            bos.flush();\n            bos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Toast.makeText(this, \"保存成功!\", Toast.LENGTH_SHORT).show();\n\n    }\n\n    }\n\n\n**参考：**\n\n[http://www.jianshu.com/p/72242e612ecb#](http://www.jianshu.com/p/72242e612ecb#)","slug":"Android中布局保存成图片","published":1,"updated":"2017-05-12T09:53:15.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6tz000764xtuxeh4mv3","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>今天做的APP中的一个表单页面需要以后蓝牙连接打印设备后打印出来，当时想过要截屏，但想了一下截屏的话太麻烦，截屏的话是将手机的屏幕截取下来，包含很多无用的信息，所以这个想法就给pass掉了；后来又想到了转化为图片、PDF什么的，在网上搜索了一些相关信息后，发现还是将整个布局变成图片比较简单，并且也找到了一篇不错测教程，文末附有链接。</p>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"实现流程以及实现代码\"><a href=\"#实现流程以及实现代码\" class=\"headerlink\" title=\"实现流程以及实现代码\"></a>实现流程以及实现代码</h1><h2 id=\"设置权限\"><a href=\"#设置权限\" class=\"headerlink\" title=\"设置权限\"></a>设置权限</h2><pre><code>&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n</code></pre><h2 id=\"获取布局\"><a href=\"#获取布局\" class=\"headerlink\" title=\"获取布局\"></a>获取布局</h2><pre><code>relativeLayout = (RelativeLayout) findViewById(R.id.layout_rl);\n</code></pre><h2 id=\"设置布局相关设置\"><a href=\"#设置布局相关设置\" class=\"headerlink\" title=\"设置布局相关设置\"></a>设置布局相关设置</h2><pre><code> // 获取图片某布局\nrelativeLayout.setDrawingCacheEnabled(true);\nrelativeLayout.buildDrawingCache();\n</code></pre><h2 id=\"获取图片\"><a href=\"#获取图片\" class=\"headerlink\" title=\"获取图片\"></a>获取图片</h2><pre><code>final Bitmap bmp = relativeLayout.getDrawingCache(); // 获取图片\nsavePicture(bmp, &quot;test.jpg&quot;);// 保存图片\n</code></pre><h2 id=\"保存图片\"><a href=\"#保存图片\" class=\"headerlink\" title=\"保存图片\"></a>保存图片</h2><pre><code>public void savePicture(Bitmap bm, String fileName) {\n    Log.i(&quot;xing&quot;, &quot;savePicture: ------------------------&quot;);\n    if (null == bm) {\n        Log.i(&quot;xing&quot;, &quot;savePicture: ------------------图片为空------&quot;);\n        return;\n    }\n    File foder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/test&quot;);\n    if (!foder.exists()) {\n        foder.mkdirs();\n    }\n    File myCaptureFile = new File(foder, fileName);\n    try {\n        if (!myCaptureFile.exists()) {\n            myCaptureFile.createNewFile();\n        }\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(myCaptureFile));\n        //压缩保存到本地\n        bm.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n        bos.flush();\n        bos.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    Toast.makeText(this, &quot;保存成功!&quot;, Toast.LENGTH_SHORT).show();\n\n}\n</code></pre><h2 id=\"释放资源\"><a href=\"#释放资源\" class=\"headerlink\" title=\"释放资源\"></a>释放资源</h2><pre><code>relativeLayout.destroyDrawingCache();\n</code></pre><h2 id=\"完整代码如下\"><a href=\"#完整代码如下\" class=\"headerlink\" title=\"完整代码如下\"></a>完整代码如下</h2><pre><code>package com.adwan.savephototolocal;\n\nimport android.graphics.Bitmap;\nimport android.os.Environment;\nimport android.os.Handler;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.RelativeLayout;\nimport android.widget.Toast;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class MainActivity extends AppCompatActivity {\nprivate RelativeLayout relativeLayout;\nprivate Handler mHandler = new Handler();\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    relativeLayout = (RelativeLayout) findViewById(R.id.layout_rl);\n\n}\n\npublic void save(View view) {\n    initView();\n}\nprivate void initView() {\n    // 获取图片某布局\n    relativeLayout.setDrawingCacheEnabled(true);\n    relativeLayout.buildDrawingCache();\n\n    mHandler.postDelayed(new Runnable() {\n\n        @Override\n        public void run() {\n            // 要在运行在子线程中\n            final Bitmap bmp = relativeLayout.getDrawingCache(); // 获取图片\n            savePicture(bmp, &quot;test.jpg&quot;);// 保存图片\n            relativeLayout.destroyDrawingCache(); // 保存过后释放资源\n        }\n    },100);\n}\n\npublic void savePicture(Bitmap bm, String fileName) {\n    Log.i(&quot;xing&quot;, &quot;savePicture: ------------------------&quot;);\n    if (null == bm) {\n        Log.i(&quot;xing&quot;, &quot;savePicture: ------------------图片为空------&quot;);\n        return;\n    }\n    File foder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/test&quot;);\n    if (!foder.exists()) {\n        foder.mkdirs();\n    }\n    File myCaptureFile = new File(foder, fileName);\n    try {\n        if (!myCaptureFile.exists()) {\n            myCaptureFile.createNewFile();\n        }\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(myCaptureFile));\n        //压缩保存到本地\n        bm.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n        bos.flush();\n        bos.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    Toast.makeText(this, &quot;保存成功!&quot;, Toast.LENGTH_SHORT).show();\n\n}\n\n}\n</code></pre><p><strong>参考：</strong></p>\n<p><a href=\"http://www.jianshu.com/p/72242e612ecb#\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/72242e612ecb#</a></p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>今天做的APP中的一个表单页面需要以后蓝牙连接打印设备后打印出来，当时想过要截屏，但想了一下截屏的话太麻烦，截屏的话是将手机的屏幕截取下来，包含很多无用的信息，所以这个想法就给pass掉了；后来又想到了转化为图片、PDF什么的，在网上搜索了一些相关信息后，发现还是将整个布局变成图片比较简单，并且也找到了一篇不错测教程，文末附有链接。</p></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"实现流程以及实现代码\"><a href=\"#实现流程以及实现代码\" class=\"headerlink\" title=\"实现流程以及实现代码\"></a>实现流程以及实现代码</h1><h2 id=\"设置权限\"><a href=\"#设置权限\" class=\"headerlink\" title=\"设置权限\"></a>设置权限</h2><pre><code>&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n</code></pre><h2 id=\"获取布局\"><a href=\"#获取布局\" class=\"headerlink\" title=\"获取布局\"></a>获取布局</h2><pre><code>relativeLayout = (RelativeLayout) findViewById(R.id.layout_rl);\n</code></pre><h2 id=\"设置布局相关设置\"><a href=\"#设置布局相关设置\" class=\"headerlink\" title=\"设置布局相关设置\"></a>设置布局相关设置</h2><pre><code> // 获取图片某布局\nrelativeLayout.setDrawingCacheEnabled(true);\nrelativeLayout.buildDrawingCache();\n</code></pre><h2 id=\"获取图片\"><a href=\"#获取图片\" class=\"headerlink\" title=\"获取图片\"></a>获取图片</h2><pre><code>final Bitmap bmp = relativeLayout.getDrawingCache(); // 获取图片\nsavePicture(bmp, &quot;test.jpg&quot;);// 保存图片\n</code></pre><h2 id=\"保存图片\"><a href=\"#保存图片\" class=\"headerlink\" title=\"保存图片\"></a>保存图片</h2><pre><code>public void savePicture(Bitmap bm, String fileName) {\n    Log.i(&quot;xing&quot;, &quot;savePicture: ------------------------&quot;);\n    if (null == bm) {\n        Log.i(&quot;xing&quot;, &quot;savePicture: ------------------图片为空------&quot;);\n        return;\n    }\n    File foder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/test&quot;);\n    if (!foder.exists()) {\n        foder.mkdirs();\n    }\n    File myCaptureFile = new File(foder, fileName);\n    try {\n        if (!myCaptureFile.exists()) {\n            myCaptureFile.createNewFile();\n        }\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(myCaptureFile));\n        //压缩保存到本地\n        bm.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n        bos.flush();\n        bos.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    Toast.makeText(this, &quot;保存成功!&quot;, Toast.LENGTH_SHORT).show();\n\n}\n</code></pre><h2 id=\"释放资源\"><a href=\"#释放资源\" class=\"headerlink\" title=\"释放资源\"></a>释放资源</h2><pre><code>relativeLayout.destroyDrawingCache();\n</code></pre><h2 id=\"完整代码如下\"><a href=\"#完整代码如下\" class=\"headerlink\" title=\"完整代码如下\"></a>完整代码如下</h2><pre><code>package com.adwan.savephototolocal;\n\nimport android.graphics.Bitmap;\nimport android.os.Environment;\nimport android.os.Handler;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.RelativeLayout;\nimport android.widget.Toast;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class MainActivity extends AppCompatActivity {\nprivate RelativeLayout relativeLayout;\nprivate Handler mHandler = new Handler();\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    relativeLayout = (RelativeLayout) findViewById(R.id.layout_rl);\n\n}\n\npublic void save(View view) {\n    initView();\n}\nprivate void initView() {\n    // 获取图片某布局\n    relativeLayout.setDrawingCacheEnabled(true);\n    relativeLayout.buildDrawingCache();\n\n    mHandler.postDelayed(new Runnable() {\n\n        @Override\n        public void run() {\n            // 要在运行在子线程中\n            final Bitmap bmp = relativeLayout.getDrawingCache(); // 获取图片\n            savePicture(bmp, &quot;test.jpg&quot;);// 保存图片\n            relativeLayout.destroyDrawingCache(); // 保存过后释放资源\n        }\n    },100);\n}\n\npublic void savePicture(Bitmap bm, String fileName) {\n    Log.i(&quot;xing&quot;, &quot;savePicture: ------------------------&quot;);\n    if (null == bm) {\n        Log.i(&quot;xing&quot;, &quot;savePicture: ------------------图片为空------&quot;);\n        return;\n    }\n    File foder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/test&quot;);\n    if (!foder.exists()) {\n        foder.mkdirs();\n    }\n    File myCaptureFile = new File(foder, fileName);\n    try {\n        if (!myCaptureFile.exists()) {\n            myCaptureFile.createNewFile();\n        }\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(myCaptureFile));\n        //压缩保存到本地\n        bm.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n        bos.flush();\n        bos.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    Toast.makeText(this, &quot;保存成功!&quot;, Toast.LENGTH_SHORT).show();\n\n}\n\n}\n</code></pre><p><strong>参考：</strong></p>\n<p><a href=\"http://www.jianshu.com/p/72242e612ecb#\">http://www.jianshu.com/p/72242e612ecb#</a></p></The>"},{"title":"Android卸载测试应用后再次安装应用失败","date":"2017-05-03T04:19:12.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n\n\n*** 感谢阅读这篇博文，欢迎关注与评论！***\n----------\n\n大家在做Android开发时，可能碰到这样的情况：把手机上的测试APP卸载后，再次安装就安装不上了。（博主的手机是魅族MX5，以前的时候从未碰到这种情况。）\n\n**解决方法：**\n\n在手机与电脑正常连接的情况下，调出命令行窗口。\n\n输入：`adb uninstall 包名`   如：`adb uninstall com.hd.soft.tjg`\n\n按 回车键 后   提示 Success 后，一般就可以正常安装了！\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6.png)\n\n","source":"_posts/Android卸载测试应用后再次安装应用失败.md","raw":"---\ntitle: Android卸载测试应用后再次安装应用失败\ndate: 2017-05-03 12:19:12\ncategories: Android #文章文类\ntags: [Android]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n\n\n*** 感谢阅读这篇博文，欢迎关注与评论！***\n----------\n\n大家在做Android开发时，可能碰到这样的情况：把手机上的测试APP卸载后，再次安装就安装不上了。（博主的手机是魅族MX5，以前的时候从未碰到这种情况。）\n\n**解决方法：**\n\n在手机与电脑正常连接的情况下，调出命令行窗口。\n\n输入：`adb uninstall 包名`   如：`adb uninstall com.hd.soft.tjg`\n\n按 回车键 后   提示 Success 后，一般就可以正常安装了！\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6.png)\n\n","slug":"Android卸载测试应用后再次安装应用失败","published":1,"updated":"2017-05-03T04:35:35.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6u6000964xtip8ndsuy","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n\n<h2 id=\"感谢阅读这篇博文，欢迎关注与评论！\"><a href=\"#感谢阅读这篇博文，欢迎关注与评论！\" class=\"headerlink\" title=\" 感谢阅读这篇博文，欢迎关注与评论！\"></a><strong><em> 感谢阅读这篇博文，欢迎关注与评论！</em></strong></h2><p>大家在做Android开发时，可能碰到这样的情况：把手机上的测试APP卸载后，再次安装就安装不上了。（博主的手机是魅族MX5，以前的时候从未碰到这种情况。）</p>\n<p><strong>解决方法：</strong></p>\n<p>在手机与电脑正常连接的情况下，调出命令行窗口。</p>\n<p>输入：<code>adb uninstall 包名</code>   如：<code>adb uninstall com.hd.soft.tjg</code></p>\n<p>按 回车键 后   提示 Success 后，一般就可以正常安装了！</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6.png\" alt=\"\"></p>\n</excerpt>","excerpt":"","more":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n\n<h2 id=\"感谢阅读这篇博文，欢迎关注与评论！\"><a href=\"#感谢阅读这篇博文，欢迎关注与评论！\" class=\"headerlink\" title=\" 感谢阅读这篇博文，欢迎关注与评论！\"></a><strong><em> 感谢阅读这篇博文，欢迎关注与评论！</em></strong></h2><p>大家在做Android开发时，可能碰到这样的情况：把手机上的测试APP卸载后，再次安装就安装不上了。（博主的手机是魅族MX5，以前的时候从未碰到这种情况。）</p>\n<p><strong>解决方法：</strong></p>\n<p>在手机与电脑正常连接的情况下，调出命令行窗口。</p>\n<p>输入：<code>adb uninstall 包名</code>   如：<code>adb uninstall com.hd.soft.tjg</code></p>\n<p>按 回车键 后   提示 Success 后，一般就可以正常安装了！</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6.png\" alt=\"\"></p>\n</Excerpt>"},{"title":"测试二","date":"2017-02-17T11:51:30.000Z","description":"Welcome to Hexo! This is your very first post.","_content":"\n<div class=\"github-widget\" data-repo=\"MuTouTQ/MuTouTQ.github.io\"></div>\n\n<!-- e.g. -->\n<div class=\"github-widget\" data-repo=\"MOxFIVE/hexo-theme-yelee\"></div>","source":"_posts/DEMO1.md","raw":"---\ntitle: 测试二\ndate: 2017-02-17 19:51:30\ntags: 测试\ndescription: \"Welcome to Hexo! This is your very first post.\"\n\n---\n\n<div class=\"github-widget\" data-repo=\"MuTouTQ/MuTouTQ.github.io\"></div>\n\n<!-- e.g. -->\n<div class=\"github-widget\" data-repo=\"MOxFIVE/hexo-theme-yelee\"></div>","slug":"DEMO1","published":1,"updated":"2017-02-17T13:18:19.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6u8000a64xt9kdb4bu6","content":"<div class=\"github-widget\" data-repo=\"MuTouTQ/MuTouTQ.github.io\"></div>\n\n<!-- e.g. -->\n<div class=\"github-widget\" data-repo=\"MOxFIVE/hexo-theme-yelee\"></div>","excerpt":"","more":"<div class=\"github-widget\" data-repo=\"MuTouTQ/MuTouTQ.github.io\"></div>\n\n<!-- e.g. -->\n<div class=\"github-widget\" data-repo=\"MOxFIVE/hexo-theme-yelee\"></div>"},{"title":"Git常用命令汇总","date":"2018-04-07T12:59:24.000Z","_content":"\n<Excerpt in index | 首页摘要>\n# 前言 #\n\n本文主要记录工作学习中用到的Git常用操作。\n\n**教程思路：**\n\n> 2018/4/7 星期六 下午 9:06:06  1. git中常用命令；\n\n<!-- more --> \n\n1. **git init** ：初始化 git 仓库。\n2. **git status** ：查看你当前 git 仓库的一些状态。\n3. **git add** ：先把改动添加到一个「暂存区」，你可以理解成是一个缓存区域，临时保存你的改动。\n4. **git commit** ：是最后真正的提交，例：commit 是提交的意思，-m 代表是提交信息，相当于备注。\n\n    ```\n      git commit -m 'first commit'\n      git commit -a -m 'added new benchmarks'  #省略添加到缓存区的操作\n    ```\n\n5. **git log** ： 查看所有产生的 commit 记录。\n6. **git branch** ：查看下当前分支情况；git branch a 新建分支a；git checkout a 切换到分支a；git checkout -b a新建一个a分支，并且自动切换到a分支。\n7. **git merge** ：合并分支；合并分支的步骤：第一步是切换到 master 分支，如果你已经在了就不用切换了，第二步执行 git merge a ，意思就是把a分支的代码合并过来；\n8. **git branch -d**：删除分支；git branch -d a 就可以把a分支删除了。\n9. **git branch -D** ：强制删除分支。\n10. **git tag**：查看历史 tag 记录；\n11. **git pull origin master**：意思就是把远程最新的代码更新到本地。\n12. **git push origin master**：意思就是把本地代码推到远程 master 分支。\n13. **git clone**：把项目 clone 到了本地。\n14. 提交代码之前先要设置下自己的用户名与邮箱，这些信息会出现在所有的 commit 记录里，执行以下代码就可以设置：\n\n   ```\n    git config —global user.name \"TerryTian\"\n    git config —global user.email \"tianqing12989@gmail.com\"\n   ```\n\n15. **git lg**：先配置：\n\n   ```\n    git config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\"\n   ```\n\n16. **开启给 Git 着色**：git config --global color.ui true\n17. **设置显示中文文件名**： git config --global core.quotepath false\n18. **checkout**：git checkout develop：切换到 develop 分支；git checkout v1.0：切换tag.","source":"_posts/Git常用命令汇总.md","raw":"---\n  title: Git常用命令汇总\n  date: 2018-04-07 20:59:24\n  categories: Git\n  tags: [Git]\n\n---\n\n<Excerpt in index | 首页摘要>\n# 前言 #\n\n本文主要记录工作学习中用到的Git常用操作。\n\n**教程思路：**\n\n> 2018/4/7 星期六 下午 9:06:06  1. git中常用命令；\n\n<!-- more --> \n\n1. **git init** ：初始化 git 仓库。\n2. **git status** ：查看你当前 git 仓库的一些状态。\n3. **git add** ：先把改动添加到一个「暂存区」，你可以理解成是一个缓存区域，临时保存你的改动。\n4. **git commit** ：是最后真正的提交，例：commit 是提交的意思，-m 代表是提交信息，相当于备注。\n\n    ```\n      git commit -m 'first commit'\n      git commit -a -m 'added new benchmarks'  #省略添加到缓存区的操作\n    ```\n\n5. **git log** ： 查看所有产生的 commit 记录。\n6. **git branch** ：查看下当前分支情况；git branch a 新建分支a；git checkout a 切换到分支a；git checkout -b a新建一个a分支，并且自动切换到a分支。\n7. **git merge** ：合并分支；合并分支的步骤：第一步是切换到 master 分支，如果你已经在了就不用切换了，第二步执行 git merge a ，意思就是把a分支的代码合并过来；\n8. **git branch -d**：删除分支；git branch -d a 就可以把a分支删除了。\n9. **git branch -D** ：强制删除分支。\n10. **git tag**：查看历史 tag 记录；\n11. **git pull origin master**：意思就是把远程最新的代码更新到本地。\n12. **git push origin master**：意思就是把本地代码推到远程 master 分支。\n13. **git clone**：把项目 clone 到了本地。\n14. 提交代码之前先要设置下自己的用户名与邮箱，这些信息会出现在所有的 commit 记录里，执行以下代码就可以设置：\n\n   ```\n    git config —global user.name \"TerryTian\"\n    git config —global user.email \"tianqing12989@gmail.com\"\n   ```\n\n15. **git lg**：先配置：\n\n   ```\n    git config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\"\n   ```\n\n16. **开启给 Git 着色**：git config --global color.ui true\n17. **设置显示中文文件名**： git config --global core.quotepath false\n18. **checkout**：git checkout develop：切换到 develop 分支；git checkout v1.0：切换tag.","slug":"Git常用命令汇总","published":1,"updated":"2018-04-07T13:15:46.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6ud000e64xtzyso0mr4","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"></excerpt></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文主要记录工作学习中用到的Git常用操作。</p>\n<p><strong>教程思路：</strong></p>\n<blockquote>\n<p>2018/4/7 星期六 下午 9:06:06  1. git中常用命令；</p>\n</blockquote>\n<a id=\"more\"></a> \n<ol>\n<li><strong>git init</strong> ：初始化 git 仓库。</li>\n<li><strong>git status</strong> ：查看你当前 git 仓库的一些状态。</li>\n<li><strong>git add</strong> ：先把改动添加到一个「暂存区」，你可以理解成是一个缓存区域，临时保存你的改动。</li>\n<li><p><strong>git commit</strong> ：是最后真正的提交，例：commit 是提交的意思，-m 代表是提交信息，相当于备注。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &apos;first commit&apos;</div><div class=\"line\">git commit -a -m &apos;added new benchmarks&apos;  #省略添加到缓存区的操作</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>git log</strong> ： 查看所有产生的 commit 记录。</p>\n</li>\n<li><strong>git branch</strong> ：查看下当前分支情况；git branch a 新建分支a；git checkout a 切换到分支a；git checkout -b a新建一个a分支，并且自动切换到a分支。</li>\n<li><strong>git merge</strong> ：合并分支；合并分支的步骤：第一步是切换到 master 分支，如果你已经在了就不用切换了，第二步执行 git merge a ，意思就是把a分支的代码合并过来；</li>\n<li><strong>git branch -d</strong>：删除分支；git branch -d a 就可以把a分支删除了。</li>\n<li><strong>git branch -D</strong> ：强制删除分支。</li>\n<li><strong>git tag</strong>：查看历史 tag 记录；</li>\n<li><strong>git pull origin master</strong>：意思就是把远程最新的代码更新到本地。</li>\n<li><strong>git push origin master</strong>：意思就是把本地代码推到远程 master 分支。</li>\n<li><strong>git clone</strong>：把项目 clone 到了本地。</li>\n<li><p>提交代码之前先要设置下自己的用户名与邮箱，这些信息会出现在所有的 commit 记录里，执行以下代码就可以设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config —global user.name &quot;TerryTian&quot;</div><div class=\"line\">git config —global user.email &quot;tianqing12989@gmail.com&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>git lg</strong>：先配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global alias.lg &quot;log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>开启给 Git 着色</strong>：git config –global color.ui true</p>\n</li>\n<li><strong>设置显示中文文件名</strong>： git config –global core.quotepath false</li>\n<li><strong>checkout</strong>：git checkout develop：切换到 develop 分支；git checkout v1.0：切换tag.</li>\n</ol>\n","excerpt":"<p><Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"></Excerpt></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文主要记录工作学习中用到的Git常用操作。</p>\n<p><strong>教程思路：</strong></p>\n<blockquote>\n<p>2018/4/7 星期六 下午 9:06:06  1. git中常用命令；</p>\n</blockquote>","more":"<ol>\n<li><strong>git init</strong> ：初始化 git 仓库。</li>\n<li><strong>git status</strong> ：查看你当前 git 仓库的一些状态。</li>\n<li><strong>git add</strong> ：先把改动添加到一个「暂存区」，你可以理解成是一个缓存区域，临时保存你的改动。</li>\n<li><p><strong>git commit</strong> ：是最后真正的提交，例：commit 是提交的意思，-m 代表是提交信息，相当于备注。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &apos;first commit&apos;</div><div class=\"line\">git commit -a -m &apos;added new benchmarks&apos;  #省略添加到缓存区的操作</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>git log</strong> ： 查看所有产生的 commit 记录。</p>\n</li>\n<li><strong>git branch</strong> ：查看下当前分支情况；git branch a 新建分支a；git checkout a 切换到分支a；git checkout -b a新建一个a分支，并且自动切换到a分支。</li>\n<li><strong>git merge</strong> ：合并分支；合并分支的步骤：第一步是切换到 master 分支，如果你已经在了就不用切换了，第二步执行 git merge a ，意思就是把a分支的代码合并过来；</li>\n<li><strong>git branch -d</strong>：删除分支；git branch -d a 就可以把a分支删除了。</li>\n<li><strong>git branch -D</strong> ：强制删除分支。</li>\n<li><strong>git tag</strong>：查看历史 tag 记录；</li>\n<li><strong>git pull origin master</strong>：意思就是把远程最新的代码更新到本地。</li>\n<li><strong>git push origin master</strong>：意思就是把本地代码推到远程 master 分支。</li>\n<li><strong>git clone</strong>：把项目 clone 到了本地。</li>\n<li><p>提交代码之前先要设置下自己的用户名与邮箱，这些信息会出现在所有的 commit 记录里，执行以下代码就可以设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config —global user.name &quot;TerryTian&quot;</div><div class=\"line\">git config —global user.email &quot;tianqing12989@gmail.com&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>git lg</strong>：先配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global alias.lg &quot;log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>开启给 Git 着色</strong>：git config –global color.ui true</p>\n</li>\n<li><strong>设置显示中文文件名</strong>： git config –global core.quotepath false</li>\n<li><strong>checkout</strong>：git checkout develop：切换到 develop 分支；git checkout v1.0：切换tag.</li>\n</ol>"},{"title":"JAVA学习之Servlet","date":"2017-03-25T15:31:16.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n# Servlet 简介 #\n\n\n> Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。\n\n**Servlet 任务**\n\n- 读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。\n- 读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。\n- 处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。\n- 发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。\n- 发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# Servlet 生命周期 #\n\n    public class ServletDemo1 implements Servlet{\n\n\t//Servlet生命周期方法\n\t//实例化\n\t//在Servlet第一次访问时调用\n\tpublic ServletDemo1(){\n\t\tSystem.out.println(\"*************ServletDemo1执行了***************\");\n\t}\n\t//Servlet生命周期方法\n\t//初始化\n\t//在Servlet第一次访问时调用,在后续每次用户请求时不再调用\n\t@Override\n\tpublic void init(ServletConfig arg0) throws ServletException {\n\t\tSystem.out.println(\"*************init执行了***************\");\n\t\t\n\t}\n\t//Servlet生命周期方法\n\t//服务\n\t//每次访问时都调用\n\t@Override\n\tpublic void service(ServletRequest arg0, ServletResponse arg1)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"*************service执行了***************\");\n\t}\n\t//Servlet生命周期方法\n\t//销毁\n\t@Override\n\tpublic void destroy() {\n\t\tSystem.out.println(\"*************destroy执行了***************\");\n\t\t\n\t}\n\n\t@Override\n\tpublic ServletConfig getServletConfig() {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic String getServletInfo() {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\t\n    }\n\n# HTTP 状态码 #\n<table><tr><td>代码</td><td>\t消息</td><td>\t描述</td></tr>\n<tr><td>100</td><td>\tContinue\t</td><td>只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr>\n<tr><td>101\t</td><td>Switching Protocols</td><td>\t服务器切换协议。</td></tr>\n<tr><td>200</td><td>\tOK</td><td>\t请求成功。</td></tr>\n<tr><td>201\t</td><td>Created</td><td>\t该请求是完整的，并创建一个新的资源。</td></tr>\n<tr><td>202\t</td><td>Accepted\t</td><td>该请求被接受处理，但是该处理是不完整的。</td></tr>\n<tr><td>203\t</td><td>Non-authoritative Information\t</td><td> </td></tr>\n<tr><td>204\t</td><td>No Content\t </td><td></td></tr>\n<tr><td>205\t</td><td>Reset Content\t </td><td></td></tr>\n<tr><td>206\t</td><td>Partial Content\t</td><td> </td></tr>\n<tr><td>300\t</td><td>Multiple Choices</td><td>\t链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr>\n<tr><td>301\t</td><td>Moved Permanently\t</td><td>所请求的页面已经转移到一个新的 URL。</td></tr>\n<tr><td>302\t</td><td>Found\t</td><td>所请求的页面已经临时转移到一个新的 URL。</td></tr>\n<tr><td>303\t</td><td>See Other\t</td><td>所请求的页面可以在另一个不同的 URL 下被找到。</td></tr>\n<tr><td>304\t</td><td>Not Modified\t</td><td> </td></tr>\n<tr><td>305\t</td><td>Use Proxy\t </td><td></td></tr>\n<tr><td>306\t</td><td>Unused\t</td><td>在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr>\n<tr><td>307\t</td><td>Temporary Redirect</td><td>\t所请求的页面已经临时转移到一个新的 URL。</td></tr>\n<tr><td>400\t</td><td>Bad Request</td><td>\t服务器不理解请求。</td></tr>\n<tr><td>401\t</td><td>Unauthorized</td><td>\t所请求的页面需要用户名和密码。</td></tr>\n<tr><td>402\t</td><td>Payment Required</td><td>\t您还不能使用该代码。</td></tr>\n<tr><td>403\t</td><td>Forbidden</td><td>\t禁止访问所请求的页面。</td></tr>\n<tr><td>404\t</td><td>Not Found\t</td><td>服务器无法找到所请求的页面。.</td></tr>\n<tr><td>405\t</td><td>Method Not Allowed\t</td><td>在请求中指定的方法是不允许的。</td></tr>\n<tr><td>406\t</td><td>Not Acceptable\t</td><td>服务器只生成一个不被客户端接受的响应。</td></tr>\n<tr><td>407\t</td><td>Proxy Authentication Required\t</td><td>在请求送达之前，您必须使用代理服务器的验证。</td></tr>\n<tr><td>408\t</td><td>Request Timeout\t</td><td>请求需要的时间比服务器能够等待的时间长，超时。</td></tr>\n<tr><td>409\t</td><td>Conflict\t</td><td>请求因为冲突无法完成。</td></tr>\n<tr><td>410\t</td><td>Gone\t</td><td>所请求的页面不再可用。</td></tr>\n<tr><td>411\t</td><td>Length Required\t</td><td>\"Content-Length\" 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr>\n<tr><td>412\t</td><td>Precondition Failed\t</td><td>请求中给出的先决条件被服务器评估为 false。</td></tr>\n<tr><td>413\t</td><td>Request Entity Too Large\t</td><td>服务器不接受该请求，因为请求实体过大。</td></tr>\n<tr><td>414\t</td><td>Request-url Too Long\t</td><td>服务器不接受该请求，因为 URL 太长。当您转换一个 \"post\" 请求为一个带有长的查询信息的 \"get\" 请求时发生。</td></tr>\n<tr><td>415\t</td><td>Unsupported Media Type\t</td><td>服务器不接受该请求，因为媒体类型不被支持。</td></tr>\n<tr><td>417\t</td><td>Expectation Failed\t </td><td></td></tr>\n<tr><td>500\t</td><td>Internal Server Error\t</td><td>未完成的请求。服务器遇到了一个意外的情况。</td></tr>\n<tr><td>501\t</td><td>Not Implemented\t</td><td>未完成的请求。服务器不支持所需的功能。</td></tr>\n<tr><td>502\t</td><td>Bad Gateway\t</td><td>未完成的请求。服务器从上游服务器收到无效响应。</td></tr>\n<tr><td>503\t</td><td>Service Unavailable\t</td><td>未完成的请求。服务器暂时超载或死机。</td></tr>\n<tr><td>504\t</td><td>Gateway Timeout\t</td><td>网关超时。</td></tr>\n<tr><td>505\t</td><td>HTTP Version Not Supported</td><td>\t服务器不支持\"HTTP协议\"版本。</td></tr>\n</table>\n\n## 设置 HTTP 状态代码的方法 ##\n<table>\n<tr><td>序号</td><td>\t方法 & 描述</td></tr>\n<tr><td>1\tpublic void setStatus ( int statusCode )</td><td>\n该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 PrintWriter 实际返回任何内容之前调用 setStatus。</td></tr>\n<tr><td>2\tpublic void sendRedirect(String url)</td><td>\n该方法生成一个 302 响应，连同一个带有新文档 URL 的 Location 头。</td></tr>\n<tr><td>3\tpublic void sendError(int code, String message)</td><td>\n该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。</td></tr>\n</table>\n\n## HTTP 状态码实例 ##\n\n\n\n    // 扩展 HttpServlet 类\n    public class showError extends HttpServlet {\n \n    // 处理 GET 方法请求的方法\n    public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n            throws ServletException, IOException\n     {\n      // 设置错误代码和原因\n      response.sendError(407, \"Need authentication!!!\" );\n     }\n    // 处理 POST 方法请求的方法\n    public void doPost(HttpServletRequest request,\n                     HttpServletResponse response)\n      throws ServletException, IOException {\n     doGet(request, response);\n    }\n    }\n\n# Cookie #\n\n*Cookie实例：*\n\n    public class Cookie01 extends HttpServlet {\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tdoPost(request, response);\n\t}\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tgetCookie(request, response);\n\t}\n\t//通过Servlet获取Cookie\n\tprivate void getCookie(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws UnsupportedEncodingException {\n\t\tCookie cookie = null;\n    \tCookie[] cookies = null;\n    \t// 获取与该域相关的 Cookie 的数组\n    \tcookies = request.getCookies();\n         \n         // 设置响应内容类型\n         response.setContentType(\"text/html;charset=UTF-8\");\n    \n          if( cookies != null ){\n            for (int i = 0; i < cookies.length; i++){\n               cookie = cookies[i];\n               if((cookie.getName( )).compareTo(\"name\") == 0 ){\n                    cookie.setMaxAge(0);\n                    response.addCookie(cookie);\n                    System.out.println(\"已删除的 cookie：\" + \n                            cookie.getName( ));\n               }\n               System.out.println(\"名称：\" + cookie.getName( ) + \",\");\n               System.out.println(\"值：\" +  URLDecoder.decode(cookie.getValue(), \"utf-8\"));\n            }\n         }\n\t}\n\t//设置Cookie\n\tprivate void setCookie(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws UnsupportedEncodingException,\n\t\t\tIOException {\n\t\t// 为名字和姓氏创建 Cookie      \n\t\t\tCookie name = new Cookie(\"name\",\n\t\t\t\t\tURLEncoder.encode(request.getParameter(\"name\"), \"UTF-8\")); // 中文转码\n\t\t\tCookie url = new Cookie(\"url\",\n\t\t\t              request.getParameter(\"url\"));\n\t\t\t\n\t\t\t// 为两个 Cookie 设置过期日期为 24 小时后\n\t\t\tname.setMaxAge(60*60*24); \n\t\t\turl.setMaxAge(60*60*24); \n\t\t\t\n\t\t\t// 在响应头中添加两个 Cookie\n\t\t\tresponse.addCookie(name);\n\t\t\tresponse.addCookie(url);\n\t\t\t\n\t\t\t// 设置响应内容类型\n\t\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n\t\t\n\t\t\tSystem.out.println(request.getParameter(\"name\"));\n\t\t\tSystem.out.println(request.getParameter(\"url\") );\n\t}\n\n    }\n\nhtml文件：\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"UTF-8\">\n    <title>Insert title here</title>\n    </head>\n    <body>\n    <form action=servlet/cookie01 method=\"GET\">\n    站点名 ：<input type=\"text\" name=\"name\">\n    <br />\n    站点 URL：<input type=\"text\" name=\"url\" /><br>\n    <input type=\"submit\" value=\"提交\" />\n    </form>\n    </body>\n    </html>\n\n# 文件下载： #\n\njava文件：\n\n    import java.io.FileInputStream;\n    import java.io.IOException;\n    import java.io.PrintWriter;\n    import java.net.URLEncoder;\n\n    import javax.servlet.ServletException;\n    import javax.servlet.ServletOutputStream;\n    import javax.servlet.http.HttpServlet;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    /**\n     * 文件下载\n     * @author tianq\n     *\n     */\n    public class ServletDemo5 extends HttpServlet {\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tdoPost(request,response);\n\t}\n\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n       //通过路径得到一个输入流\n\t\tString path = this.getServletContext().getRealPath(\"WEB-INF/classes/美景.jpg\");\n\t\tFileInputStream fis = new FileInputStream(path);\n\t\t//创建字节输出流\n\t\tServletOutputStream sos = response.getOutputStream();\n\t\t//得到要下载的文件名\n\t\tString fileName = path.substring(path.lastIndexOf(\"\\\\\")+1);\n\t\t//设置文件名编码\n\t\tfileName = URLEncoder.encode(fileName, \"UTF-8\");\n\t\t//告知客户端下载\n\t\tresponse.setHeader(\"content-disposition\", \"attachment;filename=\"+fileName);\n\t\tresponse.setHeader(\"content-type\", \"image/jpeg\");\n\t\t//执行输出操作\n\t\tint len = 1;\n\t\tbyte[] b = new byte[1024];\n\t\twhile ((len=fis.read(b))!=-1) {\n\t\t\tsos.write(b, 0, len);\n\t\t\t\n\t\t}\n\t\t\n\t}\n\n    }\n\n","source":"_posts/JAVA之Servlet.md","raw":"---\ntitle: JAVA学习之Servlet\ndate: 2017-03-25 23:31:16\ncategories: JAVA #文章文类\ntags: [JAVA,Servlet]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n# Servlet 简介 #\n\n\n> Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。\n\n**Servlet 任务**\n\n- 读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。\n- 读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。\n- 处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。\n- 发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。\n- 发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# Servlet 生命周期 #\n\n    public class ServletDemo1 implements Servlet{\n\n\t//Servlet生命周期方法\n\t//实例化\n\t//在Servlet第一次访问时调用\n\tpublic ServletDemo1(){\n\t\tSystem.out.println(\"*************ServletDemo1执行了***************\");\n\t}\n\t//Servlet生命周期方法\n\t//初始化\n\t//在Servlet第一次访问时调用,在后续每次用户请求时不再调用\n\t@Override\n\tpublic void init(ServletConfig arg0) throws ServletException {\n\t\tSystem.out.println(\"*************init执行了***************\");\n\t\t\n\t}\n\t//Servlet生命周期方法\n\t//服务\n\t//每次访问时都调用\n\t@Override\n\tpublic void service(ServletRequest arg0, ServletResponse arg1)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"*************service执行了***************\");\n\t}\n\t//Servlet生命周期方法\n\t//销毁\n\t@Override\n\tpublic void destroy() {\n\t\tSystem.out.println(\"*************destroy执行了***************\");\n\t\t\n\t}\n\n\t@Override\n\tpublic ServletConfig getServletConfig() {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic String getServletInfo() {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\t\n    }\n\n# HTTP 状态码 #\n<table><tr><td>代码</td><td>\t消息</td><td>\t描述</td></tr>\n<tr><td>100</td><td>\tContinue\t</td><td>只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr>\n<tr><td>101\t</td><td>Switching Protocols</td><td>\t服务器切换协议。</td></tr>\n<tr><td>200</td><td>\tOK</td><td>\t请求成功。</td></tr>\n<tr><td>201\t</td><td>Created</td><td>\t该请求是完整的，并创建一个新的资源。</td></tr>\n<tr><td>202\t</td><td>Accepted\t</td><td>该请求被接受处理，但是该处理是不完整的。</td></tr>\n<tr><td>203\t</td><td>Non-authoritative Information\t</td><td> </td></tr>\n<tr><td>204\t</td><td>No Content\t </td><td></td></tr>\n<tr><td>205\t</td><td>Reset Content\t </td><td></td></tr>\n<tr><td>206\t</td><td>Partial Content\t</td><td> </td></tr>\n<tr><td>300\t</td><td>Multiple Choices</td><td>\t链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr>\n<tr><td>301\t</td><td>Moved Permanently\t</td><td>所请求的页面已经转移到一个新的 URL。</td></tr>\n<tr><td>302\t</td><td>Found\t</td><td>所请求的页面已经临时转移到一个新的 URL。</td></tr>\n<tr><td>303\t</td><td>See Other\t</td><td>所请求的页面可以在另一个不同的 URL 下被找到。</td></tr>\n<tr><td>304\t</td><td>Not Modified\t</td><td> </td></tr>\n<tr><td>305\t</td><td>Use Proxy\t </td><td></td></tr>\n<tr><td>306\t</td><td>Unused\t</td><td>在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr>\n<tr><td>307\t</td><td>Temporary Redirect</td><td>\t所请求的页面已经临时转移到一个新的 URL。</td></tr>\n<tr><td>400\t</td><td>Bad Request</td><td>\t服务器不理解请求。</td></tr>\n<tr><td>401\t</td><td>Unauthorized</td><td>\t所请求的页面需要用户名和密码。</td></tr>\n<tr><td>402\t</td><td>Payment Required</td><td>\t您还不能使用该代码。</td></tr>\n<tr><td>403\t</td><td>Forbidden</td><td>\t禁止访问所请求的页面。</td></tr>\n<tr><td>404\t</td><td>Not Found\t</td><td>服务器无法找到所请求的页面。.</td></tr>\n<tr><td>405\t</td><td>Method Not Allowed\t</td><td>在请求中指定的方法是不允许的。</td></tr>\n<tr><td>406\t</td><td>Not Acceptable\t</td><td>服务器只生成一个不被客户端接受的响应。</td></tr>\n<tr><td>407\t</td><td>Proxy Authentication Required\t</td><td>在请求送达之前，您必须使用代理服务器的验证。</td></tr>\n<tr><td>408\t</td><td>Request Timeout\t</td><td>请求需要的时间比服务器能够等待的时间长，超时。</td></tr>\n<tr><td>409\t</td><td>Conflict\t</td><td>请求因为冲突无法完成。</td></tr>\n<tr><td>410\t</td><td>Gone\t</td><td>所请求的页面不再可用。</td></tr>\n<tr><td>411\t</td><td>Length Required\t</td><td>\"Content-Length\" 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr>\n<tr><td>412\t</td><td>Precondition Failed\t</td><td>请求中给出的先决条件被服务器评估为 false。</td></tr>\n<tr><td>413\t</td><td>Request Entity Too Large\t</td><td>服务器不接受该请求，因为请求实体过大。</td></tr>\n<tr><td>414\t</td><td>Request-url Too Long\t</td><td>服务器不接受该请求，因为 URL 太长。当您转换一个 \"post\" 请求为一个带有长的查询信息的 \"get\" 请求时发生。</td></tr>\n<tr><td>415\t</td><td>Unsupported Media Type\t</td><td>服务器不接受该请求，因为媒体类型不被支持。</td></tr>\n<tr><td>417\t</td><td>Expectation Failed\t </td><td></td></tr>\n<tr><td>500\t</td><td>Internal Server Error\t</td><td>未完成的请求。服务器遇到了一个意外的情况。</td></tr>\n<tr><td>501\t</td><td>Not Implemented\t</td><td>未完成的请求。服务器不支持所需的功能。</td></tr>\n<tr><td>502\t</td><td>Bad Gateway\t</td><td>未完成的请求。服务器从上游服务器收到无效响应。</td></tr>\n<tr><td>503\t</td><td>Service Unavailable\t</td><td>未完成的请求。服务器暂时超载或死机。</td></tr>\n<tr><td>504\t</td><td>Gateway Timeout\t</td><td>网关超时。</td></tr>\n<tr><td>505\t</td><td>HTTP Version Not Supported</td><td>\t服务器不支持\"HTTP协议\"版本。</td></tr>\n</table>\n\n## 设置 HTTP 状态代码的方法 ##\n<table>\n<tr><td>序号</td><td>\t方法 & 描述</td></tr>\n<tr><td>1\tpublic void setStatus ( int statusCode )</td><td>\n该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 PrintWriter 实际返回任何内容之前调用 setStatus。</td></tr>\n<tr><td>2\tpublic void sendRedirect(String url)</td><td>\n该方法生成一个 302 响应，连同一个带有新文档 URL 的 Location 头。</td></tr>\n<tr><td>3\tpublic void sendError(int code, String message)</td><td>\n该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。</td></tr>\n</table>\n\n## HTTP 状态码实例 ##\n\n\n\n    // 扩展 HttpServlet 类\n    public class showError extends HttpServlet {\n \n    // 处理 GET 方法请求的方法\n    public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n            throws ServletException, IOException\n     {\n      // 设置错误代码和原因\n      response.sendError(407, \"Need authentication!!!\" );\n     }\n    // 处理 POST 方法请求的方法\n    public void doPost(HttpServletRequest request,\n                     HttpServletResponse response)\n      throws ServletException, IOException {\n     doGet(request, response);\n    }\n    }\n\n# Cookie #\n\n*Cookie实例：*\n\n    public class Cookie01 extends HttpServlet {\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tdoPost(request, response);\n\t}\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tgetCookie(request, response);\n\t}\n\t//通过Servlet获取Cookie\n\tprivate void getCookie(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws UnsupportedEncodingException {\n\t\tCookie cookie = null;\n    \tCookie[] cookies = null;\n    \t// 获取与该域相关的 Cookie 的数组\n    \tcookies = request.getCookies();\n         \n         // 设置响应内容类型\n         response.setContentType(\"text/html;charset=UTF-8\");\n    \n          if( cookies != null ){\n            for (int i = 0; i < cookies.length; i++){\n               cookie = cookies[i];\n               if((cookie.getName( )).compareTo(\"name\") == 0 ){\n                    cookie.setMaxAge(0);\n                    response.addCookie(cookie);\n                    System.out.println(\"已删除的 cookie：\" + \n                            cookie.getName( ));\n               }\n               System.out.println(\"名称：\" + cookie.getName( ) + \",\");\n               System.out.println(\"值：\" +  URLDecoder.decode(cookie.getValue(), \"utf-8\"));\n            }\n         }\n\t}\n\t//设置Cookie\n\tprivate void setCookie(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws UnsupportedEncodingException,\n\t\t\tIOException {\n\t\t// 为名字和姓氏创建 Cookie      \n\t\t\tCookie name = new Cookie(\"name\",\n\t\t\t\t\tURLEncoder.encode(request.getParameter(\"name\"), \"UTF-8\")); // 中文转码\n\t\t\tCookie url = new Cookie(\"url\",\n\t\t\t              request.getParameter(\"url\"));\n\t\t\t\n\t\t\t// 为两个 Cookie 设置过期日期为 24 小时后\n\t\t\tname.setMaxAge(60*60*24); \n\t\t\turl.setMaxAge(60*60*24); \n\t\t\t\n\t\t\t// 在响应头中添加两个 Cookie\n\t\t\tresponse.addCookie(name);\n\t\t\tresponse.addCookie(url);\n\t\t\t\n\t\t\t// 设置响应内容类型\n\t\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n\t\t\n\t\t\tSystem.out.println(request.getParameter(\"name\"));\n\t\t\tSystem.out.println(request.getParameter(\"url\") );\n\t}\n\n    }\n\nhtml文件：\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"UTF-8\">\n    <title>Insert title here</title>\n    </head>\n    <body>\n    <form action=servlet/cookie01 method=\"GET\">\n    站点名 ：<input type=\"text\" name=\"name\">\n    <br />\n    站点 URL：<input type=\"text\" name=\"url\" /><br>\n    <input type=\"submit\" value=\"提交\" />\n    </form>\n    </body>\n    </html>\n\n# 文件下载： #\n\njava文件：\n\n    import java.io.FileInputStream;\n    import java.io.IOException;\n    import java.io.PrintWriter;\n    import java.net.URLEncoder;\n\n    import javax.servlet.ServletException;\n    import javax.servlet.ServletOutputStream;\n    import javax.servlet.http.HttpServlet;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    /**\n     * 文件下载\n     * @author tianq\n     *\n     */\n    public class ServletDemo5 extends HttpServlet {\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tdoPost(request,response);\n\t}\n\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n       //通过路径得到一个输入流\n\t\tString path = this.getServletContext().getRealPath(\"WEB-INF/classes/美景.jpg\");\n\t\tFileInputStream fis = new FileInputStream(path);\n\t\t//创建字节输出流\n\t\tServletOutputStream sos = response.getOutputStream();\n\t\t//得到要下载的文件名\n\t\tString fileName = path.substring(path.lastIndexOf(\"\\\\\")+1);\n\t\t//设置文件名编码\n\t\tfileName = URLEncoder.encode(fileName, \"UTF-8\");\n\t\t//告知客户端下载\n\t\tresponse.setHeader(\"content-disposition\", \"attachment;filename=\"+fileName);\n\t\tresponse.setHeader(\"content-type\", \"image/jpeg\");\n\t\t//执行输出操作\n\t\tint len = 1;\n\t\tbyte[] b = new byte[1024];\n\t\twhile ((len=fis.read(b))!=-1) {\n\t\t\tsos.write(b, 0, len);\n\t\t\t\n\t\t}\n\t\t\n\t}\n\n    }\n\n","slug":"JAVA之Servlet","published":1,"updated":"2017-04-15T09:25:40.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6ui000g64xtvocx3p19","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"Servlet-简介\"><a href=\"#Servlet-简介\" class=\"headerlink\" title=\"Servlet 简介\"></a>Servlet 简介</h1><blockquote>\n<p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>\n</blockquote>\n<p><strong>Servlet 任务</strong></p>\n<ul>\n<li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li>\n<li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li>\n<li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li>\n<li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li>\n<li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li>\n</ul>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"Servlet-生命周期\"><a href=\"#Servlet-生命周期\" class=\"headerlink\" title=\"Servlet 生命周期\"></a>Servlet 生命周期</h1><pre><code>public class ServletDemo1 implements Servlet{\n\n//Servlet生命周期方法\n//实例化\n//在Servlet第一次访问时调用\npublic ServletDemo1(){\n    System.out.println(&quot;*************ServletDemo1执行了***************&quot;);\n}\n//Servlet生命周期方法\n//初始化\n//在Servlet第一次访问时调用,在后续每次用户请求时不再调用\n@Override\npublic void init(ServletConfig arg0) throws ServletException {\n    System.out.println(&quot;*************init执行了***************&quot;);\n\n}\n//Servlet生命周期方法\n//服务\n//每次访问时都调用\n@Override\npublic void service(ServletRequest arg0, ServletResponse arg1)\n        throws ServletException, IOException {\n    System.out.println(&quot;*************service执行了***************&quot;);\n}\n//Servlet生命周期方法\n//销毁\n@Override\npublic void destroy() {\n    System.out.println(&quot;*************destroy执行了***************&quot;);\n\n}\n\n@Override\npublic ServletConfig getServletConfig() {\n    // TODO Auto-generated method stub\n    return null;\n}\n\n@Override\npublic String getServletInfo() {\n    // TODO Auto-generated method stub\n    return null;\n}\n\n\n}\n</code></pre><h1 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h1><table><tr><td>代码</td><td>    消息</td><td>    描述</td></tr><br><tr><td>100</td><td>    Continue    </td><td>只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><br><tr><td>101    </td><td>Switching Protocols</td><td>    服务器切换协议。</td></tr><br><tr><td>200</td><td>    OK</td><td>    请求成功。</td></tr><br><tr><td>201    </td><td>Created</td><td>    该请求是完整的，并创建一个新的资源。</td></tr><br><tr><td>202    </td><td>Accepted    </td><td>该请求被接受处理，但是该处理是不完整的。</td></tr><br><tr><td>203    </td><td>Non-authoritative Information    </td><td> </td></tr><br><tr><td>204    </td><td>No Content     </td><td></td></tr><br><tr><td>205    </td><td>Reset Content     </td><td></td></tr><br><tr><td>206    </td><td>Partial Content    </td><td> </td></tr><br><tr><td>300    </td><td>Multiple Choices</td><td>    链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><br><tr><td>301    </td><td>Moved Permanently    </td><td>所请求的页面已经转移到一个新的 URL。</td></tr><br><tr><td>302    </td><td>Found    </td><td>所请求的页面已经临时转移到一个新的 URL。</td></tr><br><tr><td>303    </td><td>See Other    </td><td>所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><br><tr><td>304    </td><td>Not Modified    </td><td> </td></tr><br><tr><td>305    </td><td>Use Proxy     </td><td></td></tr><br><tr><td>306    </td><td>Unused    </td><td>在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><br><tr><td>307    </td><td>Temporary Redirect</td><td>    所请求的页面已经临时转移到一个新的 URL。</td></tr><br><tr><td>400    </td><td>Bad Request</td><td>    服务器不理解请求。</td></tr><br><tr><td>401    </td><td>Unauthorized</td><td>    所请求的页面需要用户名和密码。</td></tr><br><tr><td>402    </td><td>Payment Required</td><td>    您还不能使用该代码。</td></tr><br><tr><td>403    </td><td>Forbidden</td><td>    禁止访问所请求的页面。</td></tr><br><tr><td>404    </td><td>Not Found    </td><td>服务器无法找到所请求的页面。.</td></tr><br><tr><td>405    </td><td>Method Not Allowed    </td><td>在请求中指定的方法是不允许的。</td></tr><br><tr><td>406    </td><td>Not Acceptable    </td><td>服务器只生成一个不被客户端接受的响应。</td></tr><br><tr><td>407    </td><td>Proxy Authentication Required    </td><td>在请求送达之前，您必须使用代理服务器的验证。</td></tr><br><tr><td>408    </td><td>Request Timeout    </td><td>请求需要的时间比服务器能够等待的时间长，超时。</td></tr><br><tr><td>409    </td><td>Conflict    </td><td>请求因为冲突无法完成。</td></tr><br><tr><td>410    </td><td>Gone    </td><td>所请求的页面不再可用。</td></tr><br><tr><td>411    </td><td>Length Required    </td><td>“Content-Length” 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><br><tr><td>412    </td><td>Precondition Failed    </td><td>请求中给出的先决条件被服务器评估为 false。</td></tr><br><tr><td>413    </td><td>Request Entity Too Large    </td><td>服务器不接受该请求，因为请求实体过大。</td></tr><br><tr><td>414    </td><td>Request-url Too Long    </td><td>服务器不接受该请求，因为 URL 太长。当您转换一个 “post” 请求为一个带有长的查询信息的 “get” 请求时发生。</td></tr><br><tr><td>415    </td><td>Unsupported Media Type    </td><td>服务器不接受该请求，因为媒体类型不被支持。</td></tr><br><tr><td>417    </td><td>Expectation Failed     </td><td></td></tr><br><tr><td>500    </td><td>Internal Server Error    </td><td>未完成的请求。服务器遇到了一个意外的情况。</td></tr><br><tr><td>501    </td><td>Not Implemented    </td><td>未完成的请求。服务器不支持所需的功能。</td></tr><br><tr><td>502    </td><td>Bad Gateway    </td><td>未完成的请求。服务器从上游服务器收到无效响应。</td></tr><br><tr><td>503    </td><td>Service Unavailable    </td><td>未完成的请求。服务器暂时超载或死机。</td></tr><br><tr><td>504    </td><td>Gateway Timeout    </td><td>网关超时。</td></tr><br><tr><td>505    </td><td>HTTP Version Not Supported</td><td>    服务器不支持”HTTP协议”版本。</td></tr><br></table>\n\n<h2 id=\"设置-HTTP-状态代码的方法\"><a href=\"#设置-HTTP-状态代码的方法\" class=\"headerlink\" title=\"设置 HTTP 状态代码的方法\"></a>设置 HTTP 状态代码的方法</h2><table><br><tr><td>序号</td><td>    方法 &amp; 描述</td></tr><br><tr><td>1    public void setStatus ( int statusCode )</td><td><br>该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 PrintWriter 实际返回任何内容之前调用 setStatus。</td></tr><br><tr><td>2    public void sendRedirect(String url)</td><td><br>该方法生成一个 302 响应，连同一个带有新文档 URL 的 Location 头。</td></tr><br><tr><td>3    public void sendError(int code, String message)</td><td><br>该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。</td></tr><br></table>\n\n<h2 id=\"HTTP-状态码实例\"><a href=\"#HTTP-状态码实例\" class=\"headerlink\" title=\"HTTP 状态码实例\"></a>HTTP 状态码实例</h2><pre><code>// 扩展 HttpServlet 类\npublic class showError extends HttpServlet {\n\n// 处理 GET 方法请求的方法\npublic void doGet(HttpServletRequest request,\n                HttpServletResponse response)\n        throws ServletException, IOException\n {\n  // 设置错误代码和原因\n  response.sendError(407, &quot;Need authentication!!!&quot; );\n }\n// 处理 POST 方法请求的方法\npublic void doPost(HttpServletRequest request,\n                 HttpServletResponse response)\n  throws ServletException, IOException {\n doGet(request, response);\n}\n}\n</code></pre><h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><p><em>Cookie实例：</em></p>\n<pre><code>public class Cookie01 extends HttpServlet {\n\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    doPost(request, response);\n}\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n\n    getCookie(request, response);\n}\n//通过Servlet获取Cookie\nprivate void getCookie(HttpServletRequest request,\n        HttpServletResponse response) throws UnsupportedEncodingException {\n    Cookie cookie = null;\n    Cookie[] cookies = null;\n    // 获取与该域相关的 Cookie 的数组\n    cookies = request.getCookies();\n\n     // 设置响应内容类型\n     response.setContentType(&quot;text/html;charset=UTF-8&quot;);\n\n      if( cookies != null ){\n        for (int i = 0; i &lt; cookies.length; i++){\n           cookie = cookies[i];\n           if((cookie.getName( )).compareTo(&quot;name&quot;) == 0 ){\n                cookie.setMaxAge(0);\n                response.addCookie(cookie);\n                System.out.println(&quot;已删除的 cookie：&quot; + \n                        cookie.getName( ));\n           }\n           System.out.println(&quot;名称：&quot; + cookie.getName( ) + &quot;,&quot;);\n           System.out.println(&quot;值：&quot; +  URLDecoder.decode(cookie.getValue(), &quot;utf-8&quot;));\n        }\n     }\n}\n//设置Cookie\nprivate void setCookie(HttpServletRequest request,\n        HttpServletResponse response) throws UnsupportedEncodingException,\n        IOException {\n    // 为名字和姓氏创建 Cookie      \n        Cookie name = new Cookie(&quot;name&quot;,\n                URLEncoder.encode(request.getParameter(&quot;name&quot;), &quot;UTF-8&quot;)); // 中文转码\n        Cookie url = new Cookie(&quot;url&quot;,\n                      request.getParameter(&quot;url&quot;));\n\n        // 为两个 Cookie 设置过期日期为 24 小时后\n        name.setMaxAge(60*60*24); \n        url.setMaxAge(60*60*24); \n\n        // 在响应头中添加两个 Cookie\n        response.addCookie(name);\n        response.addCookie(url);\n\n        // 设置响应内容类型\n        response.setContentType(&quot;text/html;charset=UTF-8&quot;);\n\n        System.out.println(request.getParameter(&quot;name&quot;));\n        System.out.println(request.getParameter(&quot;url&quot;) );\n}\n\n}\n</code></pre><p>html文件：</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=servlet/cookie01 method=&quot;GET&quot;&gt;\n站点名 ：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n&lt;br /&gt;\n站点 URL：&lt;input type=&quot;text&quot; name=&quot;url&quot; /&gt;&lt;br&gt;\n&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h1 id=\"文件下载：\"><a href=\"#文件下载：\" class=\"headerlink\" title=\"文件下载：\"></a>文件下载：</h1><p>java文件：</p>\n<pre><code>import java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.net.URLEncoder;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n/**\n * 文件下载\n * @author tianq\n *\n */\npublic class ServletDemo5 extends HttpServlet {\n\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n\n    doPost(request,response);\n}\n\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n   //通过路径得到一个输入流\n    String path = this.getServletContext().getRealPath(&quot;WEB-INF/classes/美景.jpg&quot;);\n    FileInputStream fis = new FileInputStream(path);\n    //创建字节输出流\n    ServletOutputStream sos = response.getOutputStream();\n    //得到要下载的文件名\n    String fileName = path.substring(path.lastIndexOf(&quot;\\\\&quot;)+1);\n    //设置文件名编码\n    fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;);\n    //告知客户端下载\n    response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot;+fileName);\n    response.setHeader(&quot;content-type&quot;, &quot;image/jpeg&quot;);\n    //执行输出操作\n    int len = 1;\n    byte[] b = new byte[1024];\n    while ((len=fis.read(b))!=-1) {\n        sos.write(b, 0, len);\n\n    }\n\n}\n\n}\n</code></pre></the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"Servlet-简介\"><a href=\"#Servlet-简介\" class=\"headerlink\" title=\"Servlet 简介\"></a>Servlet 简介</h1><blockquote>\n<p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>\n</blockquote>\n<p><strong>Servlet 任务</strong></p>\n<ul>\n<li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li>\n<li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li>\n<li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li>\n<li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li>\n<li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li>\n</ul></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"Servlet-生命周期\"><a href=\"#Servlet-生命周期\" class=\"headerlink\" title=\"Servlet 生命周期\"></a>Servlet 生命周期</h1><pre><code>public class ServletDemo1 implements Servlet{\n\n//Servlet生命周期方法\n//实例化\n//在Servlet第一次访问时调用\npublic ServletDemo1(){\n    System.out.println(&quot;*************ServletDemo1执行了***************&quot;);\n}\n//Servlet生命周期方法\n//初始化\n//在Servlet第一次访问时调用,在后续每次用户请求时不再调用\n@Override\npublic void init(ServletConfig arg0) throws ServletException {\n    System.out.println(&quot;*************init执行了***************&quot;);\n\n}\n//Servlet生命周期方法\n//服务\n//每次访问时都调用\n@Override\npublic void service(ServletRequest arg0, ServletResponse arg1)\n        throws ServletException, IOException {\n    System.out.println(&quot;*************service执行了***************&quot;);\n}\n//Servlet生命周期方法\n//销毁\n@Override\npublic void destroy() {\n    System.out.println(&quot;*************destroy执行了***************&quot;);\n\n}\n\n@Override\npublic ServletConfig getServletConfig() {\n    // TODO Auto-generated method stub\n    return null;\n}\n\n@Override\npublic String getServletInfo() {\n    // TODO Auto-generated method stub\n    return null;\n}\n\n\n}\n</code></pre><h1 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h1><table><tr><td>代码</td><td>    消息</td><td>    描述</td></tr><br><tr><td>100</td><td>    Continue    </td><td>只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><br><tr><td>101    </td><td>Switching Protocols</td><td>    服务器切换协议。</td></tr><br><tr><td>200</td><td>    OK</td><td>    请求成功。</td></tr><br><tr><td>201    </td><td>Created</td><td>    该请求是完整的，并创建一个新的资源。</td></tr><br><tr><td>202    </td><td>Accepted    </td><td>该请求被接受处理，但是该处理是不完整的。</td></tr><br><tr><td>203    </td><td>Non-authoritative Information    </td><td> </td></tr><br><tr><td>204    </td><td>No Content     </td><td></td></tr><br><tr><td>205    </td><td>Reset Content     </td><td></td></tr><br><tr><td>206    </td><td>Partial Content    </td><td> </td></tr><br><tr><td>300    </td><td>Multiple Choices</td><td>    链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><br><tr><td>301    </td><td>Moved Permanently    </td><td>所请求的页面已经转移到一个新的 URL。</td></tr><br><tr><td>302    </td><td>Found    </td><td>所请求的页面已经临时转移到一个新的 URL。</td></tr><br><tr><td>303    </td><td>See Other    </td><td>所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><br><tr><td>304    </td><td>Not Modified    </td><td> </td></tr><br><tr><td>305    </td><td>Use Proxy     </td><td></td></tr><br><tr><td>306    </td><td>Unused    </td><td>在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><br><tr><td>307    </td><td>Temporary Redirect</td><td>    所请求的页面已经临时转移到一个新的 URL。</td></tr><br><tr><td>400    </td><td>Bad Request</td><td>    服务器不理解请求。</td></tr><br><tr><td>401    </td><td>Unauthorized</td><td>    所请求的页面需要用户名和密码。</td></tr><br><tr><td>402    </td><td>Payment Required</td><td>    您还不能使用该代码。</td></tr><br><tr><td>403    </td><td>Forbidden</td><td>    禁止访问所请求的页面。</td></tr><br><tr><td>404    </td><td>Not Found    </td><td>服务器无法找到所请求的页面。.</td></tr><br><tr><td>405    </td><td>Method Not Allowed    </td><td>在请求中指定的方法是不允许的。</td></tr><br><tr><td>406    </td><td>Not Acceptable    </td><td>服务器只生成一个不被客户端接受的响应。</td></tr><br><tr><td>407    </td><td>Proxy Authentication Required    </td><td>在请求送达之前，您必须使用代理服务器的验证。</td></tr><br><tr><td>408    </td><td>Request Timeout    </td><td>请求需要的时间比服务器能够等待的时间长，超时。</td></tr><br><tr><td>409    </td><td>Conflict    </td><td>请求因为冲突无法完成。</td></tr><br><tr><td>410    </td><td>Gone    </td><td>所请求的页面不再可用。</td></tr><br><tr><td>411    </td><td>Length Required    </td><td>“Content-Length” 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><br><tr><td>412    </td><td>Precondition Failed    </td><td>请求中给出的先决条件被服务器评估为 false。</td></tr><br><tr><td>413    </td><td>Request Entity Too Large    </td><td>服务器不接受该请求，因为请求实体过大。</td></tr><br><tr><td>414    </td><td>Request-url Too Long    </td><td>服务器不接受该请求，因为 URL 太长。当您转换一个 “post” 请求为一个带有长的查询信息的 “get” 请求时发生。</td></tr><br><tr><td>415    </td><td>Unsupported Media Type    </td><td>服务器不接受该请求，因为媒体类型不被支持。</td></tr><br><tr><td>417    </td><td>Expectation Failed     </td><td></td></tr><br><tr><td>500    </td><td>Internal Server Error    </td><td>未完成的请求。服务器遇到了一个意外的情况。</td></tr><br><tr><td>501    </td><td>Not Implemented    </td><td>未完成的请求。服务器不支持所需的功能。</td></tr><br><tr><td>502    </td><td>Bad Gateway    </td><td>未完成的请求。服务器从上游服务器收到无效响应。</td></tr><br><tr><td>503    </td><td>Service Unavailable    </td><td>未完成的请求。服务器暂时超载或死机。</td></tr><br><tr><td>504    </td><td>Gateway Timeout    </td><td>网关超时。</td></tr><br><tr><td>505    </td><td>HTTP Version Not Supported</td><td>    服务器不支持”HTTP协议”版本。</td></tr><br></table>\n\n<h2 id=\"设置-HTTP-状态代码的方法\"><a href=\"#设置-HTTP-状态代码的方法\" class=\"headerlink\" title=\"设置 HTTP 状态代码的方法\"></a>设置 HTTP 状态代码的方法</h2><table><br><tr><td>序号</td><td>    方法 &amp; 描述</td></tr><br><tr><td>1    public void setStatus ( int statusCode )</td><td><br>该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 PrintWriter 实际返回任何内容之前调用 setStatus。</td></tr><br><tr><td>2    public void sendRedirect(String url)</td><td><br>该方法生成一个 302 响应，连同一个带有新文档 URL 的 Location 头。</td></tr><br><tr><td>3    public void sendError(int code, String message)</td><td><br>该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。</td></tr><br></table>\n\n<h2 id=\"HTTP-状态码实例\"><a href=\"#HTTP-状态码实例\" class=\"headerlink\" title=\"HTTP 状态码实例\"></a>HTTP 状态码实例</h2><pre><code>// 扩展 HttpServlet 类\npublic class showError extends HttpServlet {\n\n// 处理 GET 方法请求的方法\npublic void doGet(HttpServletRequest request,\n                HttpServletResponse response)\n        throws ServletException, IOException\n {\n  // 设置错误代码和原因\n  response.sendError(407, &quot;Need authentication!!!&quot; );\n }\n// 处理 POST 方法请求的方法\npublic void doPost(HttpServletRequest request,\n                 HttpServletResponse response)\n  throws ServletException, IOException {\n doGet(request, response);\n}\n}\n</code></pre><h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><p><em>Cookie实例：</em></p>\n<pre><code>public class Cookie01 extends HttpServlet {\n\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    doPost(request, response);\n}\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n\n    getCookie(request, response);\n}\n//通过Servlet获取Cookie\nprivate void getCookie(HttpServletRequest request,\n        HttpServletResponse response) throws UnsupportedEncodingException {\n    Cookie cookie = null;\n    Cookie[] cookies = null;\n    // 获取与该域相关的 Cookie 的数组\n    cookies = request.getCookies();\n\n     // 设置响应内容类型\n     response.setContentType(&quot;text/html;charset=UTF-8&quot;);\n\n      if( cookies != null ){\n        for (int i = 0; i &lt; cookies.length; i++){\n           cookie = cookies[i];\n           if((cookie.getName( )).compareTo(&quot;name&quot;) == 0 ){\n                cookie.setMaxAge(0);\n                response.addCookie(cookie);\n                System.out.println(&quot;已删除的 cookie：&quot; + \n                        cookie.getName( ));\n           }\n           System.out.println(&quot;名称：&quot; + cookie.getName( ) + &quot;,&quot;);\n           System.out.println(&quot;值：&quot; +  URLDecoder.decode(cookie.getValue(), &quot;utf-8&quot;));\n        }\n     }\n}\n//设置Cookie\nprivate void setCookie(HttpServletRequest request,\n        HttpServletResponse response) throws UnsupportedEncodingException,\n        IOException {\n    // 为名字和姓氏创建 Cookie      \n        Cookie name = new Cookie(&quot;name&quot;,\n                URLEncoder.encode(request.getParameter(&quot;name&quot;), &quot;UTF-8&quot;)); // 中文转码\n        Cookie url = new Cookie(&quot;url&quot;,\n                      request.getParameter(&quot;url&quot;));\n\n        // 为两个 Cookie 设置过期日期为 24 小时后\n        name.setMaxAge(60*60*24); \n        url.setMaxAge(60*60*24); \n\n        // 在响应头中添加两个 Cookie\n        response.addCookie(name);\n        response.addCookie(url);\n\n        // 设置响应内容类型\n        response.setContentType(&quot;text/html;charset=UTF-8&quot;);\n\n        System.out.println(request.getParameter(&quot;name&quot;));\n        System.out.println(request.getParameter(&quot;url&quot;) );\n}\n\n}\n</code></pre><p>html文件：</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=servlet/cookie01 method=&quot;GET&quot;&gt;\n站点名 ：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n&lt;br /&gt;\n站点 URL：&lt;input type=&quot;text&quot; name=&quot;url&quot; /&gt;&lt;br&gt;\n&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h1 id=\"文件下载：\"><a href=\"#文件下载：\" class=\"headerlink\" title=\"文件下载：\"></a>文件下载：</h1><p>java文件：</p>\n<pre><code>import java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.net.URLEncoder;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n/**\n * 文件下载\n * @author tianq\n *\n */\npublic class ServletDemo5 extends HttpServlet {\n\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n\n    doPost(request,response);\n}\n\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n   //通过路径得到一个输入流\n    String path = this.getServletContext().getRealPath(&quot;WEB-INF/classes/美景.jpg&quot;);\n    FileInputStream fis = new FileInputStream(path);\n    //创建字节输出流\n    ServletOutputStream sos = response.getOutputStream();\n    //得到要下载的文件名\n    String fileName = path.substring(path.lastIndexOf(&quot;\\\\&quot;)+1);\n    //设置文件名编码\n    fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;);\n    //告知客户端下载\n    response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot;+fileName);\n    response.setHeader(&quot;content-type&quot;, &quot;image/jpeg&quot;);\n    //执行输出操作\n    int len = 1;\n    byte[] b = new byte[1024];\n    while ((len=fis.read(b))!=-1) {\n        sos.write(b, 0, len);\n\n    }\n\n}\n\n}\n</code></pre></The>"},{"title":"JAVA学习之JDBC","date":"2017-03-22T14:33:39.000Z","_content":"<Excerpt in index | 首页摘要>\n\n# JDBC概述 #\n\n\n> JDBC:java database connectivity SUN公司提供的一套操作数据库的标准规范。\n> \n> JDBC与数据库驱动的关系：接口与实现的关系。\n\n**JDBC规范（掌握四个核心对象）：**\n\n- DriverManager:用于注册驱动\n- Connection: 表示与数据库创建的连接\n- Statement: 操作数据库sql语句的对象\n- ResultSet: 结果集或一张虚拟表\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 开发一个JDBC程序（重要） #\n\n\n1.  创建数据库表，并向表中添加测试数据 \n\n        <--创建数据库-->\n        create database mytest1;\n        use mytest1;\n        <--创建数据库表-->\n        create table users(\n    \tid int primary key auto_increment,\n    \tname varchar(40),\n    \tpassword varchar(40),\n    \temail varchar(60),\n    \tbirthday date\n         )character set utf8 collate utf8_general_ci;\n        <--添加数据-->\n        insert into users(name,password,email,birthday) values('zs','123456','zs@sina.com','1980-12-04');\n        insert into users(name,password,email,birthday) values('lisi','123456','lisi@sina.com','1981-12-04');\n        insert into users(name,password,email,birthday) values('wangwu','123456','wangwu@sina.com','1979-12-04');\n\n2. 创建java project项目，添加数据库驱动（*.jar）\n3. 实现JDBC操作\n\n       - 注册驱动\n       - 创建连接\n       - 得到执行sql语句的Statement对象\n       - 执行sql语句，并返回结果\n       - 处理结果\n       - 关闭资源\n\n   **example:**\n\n          public class demo01 {\n\n\t      public static void main(String[] args) throws Exception{\n\t\t// TODO Auto-generated method stub\n\t\t//1、注册驱动\n\t\t//DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n\t\t//1.加载驱动\n\t\t Class.forName(\"com.mysql.jdbc.Driver\");\n\t\t //2、创建连接\n\t\tConnection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mytest1\", \"root\", \"root\");\n\t\t\t\t//3、得到执行sql语句的Statement对象\n\t\tStatement stmt = conn.createStatement();\n\t\t\t\t//4、执行sql语句，并返回结果\n\t\tString sql = \"select id,name,password,email,birthday from users\";\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\t\t//5、处理结果\n\t\twhile (rs.next()) {\n\t\t\t\t\tSystem.out.println(rs.getObject(1));\n\t\t\t\t\tSystem.out.println(rs.getObject(2));\n\t\t\t\t\tSystem.out.println(rs.getObject(3));\n\t\t\t\t\tSystem.out.println(rs.getObject(4));\n\t\t\t\t\tSystem.out.println(rs.getObject(5));\n\t\t\t\t}\n\t\t\t\t//6关闭资源\n\t\trs.close();\n\t\tstmt.close();\n\t\tconn.close();\n\t   }\n\n       }\n\n\n# JDBC常用的类和接口详解 #\n\n## java.sql.Drivermanager类 : 创建连接 ##\n\n1. 注册驱动\n\n   DriverManager.registerDriver(new com.mysql.jdbc.Driver());不建议使用\n   原因有2个：\n\n   - 导致驱动被注册2次。\n   - 强烈依赖数据库的驱动jar\n\n\n   解决办法：\n\n    用Class.forName(\"com.mysql.jdbc.Driver\");代替。\n\n2. 与数据库建立连接\n\n         static Connection getConnection(String url, String user, String password) \n    \n         getConnection(\"jdbc:mysql://localhost:3306/mytest1\", \"root\", \"root\");\n    \n         URL:SUN公司与数据库厂商之间的一种协议。\n         jdbc:mysql://localhost:3306/day06\n         协议 子协议          IP:端口号 数据库\n\n         mysql: jdbc:mysql://localhost:3306/day14 或者 jdbc:mysql:///day14（默认本机连接）\n         oracle: jdbc:oracle:thin:@localhost:1521:sid\n    \n    \n           Properties info = new Properties();//要参考数据库文档\n           info.setProperty(\"user\", \"root\");\n           info.setProperty(\"password\",\"root\");\n    \n           getConnection(String url, Properties info) \n    \n           getConnection(String url) \n           DriverManager.getConnection(\"jdbc:mysql://localhost:3306/day14?user=root&password=root\");\n\n\n# 实现一个用户登录的功能 #\n\nDemo:[https://github.com/MuTouTQ/login](https://github.com/MuTouTQ/JavaExamples)","source":"_posts/JAVA学习之JDBC.md","raw":"---\ntitle: JAVA学习之JDBC\ndate: 2017-03-22 22:33:39\ncategories: JAVA #文章文类\ntags: [JAVA,JDBC]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n<Excerpt in index | 首页摘要>\n\n# JDBC概述 #\n\n\n> JDBC:java database connectivity SUN公司提供的一套操作数据库的标准规范。\n> \n> JDBC与数据库驱动的关系：接口与实现的关系。\n\n**JDBC规范（掌握四个核心对象）：**\n\n- DriverManager:用于注册驱动\n- Connection: 表示与数据库创建的连接\n- Statement: 操作数据库sql语句的对象\n- ResultSet: 结果集或一张虚拟表\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 开发一个JDBC程序（重要） #\n\n\n1.  创建数据库表，并向表中添加测试数据 \n\n        <--创建数据库-->\n        create database mytest1;\n        use mytest1;\n        <--创建数据库表-->\n        create table users(\n    \tid int primary key auto_increment,\n    \tname varchar(40),\n    \tpassword varchar(40),\n    \temail varchar(60),\n    \tbirthday date\n         )character set utf8 collate utf8_general_ci;\n        <--添加数据-->\n        insert into users(name,password,email,birthday) values('zs','123456','zs@sina.com','1980-12-04');\n        insert into users(name,password,email,birthday) values('lisi','123456','lisi@sina.com','1981-12-04');\n        insert into users(name,password,email,birthday) values('wangwu','123456','wangwu@sina.com','1979-12-04');\n\n2. 创建java project项目，添加数据库驱动（*.jar）\n3. 实现JDBC操作\n\n       - 注册驱动\n       - 创建连接\n       - 得到执行sql语句的Statement对象\n       - 执行sql语句，并返回结果\n       - 处理结果\n       - 关闭资源\n\n   **example:**\n\n          public class demo01 {\n\n\t      public static void main(String[] args) throws Exception{\n\t\t// TODO Auto-generated method stub\n\t\t//1、注册驱动\n\t\t//DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n\t\t//1.加载驱动\n\t\t Class.forName(\"com.mysql.jdbc.Driver\");\n\t\t //2、创建连接\n\t\tConnection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mytest1\", \"root\", \"root\");\n\t\t\t\t//3、得到执行sql语句的Statement对象\n\t\tStatement stmt = conn.createStatement();\n\t\t\t\t//4、执行sql语句，并返回结果\n\t\tString sql = \"select id,name,password,email,birthday from users\";\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\t\t//5、处理结果\n\t\twhile (rs.next()) {\n\t\t\t\t\tSystem.out.println(rs.getObject(1));\n\t\t\t\t\tSystem.out.println(rs.getObject(2));\n\t\t\t\t\tSystem.out.println(rs.getObject(3));\n\t\t\t\t\tSystem.out.println(rs.getObject(4));\n\t\t\t\t\tSystem.out.println(rs.getObject(5));\n\t\t\t\t}\n\t\t\t\t//6关闭资源\n\t\trs.close();\n\t\tstmt.close();\n\t\tconn.close();\n\t   }\n\n       }\n\n\n# JDBC常用的类和接口详解 #\n\n## java.sql.Drivermanager类 : 创建连接 ##\n\n1. 注册驱动\n\n   DriverManager.registerDriver(new com.mysql.jdbc.Driver());不建议使用\n   原因有2个：\n\n   - 导致驱动被注册2次。\n   - 强烈依赖数据库的驱动jar\n\n\n   解决办法：\n\n    用Class.forName(\"com.mysql.jdbc.Driver\");代替。\n\n2. 与数据库建立连接\n\n         static Connection getConnection(String url, String user, String password) \n    \n         getConnection(\"jdbc:mysql://localhost:3306/mytest1\", \"root\", \"root\");\n    \n         URL:SUN公司与数据库厂商之间的一种协议。\n         jdbc:mysql://localhost:3306/day06\n         协议 子协议          IP:端口号 数据库\n\n         mysql: jdbc:mysql://localhost:3306/day14 或者 jdbc:mysql:///day14（默认本机连接）\n         oracle: jdbc:oracle:thin:@localhost:1521:sid\n    \n    \n           Properties info = new Properties();//要参考数据库文档\n           info.setProperty(\"user\", \"root\");\n           info.setProperty(\"password\",\"root\");\n    \n           getConnection(String url, Properties info) \n    \n           getConnection(String url) \n           DriverManager.getConnection(\"jdbc:mysql://localhost:3306/day14?user=root&password=root\");\n\n\n# 实现一个用户登录的功能 #\n\nDemo:[https://github.com/MuTouTQ/login](https://github.com/MuTouTQ/JavaExamples)","slug":"JAVA学习之JDBC","published":1,"updated":"2017-07-13T08:58:14.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6us000j64xtv92fjjf9","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"JDBC概述\"><a href=\"#JDBC概述\" class=\"headerlink\" title=\"JDBC概述\"></a>JDBC概述</h1><blockquote>\n<p>JDBC:java database connectivity SUN公司提供的一套操作数据库的标准规范。</p>\n<p>JDBC与数据库驱动的关系：接口与实现的关系。</p>\n</blockquote>\n<p><strong>JDBC规范（掌握四个核心对象）：</strong></p>\n<ul>\n<li>DriverManager:用于注册驱动</li>\n<li>Connection: 表示与数据库创建的连接</li>\n<li>Statement: 操作数据库sql语句的对象</li>\n<li>ResultSet: 结果集或一张虚拟表</li>\n</ul>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"开发一个JDBC程序（重要）\"><a href=\"#开发一个JDBC程序（重要）\" class=\"headerlink\" title=\"开发一个JDBC程序（重要）\"></a>开发一个JDBC程序（重要）</h1><ol>\n<li><p>创建数据库表，并向表中添加测试数据 </p>\n<pre><code>&lt;--创建数据库--&gt;\ncreate database mytest1;\nuse mytest1;\n&lt;--创建数据库表--&gt;\ncreate table users(\nid int primary key auto_increment,\nname varchar(40),\npassword varchar(40),\nemail varchar(60),\nbirthday date\n )character set utf8 collate utf8_general_ci;\n&lt;--添加数据--&gt;\ninsert into users(name,password,email,birthday) values(&apos;zs&apos;,&apos;123456&apos;,&apos;zs@sina.com&apos;,&apos;1980-12-04&apos;);\ninsert into users(name,password,email,birthday) values(&apos;lisi&apos;,&apos;123456&apos;,&apos;lisi@sina.com&apos;,&apos;1981-12-04&apos;);\ninsert into users(name,password,email,birthday) values(&apos;wangwu&apos;,&apos;123456&apos;,&apos;wangwu@sina.com&apos;,&apos;1979-12-04&apos;);\n</code></pre></li>\n<li><p>创建java project项目，添加数据库驱动（*.jar）</p>\n</li>\n<li><p>实现JDBC操作</p>\n<pre><code>- 注册驱动\n- 创建连接\n- 得到执行sql语句的Statement对象\n- 执行sql语句，并返回结果\n- 处理结果\n- 关闭资源\n</code></pre><p><strong>example:</strong></p>\n<pre><code>   public class demo01 {\n\n   public static void main(String[] args) throws Exception{\n // TODO Auto-generated method stub\n //1、注册驱动\n //DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n //1.加载驱动\n  Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n  //2、创建连接\n Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/mytest1&quot;, &quot;root&quot;, &quot;root&quot;);\n         //3、得到执行sql语句的Statement对象\n Statement stmt = conn.createStatement();\n         //4、执行sql语句，并返回结果\n String sql = &quot;select id,name,password,email,birthday from users&quot;;\n ResultSet rs = stmt.executeQuery(sql);\n         //5、处理结果\n while (rs.next()) {\n             System.out.println(rs.getObject(1));\n             System.out.println(rs.getObject(2));\n             System.out.println(rs.getObject(3));\n             System.out.println(rs.getObject(4));\n             System.out.println(rs.getObject(5));\n         }\n         //6关闭资源\n rs.close();\n stmt.close();\n conn.close();\n}\n\n}\n</code></pre></li>\n</ol>\n<h1 id=\"JDBC常用的类和接口详解\"><a href=\"#JDBC常用的类和接口详解\" class=\"headerlink\" title=\"JDBC常用的类和接口详解\"></a>JDBC常用的类和接口详解</h1><h2 id=\"java-sql-Drivermanager类-创建连接\"><a href=\"#java-sql-Drivermanager类-创建连接\" class=\"headerlink\" title=\"java.sql.Drivermanager类 : 创建连接\"></a>java.sql.Drivermanager类 : 创建连接</h2><ol>\n<li><p>注册驱动</p>\n<p>DriverManager.registerDriver(new com.mysql.jdbc.Driver());不建议使用<br>原因有2个：</p>\n<ul>\n<li>导致驱动被注册2次。</li>\n<li>强烈依赖数据库的驱动jar</li>\n</ul>\n</li>\n</ol>\n<p>   解决办法：</p>\n<pre><code>用Class.forName(&quot;com.mysql.jdbc.Driver&quot;);代替。\n</code></pre><ol>\n<li><p>与数据库建立连接</p>\n<pre><code>static Connection getConnection(String url, String user, String password) \n\ngetConnection(&quot;jdbc:mysql://localhost:3306/mytest1&quot;, &quot;root&quot;, &quot;root&quot;);\n\nURL:SUN公司与数据库厂商之间的一种协议。\njdbc:mysql://localhost:3306/day06\n协议 子协议          IP:端口号 数据库\n\nmysql: jdbc:mysql://localhost:3306/day14 或者 jdbc:mysql:///day14（默认本机连接）\noracle: jdbc:oracle:thin:@localhost:1521:sid\n</code></pre></li>\n</ol>\n<pre><code>Properties info = new Properties();//要参考数据库文档\ninfo.setProperty(&quot;user&quot;, &quot;root&quot;);\ninfo.setProperty(&quot;password&quot;,&quot;root&quot;);\n\ngetConnection(String url, Properties info) \n\ngetConnection(String url) \nDriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/day14?user=root&amp;password=root&quot;);\n</code></pre><h1 id=\"实现一个用户登录的功能\"><a href=\"#实现一个用户登录的功能\" class=\"headerlink\" title=\"实现一个用户登录的功能\"></a>实现一个用户登录的功能</h1><p>Demo:<a href=\"https://github.com/MuTouTQ/JavaExamples\" target=\"_blank\" rel=\"external\">https://github.com/MuTouTQ/login</a></p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"JDBC概述\"><a href=\"#JDBC概述\" class=\"headerlink\" title=\"JDBC概述\"></a>JDBC概述</h1><blockquote>\n<p>JDBC:java database connectivity SUN公司提供的一套操作数据库的标准规范。</p>\n<p>JDBC与数据库驱动的关系：接口与实现的关系。</p>\n</blockquote>\n<p><strong>JDBC规范（掌握四个核心对象）：</strong></p>\n<ul>\n<li>DriverManager:用于注册驱动</li>\n<li>Connection: 表示与数据库创建的连接</li>\n<li>Statement: 操作数据库sql语句的对象</li>\n<li>ResultSet: 结果集或一张虚拟表</li>\n</ul></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"开发一个JDBC程序（重要）\"><a href=\"#开发一个JDBC程序（重要）\" class=\"headerlink\" title=\"开发一个JDBC程序（重要）\"></a>开发一个JDBC程序（重要）</h1><ol>\n<li><p>创建数据库表，并向表中添加测试数据 </p>\n<pre><code>&lt;--创建数据库--&gt;\ncreate database mytest1;\nuse mytest1;\n&lt;--创建数据库表--&gt;\ncreate table users(\nid int primary key auto_increment,\nname varchar(40),\npassword varchar(40),\nemail varchar(60),\nbirthday date\n )character set utf8 collate utf8_general_ci;\n&lt;--添加数据--&gt;\ninsert into users(name,password,email,birthday) values(&apos;zs&apos;,&apos;123456&apos;,&apos;zs@sina.com&apos;,&apos;1980-12-04&apos;);\ninsert into users(name,password,email,birthday) values(&apos;lisi&apos;,&apos;123456&apos;,&apos;lisi@sina.com&apos;,&apos;1981-12-04&apos;);\ninsert into users(name,password,email,birthday) values(&apos;wangwu&apos;,&apos;123456&apos;,&apos;wangwu@sina.com&apos;,&apos;1979-12-04&apos;);\n</code></pre></li>\n<li><p>创建java project项目，添加数据库驱动（*.jar）</p>\n</li>\n<li><p>实现JDBC操作</p>\n<pre><code>- 注册驱动\n- 创建连接\n- 得到执行sql语句的Statement对象\n- 执行sql语句，并返回结果\n- 处理结果\n- 关闭资源\n</code></pre><p><strong>example:</strong></p>\n<pre><code>   public class demo01 {\n\n   public static void main(String[] args) throws Exception{\n // TODO Auto-generated method stub\n //1、注册驱动\n //DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n //1.加载驱动\n  Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n  //2、创建连接\n Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/mytest1&quot;, &quot;root&quot;, &quot;root&quot;);\n         //3、得到执行sql语句的Statement对象\n Statement stmt = conn.createStatement();\n         //4、执行sql语句，并返回结果\n String sql = &quot;select id,name,password,email,birthday from users&quot;;\n ResultSet rs = stmt.executeQuery(sql);\n         //5、处理结果\n while (rs.next()) {\n             System.out.println(rs.getObject(1));\n             System.out.println(rs.getObject(2));\n             System.out.println(rs.getObject(3));\n             System.out.println(rs.getObject(4));\n             System.out.println(rs.getObject(5));\n         }\n         //6关闭资源\n rs.close();\n stmt.close();\n conn.close();\n}\n\n}\n</code></pre></li>\n</ol>\n<h1 id=\"JDBC常用的类和接口详解\"><a href=\"#JDBC常用的类和接口详解\" class=\"headerlink\" title=\"JDBC常用的类和接口详解\"></a>JDBC常用的类和接口详解</h1><h2 id=\"java-sql-Drivermanager类-创建连接\"><a href=\"#java-sql-Drivermanager类-创建连接\" class=\"headerlink\" title=\"java.sql.Drivermanager类 : 创建连接\"></a>java.sql.Drivermanager类 : 创建连接</h2><ol>\n<li><p>注册驱动</p>\n<p>DriverManager.registerDriver(new com.mysql.jdbc.Driver());不建议使用<br>原因有2个：</p>\n<ul>\n<li>导致驱动被注册2次。</li>\n<li>强烈依赖数据库的驱动jar</li>\n</ul>\n</li>\n</ol>\n<p>   解决办法：</p>\n<pre><code>用Class.forName(&quot;com.mysql.jdbc.Driver&quot;);代替。\n</code></pre><ol>\n<li><p>与数据库建立连接</p>\n<pre><code>static Connection getConnection(String url, String user, String password) \n\ngetConnection(&quot;jdbc:mysql://localhost:3306/mytest1&quot;, &quot;root&quot;, &quot;root&quot;);\n\nURL:SUN公司与数据库厂商之间的一种协议。\njdbc:mysql://localhost:3306/day06\n协议 子协议          IP:端口号 数据库\n\nmysql: jdbc:mysql://localhost:3306/day14 或者 jdbc:mysql:///day14（默认本机连接）\noracle: jdbc:oracle:thin:@localhost:1521:sid\n</code></pre></li>\n</ol>\n<pre><code>Properties info = new Properties();//要参考数据库文档\ninfo.setProperty(&quot;user&quot;, &quot;root&quot;);\ninfo.setProperty(&quot;password&quot;,&quot;root&quot;);\n\ngetConnection(String url, Properties info) \n\ngetConnection(String url) \nDriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/day14?user=root&amp;password=root&quot;);\n</code></pre><h1 id=\"实现一个用户登录的功能\"><a href=\"#实现一个用户登录的功能\" class=\"headerlink\" title=\"实现一个用户登录的功能\"></a>实现一个用户登录的功能</h1><p>Demo:<a href=\"https://github.com/MuTouTQ/JavaExamples\">https://github.com/MuTouTQ/login</a></p></The>"},{"title":"JAVA学习之JUnit","date":"2017-03-22T14:33:06.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n# JUnit是什么？ #\n\n\n> JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。\n\n> JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n## JUnit提供 ##\n\n\n1. 断言测试预期结果。\n2. 测试功能共享通用的测试数据。\n3. 测试套件轻松地组织和运行测试。\n4. 图形和文本测试运行。\n\n## JUnit用于测试 ##\n\n1. 整个对象\n2. 对象的一部分 - 交互的方法或一些方法\n3. 几个对象之间的互动(交互)\n\n## JUnit的特点 ##\n\n\n1. JUnit是用于编写和运行测试的开源框架。\n2. 提供了注释，以确定测试方法。\n3. 提供断言测试预期结果。\n4. 提供了测试运行的运行测试。\n5. JUnit测试让您可以更快地编写代码，提高质量\n6. JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。\n7. JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。\n8. JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。\n9. Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。\n\n# JUnit简单示例 #\n\n> 使用工具：eclipse\n\n测试类：\n\n*Calculate.java*\n\n    public class Calculate {\n    \n    \tpublic int sum(int var1, int var2) {\n    \t\tSystem.out.println(\"相加的值是: \" + var1 + \" + \" + var2);\n    \t\treturn var1 + var2;\n    \t}\n    \n    }\n\n*CalculateTest.java*\n\n    public class CalculateTest {\n    \n    \tCalculate calculation = new Calculate();\n    \tint sum = calculation.sum(2, 5);\n    \tint testSum = 7;\n    \n    \t@Test\n    \tpublic void testSum() {\n    \t\tSystem.out.println(\"@Test sum(): \" + sum + \" = \" + testSum);\n    \t\tassertEquals(sum, testSum);\n    \t}\n    \n    }\n\n\n> @Test的注解在 testSum()方法的上方。 这个注释指示该公共无效(public void)方法它所附着可以作为一个测试用例。\n> 因此，testSum()方法将用于测试公开方法 sum() 。 \n\n> 方法 assertEquals(sum, testsum)。 \n> assertEquals ([String message], object expected, object actual) 方法持有两个对象作为输入，并断言这两个对象相等。\n\n*如果要运行测试类，右键点击测试类，并选择 Run As -> Junit Test*。\n\n# JUnit注解 #\n\n在本节中，我们将提到支持在JUnit4基本注释，下表列出了这些注释的概括：\n\n<table>\n<tr><td>注解</td>\t<td>描述</td></tr>\n<tr><td>@Test<br>\npublic void method()</td>\t<td>测试注释指示该公共无效方法它所附着可以作为一个测试用例。</td></tr>\n<tr><td>@Before<br>\npublic void method()</td>\t<td>Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。</td></tr>\n<tr><td>@BeforeClass<br>\npublic static void method()</td><td>BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。</td></tr>\n<tr><td>@After<br>\npublic void method()</td><td>After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等)</td></tr>\n<tr><td>@AfterClass<br>\npublic static void method()</td><td>当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。</td></tr>\n<tr><td>@Ignore<br>\npublic static void method()</td><td>当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。</td></tr>\n</table>\n\n让我们看看一个测试类，在上面提到的一些注解的一个例子。\n\n*AnnotationsTest.java*\n\n    package com.yiibai.junit;\n    \n    import static org.junit.Assert.*;\n    import java.util.*;\n    import org.junit.*;\n    \n    public class AnnotationsTest {\n    \n    private ArrayList testList;\n    \n    @BeforeClass\n    public static void onceExecutedBeforeAll() {\n    System.out.println(\"@BeforeClass: onceExecutedBeforeAll\");\n    }\n    \n    @Before\n    public void executedBeforeEach() {\n    testList = new ArrayList();\n    System.out.println(\"@Before: executedBeforeEach\");\n    }\n    \n    @AfterClass\n    public static void onceExecutedAfterAll() {\n    System.out.println(\"@AfterClass: onceExecutedAfterAll\");\n    }\n    \n    @After\n    public void executedAfterEach() {\n    testList.clear();\n    System.out.println(\"@After: executedAfterEach\");\n    }\n    \n    @Test\n    public void EmptyCollection() {\n    assertTrue(testList.isEmpty());\n    System.out.println(\"@Test: EmptyArrayList\");\n    }\n    \n    @Test\n    public void OneItemCollection() {\n    testList.add(\"oneItem\");\n    assertEquals(1, testList.size());\n    System.out.println(\"@Test: OneItemArrayList\");\n    }\n    \n    @Ignore\n    public void executionIgnored() {\n    System.out.println(\"@Ignore: This execution is ignored\");\n    }\n    }\n\n如果我们运行上面的测试，控制台输出将是以下几点：\n\n    @BeforeClass: onceExecutedBeforeAll\n    @Before: executedBeforeEach\n    @Test: EmptyArrayList\n    @After: executedAfterEach\n    @Before: executedBeforeEach\n    @Test: OneItemArrayList\n    @After: executedAfterEach\n    @AfterClass: onceExecutedAfterAll\n\n# JUnit断言 #\n\n在本节中，我们将介绍一些断言方法。所有这些方法都受到 Assert 类扩展了java.lang.Object类并为它们提供编写测试，以便检测故障。下表中有一种最常用的断言方法的更详细的解释。\n\n<table>\n<tr><td>断言</td><td>描述</td></tr>\n<tr><td>void assertEquals([String message], expected value, actual value)</td><td>断言两个值相等。值可能是类型有 int, short, long, byte, char or java.lang.Object. 第一个参数是一个可选的字符串消息</td></tr>\n<tr><td>void assertTrue([String message], boolean condition)</td><td>断言一个条件为真</td></tr>\n<tr><td>void assertFalse([String message],boolean condition)</td><td>断言一个条件为假</td></tr>\n<tr><td>void assertNotNull([String message], java.lang.Object object)</td><td>断言一个对象不为空(null)</td></tr>\n<tr><td>void assertNull([String message], java.lang.Object object)</td><td>断言一个对象为空(null)</td></tr>\n<tr><td>void assertSame([String message], java.lang.Object expected, java.lang.Object actual)</td><td>断言，两个对象引用相同的对象</td></tr>\n<tr><td>void assertNotSame([String message], java.lang.Object unexpected, java.lang.Object actual)</td><td>断言，两个对象不是引用同一个对象</td></tr>\n<tr><td>void assertArrayEquals([String message], expectedArray, resultArray)</td><td>断言预期数组和结果数组相等。数组的类型可能是 int, long, short, char, byte or java.lang.Object.</td></tr>\n</table>\n\n 让我们看的一些前述断言的一个例子。\n\n    AssertionsTest.java\n    \n    package com.yiibai.junit;\n    \n    import static org.junit.Assert.*;\n    import org.junit.Test;\n    \n    public class AssertionsTest {\n\n\t@Test\n\tpublic void test() {\n\t\tString obj1 = \"junit\";\n\t\tString obj2 = \"junit\";\n\t\tString obj3 = \"test\";\n\t\tString obj4 = \"test\";\n\t\tString obj5 = null;\n\t\tint var1 = 1;\n\t\tint var2 = 2;\n\t\tint[] arithmetic1 = { 1, 2, 3 };\n\t\tint[] arithmetic2 = { 1, 2, 3 };\n\n\t\tassertEquals(obj1, obj2);\n\n\t\tassertSame(obj3, obj4);\n\n\t\tassertNotSame(obj2, obj4);\n\n\t\tassertNotNull(obj1);\n\n\t\tassertNull(obj5);\n\n\t\tassertTrue(var1  var2);\n\n\t\tassertArrayEquals(arithmetic1, arithmetic2);\n\t}\n\n    }\n\n在以上类中我们可以看到，这些断言方法是可以工作的。\n\n-  assertEquals() 如果比较的两个对象是相等的，此方法将正常返回；否则失败显示在JUnit的窗口测试将中止。\n-  assertSame() 和 assertNotSame() 方法测试两个对象引用指向完全相同的对象。\n-  assertNull() 和 assertNotNull() 方法测试一个变量是否为空或不为空(null)。\n-  assertTrue() 和 assertFalse() 方法测试if条件或变量是true还是false。\n-  assertArrayEquals() 将比较两个数组，如果它们相等，则该方法将继续进行不会发出错误。否则失败将显示在JUnit窗口和中止测试。\n\n\n> 文章转载自：易百教程 [http:/www.yiibai.com]","source":"_posts/JAVA学习之JUnit.md","raw":"---\ntitle: JAVA学习之JUnit\ndate: 2017-03-22 22:33:06\ncategories: JAVA #文章文类\ntags: [JAVA,JUnit]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n# JUnit是什么？ #\n\n\n> JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。\n\n> JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n## JUnit提供 ##\n\n\n1. 断言测试预期结果。\n2. 测试功能共享通用的测试数据。\n3. 测试套件轻松地组织和运行测试。\n4. 图形和文本测试运行。\n\n## JUnit用于测试 ##\n\n1. 整个对象\n2. 对象的一部分 - 交互的方法或一些方法\n3. 几个对象之间的互动(交互)\n\n## JUnit的特点 ##\n\n\n1. JUnit是用于编写和运行测试的开源框架。\n2. 提供了注释，以确定测试方法。\n3. 提供断言测试预期结果。\n4. 提供了测试运行的运行测试。\n5. JUnit测试让您可以更快地编写代码，提高质量\n6. JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。\n7. JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。\n8. JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。\n9. Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。\n\n# JUnit简单示例 #\n\n> 使用工具：eclipse\n\n测试类：\n\n*Calculate.java*\n\n    public class Calculate {\n    \n    \tpublic int sum(int var1, int var2) {\n    \t\tSystem.out.println(\"相加的值是: \" + var1 + \" + \" + var2);\n    \t\treturn var1 + var2;\n    \t}\n    \n    }\n\n*CalculateTest.java*\n\n    public class CalculateTest {\n    \n    \tCalculate calculation = new Calculate();\n    \tint sum = calculation.sum(2, 5);\n    \tint testSum = 7;\n    \n    \t@Test\n    \tpublic void testSum() {\n    \t\tSystem.out.println(\"@Test sum(): \" + sum + \" = \" + testSum);\n    \t\tassertEquals(sum, testSum);\n    \t}\n    \n    }\n\n\n> @Test的注解在 testSum()方法的上方。 这个注释指示该公共无效(public void)方法它所附着可以作为一个测试用例。\n> 因此，testSum()方法将用于测试公开方法 sum() 。 \n\n> 方法 assertEquals(sum, testsum)。 \n> assertEquals ([String message], object expected, object actual) 方法持有两个对象作为输入，并断言这两个对象相等。\n\n*如果要运行测试类，右键点击测试类，并选择 Run As -> Junit Test*。\n\n# JUnit注解 #\n\n在本节中，我们将提到支持在JUnit4基本注释，下表列出了这些注释的概括：\n\n<table>\n<tr><td>注解</td>\t<td>描述</td></tr>\n<tr><td>@Test<br>\npublic void method()</td>\t<td>测试注释指示该公共无效方法它所附着可以作为一个测试用例。</td></tr>\n<tr><td>@Before<br>\npublic void method()</td>\t<td>Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。</td></tr>\n<tr><td>@BeforeClass<br>\npublic static void method()</td><td>BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。</td></tr>\n<tr><td>@After<br>\npublic void method()</td><td>After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等)</td></tr>\n<tr><td>@AfterClass<br>\npublic static void method()</td><td>当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。</td></tr>\n<tr><td>@Ignore<br>\npublic static void method()</td><td>当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。</td></tr>\n</table>\n\n让我们看看一个测试类，在上面提到的一些注解的一个例子。\n\n*AnnotationsTest.java*\n\n    package com.yiibai.junit;\n    \n    import static org.junit.Assert.*;\n    import java.util.*;\n    import org.junit.*;\n    \n    public class AnnotationsTest {\n    \n    private ArrayList testList;\n    \n    @BeforeClass\n    public static void onceExecutedBeforeAll() {\n    System.out.println(\"@BeforeClass: onceExecutedBeforeAll\");\n    }\n    \n    @Before\n    public void executedBeforeEach() {\n    testList = new ArrayList();\n    System.out.println(\"@Before: executedBeforeEach\");\n    }\n    \n    @AfterClass\n    public static void onceExecutedAfterAll() {\n    System.out.println(\"@AfterClass: onceExecutedAfterAll\");\n    }\n    \n    @After\n    public void executedAfterEach() {\n    testList.clear();\n    System.out.println(\"@After: executedAfterEach\");\n    }\n    \n    @Test\n    public void EmptyCollection() {\n    assertTrue(testList.isEmpty());\n    System.out.println(\"@Test: EmptyArrayList\");\n    }\n    \n    @Test\n    public void OneItemCollection() {\n    testList.add(\"oneItem\");\n    assertEquals(1, testList.size());\n    System.out.println(\"@Test: OneItemArrayList\");\n    }\n    \n    @Ignore\n    public void executionIgnored() {\n    System.out.println(\"@Ignore: This execution is ignored\");\n    }\n    }\n\n如果我们运行上面的测试，控制台输出将是以下几点：\n\n    @BeforeClass: onceExecutedBeforeAll\n    @Before: executedBeforeEach\n    @Test: EmptyArrayList\n    @After: executedAfterEach\n    @Before: executedBeforeEach\n    @Test: OneItemArrayList\n    @After: executedAfterEach\n    @AfterClass: onceExecutedAfterAll\n\n# JUnit断言 #\n\n在本节中，我们将介绍一些断言方法。所有这些方法都受到 Assert 类扩展了java.lang.Object类并为它们提供编写测试，以便检测故障。下表中有一种最常用的断言方法的更详细的解释。\n\n<table>\n<tr><td>断言</td><td>描述</td></tr>\n<tr><td>void assertEquals([String message], expected value, actual value)</td><td>断言两个值相等。值可能是类型有 int, short, long, byte, char or java.lang.Object. 第一个参数是一个可选的字符串消息</td></tr>\n<tr><td>void assertTrue([String message], boolean condition)</td><td>断言一个条件为真</td></tr>\n<tr><td>void assertFalse([String message],boolean condition)</td><td>断言一个条件为假</td></tr>\n<tr><td>void assertNotNull([String message], java.lang.Object object)</td><td>断言一个对象不为空(null)</td></tr>\n<tr><td>void assertNull([String message], java.lang.Object object)</td><td>断言一个对象为空(null)</td></tr>\n<tr><td>void assertSame([String message], java.lang.Object expected, java.lang.Object actual)</td><td>断言，两个对象引用相同的对象</td></tr>\n<tr><td>void assertNotSame([String message], java.lang.Object unexpected, java.lang.Object actual)</td><td>断言，两个对象不是引用同一个对象</td></tr>\n<tr><td>void assertArrayEquals([String message], expectedArray, resultArray)</td><td>断言预期数组和结果数组相等。数组的类型可能是 int, long, short, char, byte or java.lang.Object.</td></tr>\n</table>\n\n 让我们看的一些前述断言的一个例子。\n\n    AssertionsTest.java\n    \n    package com.yiibai.junit;\n    \n    import static org.junit.Assert.*;\n    import org.junit.Test;\n    \n    public class AssertionsTest {\n\n\t@Test\n\tpublic void test() {\n\t\tString obj1 = \"junit\";\n\t\tString obj2 = \"junit\";\n\t\tString obj3 = \"test\";\n\t\tString obj4 = \"test\";\n\t\tString obj5 = null;\n\t\tint var1 = 1;\n\t\tint var2 = 2;\n\t\tint[] arithmetic1 = { 1, 2, 3 };\n\t\tint[] arithmetic2 = { 1, 2, 3 };\n\n\t\tassertEquals(obj1, obj2);\n\n\t\tassertSame(obj3, obj4);\n\n\t\tassertNotSame(obj2, obj4);\n\n\t\tassertNotNull(obj1);\n\n\t\tassertNull(obj5);\n\n\t\tassertTrue(var1  var2);\n\n\t\tassertArrayEquals(arithmetic1, arithmetic2);\n\t}\n\n    }\n\n在以上类中我们可以看到，这些断言方法是可以工作的。\n\n-  assertEquals() 如果比较的两个对象是相等的，此方法将正常返回；否则失败显示在JUnit的窗口测试将中止。\n-  assertSame() 和 assertNotSame() 方法测试两个对象引用指向完全相同的对象。\n-  assertNull() 和 assertNotNull() 方法测试一个变量是否为空或不为空(null)。\n-  assertTrue() 和 assertFalse() 方法测试if条件或变量是true还是false。\n-  assertArrayEquals() 将比较两个数组，如果它们相等，则该方法将继续进行不会发出错误。否则失败将显示在JUnit窗口和中止测试。\n\n\n> 文章转载自：易百教程 [http:/www.yiibai.com]","slug":"JAVA学习之JUnit","published":1,"updated":"2017-03-23T06:04:28.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6uu000k64xtnog2c4xt","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"JUnit是什么？\"><a href=\"#JUnit是什么？\" class=\"headerlink\" title=\"JUnit是什么？\"></a>JUnit是什么？</h1><blockquote>\n<p>JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。</p>\n<p>JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。</p>\n</blockquote>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h2 id=\"JUnit提供\"><a href=\"#JUnit提供\" class=\"headerlink\" title=\"JUnit提供\"></a>JUnit提供</h2><ol>\n<li>断言测试预期结果。</li>\n<li>测试功能共享通用的测试数据。</li>\n<li>测试套件轻松地组织和运行测试。</li>\n<li>图形和文本测试运行。</li>\n</ol>\n<h2 id=\"JUnit用于测试\"><a href=\"#JUnit用于测试\" class=\"headerlink\" title=\"JUnit用于测试\"></a>JUnit用于测试</h2><ol>\n<li>整个对象</li>\n<li>对象的一部分 - 交互的方法或一些方法</li>\n<li>几个对象之间的互动(交互)</li>\n</ol>\n<h2 id=\"JUnit的特点\"><a href=\"#JUnit的特点\" class=\"headerlink\" title=\"JUnit的特点\"></a>JUnit的特点</h2><ol>\n<li>JUnit是用于编写和运行测试的开源框架。</li>\n<li>提供了注释，以确定测试方法。</li>\n<li>提供断言测试预期结果。</li>\n<li>提供了测试运行的运行测试。</li>\n<li>JUnit测试让您可以更快地编写代码，提高质量</li>\n<li>JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。</li>\n<li>JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。</li>\n<li>JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。</li>\n<li>Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。</li>\n</ol>\n<h1 id=\"JUnit简单示例\"><a href=\"#JUnit简单示例\" class=\"headerlink\" title=\"JUnit简单示例\"></a>JUnit简单示例</h1><blockquote>\n<p>使用工具：eclipse</p>\n</blockquote>\n<p>测试类：</p>\n<p><em>Calculate.java</em></p>\n<pre><code>public class Calculate {\n\n    public int sum(int var1, int var2) {\n        System.out.println(&quot;相加的值是: &quot; + var1 + &quot; + &quot; + var2);\n        return var1 + var2;\n    }\n\n}\n</code></pre><p><em>CalculateTest.java</em></p>\n<pre><code>public class CalculateTest {\n\n    Calculate calculation = new Calculate();\n    int sum = calculation.sum(2, 5);\n    int testSum = 7;\n\n    @Test\n    public void testSum() {\n        System.out.println(&quot;@Test sum(): &quot; + sum + &quot; = &quot; + testSum);\n        assertEquals(sum, testSum);\n    }\n\n}\n</code></pre><blockquote>\n<p>@Test的注解在 testSum()方法的上方。 这个注释指示该公共无效(public void)方法它所附着可以作为一个测试用例。<br>因此，testSum()方法将用于测试公开方法 sum() 。 </p>\n<p>方法 assertEquals(sum, testsum)。<br>assertEquals ([String message], object expected, object actual) 方法持有两个对象作为输入，并断言这两个对象相等。</p>\n</blockquote>\n<p><em>如果要运行测试类，右键点击测试类，并选择 Run As -&gt; Junit Test</em>。</p>\n<h1 id=\"JUnit注解\"><a href=\"#JUnit注解\" class=\"headerlink\" title=\"JUnit注解\"></a>JUnit注解</h1><p>在本节中，我们将提到支持在JUnit4基本注释，下表列出了这些注释的概括：</p>\n<table><br><tr><td>注解</td>    <td>描述</td></tr><br><tr><td>@Test<br><br>public void method()</td>    <td>测试注释指示该公共无效方法它所附着可以作为一个测试用例。</td></tr><br><tr><td>@Before<br><br>public void method()</td>    <td>Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。</td></tr><br><tr><td>@BeforeClass<br><br>public static void method()</td><td>BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。</td></tr><br><tr><td>@After<br><br>public void method()</td><td>After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等)</td></tr><br><tr><td>@AfterClass<br><br>public static void method()</td><td>当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。</td></tr><br><tr><td>@Ignore<br><br>public static void method()</td><td>当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。</td></tr><br></table>\n\n<p>让我们看看一个测试类，在上面提到的一些注解的一个例子。</p>\n<p><em>AnnotationsTest.java</em></p>\n<pre><code>package com.yiibai.junit;\n\nimport static org.junit.Assert.*;\nimport java.util.*;\nimport org.junit.*;\n\npublic class AnnotationsTest {\n\nprivate ArrayList testList;\n\n@BeforeClass\npublic static void onceExecutedBeforeAll() {\nSystem.out.println(&quot;@BeforeClass: onceExecutedBeforeAll&quot;);\n}\n\n@Before\npublic void executedBeforeEach() {\ntestList = new ArrayList();\nSystem.out.println(&quot;@Before: executedBeforeEach&quot;);\n}\n\n@AfterClass\npublic static void onceExecutedAfterAll() {\nSystem.out.println(&quot;@AfterClass: onceExecutedAfterAll&quot;);\n}\n\n@After\npublic void executedAfterEach() {\ntestList.clear();\nSystem.out.println(&quot;@After: executedAfterEach&quot;);\n}\n\n@Test\npublic void EmptyCollection() {\nassertTrue(testList.isEmpty());\nSystem.out.println(&quot;@Test: EmptyArrayList&quot;);\n}\n\n@Test\npublic void OneItemCollection() {\ntestList.add(&quot;oneItem&quot;);\nassertEquals(1, testList.size());\nSystem.out.println(&quot;@Test: OneItemArrayList&quot;);\n}\n\n@Ignore\npublic void executionIgnored() {\nSystem.out.println(&quot;@Ignore: This execution is ignored&quot;);\n}\n}\n</code></pre><p>如果我们运行上面的测试，控制台输出将是以下几点：</p>\n<pre><code>@BeforeClass: onceExecutedBeforeAll\n@Before: executedBeforeEach\n@Test: EmptyArrayList\n@After: executedAfterEach\n@Before: executedBeforeEach\n@Test: OneItemArrayList\n@After: executedAfterEach\n@AfterClass: onceExecutedAfterAll\n</code></pre><h1 id=\"JUnit断言\"><a href=\"#JUnit断言\" class=\"headerlink\" title=\"JUnit断言\"></a>JUnit断言</h1><p>在本节中，我们将介绍一些断言方法。所有这些方法都受到 Assert 类扩展了java.lang.Object类并为它们提供编写测试，以便检测故障。下表中有一种最常用的断言方法的更详细的解释。</p>\n<table><br><tr><td>断言</td><td>描述</td></tr><br><tr><td>void assertEquals([String message], expected value, actual value)</td><td>断言两个值相等。值可能是类型有 int, short, long, byte, char or java.lang.Object. 第一个参数是一个可选的字符串消息</td></tr><br><tr><td>void assertTrue([String message], boolean condition)</td><td>断言一个条件为真</td></tr><br><tr><td>void assertFalse([String message],boolean condition)</td><td>断言一个条件为假</td></tr><br><tr><td>void assertNotNull([String message], java.lang.Object object)</td><td>断言一个对象不为空(null)</td></tr><br><tr><td>void assertNull([String message], java.lang.Object object)</td><td>断言一个对象为空(null)</td></tr><br><tr><td>void assertSame([String message], java.lang.Object expected, java.lang.Object actual)</td><td>断言，两个对象引用相同的对象</td></tr><br><tr><td>void assertNotSame([String message], java.lang.Object unexpected, java.lang.Object actual)</td><td>断言，两个对象不是引用同一个对象</td></tr><br><tr><td>void assertArrayEquals([String message], expectedArray, resultArray)</td><td>断言预期数组和结果数组相等。数组的类型可能是 int, long, short, char, byte or java.lang.Object.</td></tr><br></table>\n\n<p> 让我们看的一些前述断言的一个例子。</p>\n<pre><code>AssertionsTest.java\n\npackage com.yiibai.junit;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class AssertionsTest {\n\n@Test\npublic void test() {\n    String obj1 = &quot;junit&quot;;\n    String obj2 = &quot;junit&quot;;\n    String obj3 = &quot;test&quot;;\n    String obj4 = &quot;test&quot;;\n    String obj5 = null;\n    int var1 = 1;\n    int var2 = 2;\n    int[] arithmetic1 = { 1, 2, 3 };\n    int[] arithmetic2 = { 1, 2, 3 };\n\n    assertEquals(obj1, obj2);\n\n    assertSame(obj3, obj4);\n\n    assertNotSame(obj2, obj4);\n\n    assertNotNull(obj1);\n\n    assertNull(obj5);\n\n    assertTrue(var1  var2);\n\n    assertArrayEquals(arithmetic1, arithmetic2);\n}\n\n}\n</code></pre><p>在以上类中我们可以看到，这些断言方法是可以工作的。</p>\n<ul>\n<li>assertEquals() 如果比较的两个对象是相等的，此方法将正常返回；否则失败显示在JUnit的窗口测试将中止。</li>\n<li>assertSame() 和 assertNotSame() 方法测试两个对象引用指向完全相同的对象。</li>\n<li>assertNull() 和 assertNotNull() 方法测试一个变量是否为空或不为空(null)。</li>\n<li>assertTrue() 和 assertFalse() 方法测试if条件或变量是true还是false。</li>\n<li>assertArrayEquals() 将比较两个数组，如果它们相等，则该方法将继续进行不会发出错误。否则失败将显示在JUnit窗口和中止测试。</li>\n</ul>\n<blockquote>\n<p>文章转载自：易百教程 [http:/www.yiibai.com]</p>\n</blockquote>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"JUnit是什么？\"><a href=\"#JUnit是什么？\" class=\"headerlink\" title=\"JUnit是什么？\"></a>JUnit是什么？</h1><blockquote>\n<p>JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。</p>\n<p>JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。</p>\n</blockquote></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h2 id=\"JUnit提供\"><a href=\"#JUnit提供\" class=\"headerlink\" title=\"JUnit提供\"></a>JUnit提供</h2><ol>\n<li>断言测试预期结果。</li>\n<li>测试功能共享通用的测试数据。</li>\n<li>测试套件轻松地组织和运行测试。</li>\n<li>图形和文本测试运行。</li>\n</ol>\n<h2 id=\"JUnit用于测试\"><a href=\"#JUnit用于测试\" class=\"headerlink\" title=\"JUnit用于测试\"></a>JUnit用于测试</h2><ol>\n<li>整个对象</li>\n<li>对象的一部分 - 交互的方法或一些方法</li>\n<li>几个对象之间的互动(交互)</li>\n</ol>\n<h2 id=\"JUnit的特点\"><a href=\"#JUnit的特点\" class=\"headerlink\" title=\"JUnit的特点\"></a>JUnit的特点</h2><ol>\n<li>JUnit是用于编写和运行测试的开源框架。</li>\n<li>提供了注释，以确定测试方法。</li>\n<li>提供断言测试预期结果。</li>\n<li>提供了测试运行的运行测试。</li>\n<li>JUnit测试让您可以更快地编写代码，提高质量</li>\n<li>JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。</li>\n<li>JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。</li>\n<li>JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。</li>\n<li>Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。</li>\n</ol>\n<h1 id=\"JUnit简单示例\"><a href=\"#JUnit简单示例\" class=\"headerlink\" title=\"JUnit简单示例\"></a>JUnit简单示例</h1><blockquote>\n<p>使用工具：eclipse</p>\n</blockquote>\n<p>测试类：</p>\n<p><em>Calculate.java</em></p>\n<pre><code>public class Calculate {\n\n    public int sum(int var1, int var2) {\n        System.out.println(&quot;相加的值是: &quot; + var1 + &quot; + &quot; + var2);\n        return var1 + var2;\n    }\n\n}\n</code></pre><p><em>CalculateTest.java</em></p>\n<pre><code>public class CalculateTest {\n\n    Calculate calculation = new Calculate();\n    int sum = calculation.sum(2, 5);\n    int testSum = 7;\n\n    @Test\n    public void testSum() {\n        System.out.println(&quot;@Test sum(): &quot; + sum + &quot; = &quot; + testSum);\n        assertEquals(sum, testSum);\n    }\n\n}\n</code></pre><blockquote>\n<p>@Test的注解在 testSum()方法的上方。 这个注释指示该公共无效(public void)方法它所附着可以作为一个测试用例。<br>因此，testSum()方法将用于测试公开方法 sum() 。 </p>\n<p>方法 assertEquals(sum, testsum)。<br>assertEquals ([String message], object expected, object actual) 方法持有两个对象作为输入，并断言这两个对象相等。</p>\n</blockquote>\n<p><em>如果要运行测试类，右键点击测试类，并选择 Run As -&gt; Junit Test</em>。</p>\n<h1 id=\"JUnit注解\"><a href=\"#JUnit注解\" class=\"headerlink\" title=\"JUnit注解\"></a>JUnit注解</h1><p>在本节中，我们将提到支持在JUnit4基本注释，下表列出了这些注释的概括：</p>\n<table><br><tr><td>注解</td>    <td>描述</td></tr><br><tr><td>@Test<br><br>public void method()</td>    <td>测试注释指示该公共无效方法它所附着可以作为一个测试用例。</td></tr><br><tr><td>@Before<br><br>public void method()</td>    <td>Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。</td></tr><br><tr><td>@BeforeClass<br><br>public static void method()</td><td>BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。</td></tr><br><tr><td>@After<br><br>public void method()</td><td>After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等)</td></tr><br><tr><td>@AfterClass<br><br>public static void method()</td><td>当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。</td></tr><br><tr><td>@Ignore<br><br>public static void method()</td><td>当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。</td></tr><br></table>\n\n<p>让我们看看一个测试类，在上面提到的一些注解的一个例子。</p>\n<p><em>AnnotationsTest.java</em></p>\n<pre><code>package com.yiibai.junit;\n\nimport static org.junit.Assert.*;\nimport java.util.*;\nimport org.junit.*;\n\npublic class AnnotationsTest {\n\nprivate ArrayList testList;\n\n@BeforeClass\npublic static void onceExecutedBeforeAll() {\nSystem.out.println(&quot;@BeforeClass: onceExecutedBeforeAll&quot;);\n}\n\n@Before\npublic void executedBeforeEach() {\ntestList = new ArrayList();\nSystem.out.println(&quot;@Before: executedBeforeEach&quot;);\n}\n\n@AfterClass\npublic static void onceExecutedAfterAll() {\nSystem.out.println(&quot;@AfterClass: onceExecutedAfterAll&quot;);\n}\n\n@After\npublic void executedAfterEach() {\ntestList.clear();\nSystem.out.println(&quot;@After: executedAfterEach&quot;);\n}\n\n@Test\npublic void EmptyCollection() {\nassertTrue(testList.isEmpty());\nSystem.out.println(&quot;@Test: EmptyArrayList&quot;);\n}\n\n@Test\npublic void OneItemCollection() {\ntestList.add(&quot;oneItem&quot;);\nassertEquals(1, testList.size());\nSystem.out.println(&quot;@Test: OneItemArrayList&quot;);\n}\n\n@Ignore\npublic void executionIgnored() {\nSystem.out.println(&quot;@Ignore: This execution is ignored&quot;);\n}\n}\n</code></pre><p>如果我们运行上面的测试，控制台输出将是以下几点：</p>\n<pre><code>@BeforeClass: onceExecutedBeforeAll\n@Before: executedBeforeEach\n@Test: EmptyArrayList\n@After: executedAfterEach\n@Before: executedBeforeEach\n@Test: OneItemArrayList\n@After: executedAfterEach\n@AfterClass: onceExecutedAfterAll\n</code></pre><h1 id=\"JUnit断言\"><a href=\"#JUnit断言\" class=\"headerlink\" title=\"JUnit断言\"></a>JUnit断言</h1><p>在本节中，我们将介绍一些断言方法。所有这些方法都受到 Assert 类扩展了java.lang.Object类并为它们提供编写测试，以便检测故障。下表中有一种最常用的断言方法的更详细的解释。</p>\n<table><br><tr><td>断言</td><td>描述</td></tr><br><tr><td>void assertEquals([String message], expected value, actual value)</td><td>断言两个值相等。值可能是类型有 int, short, long, byte, char or java.lang.Object. 第一个参数是一个可选的字符串消息</td></tr><br><tr><td>void assertTrue([String message], boolean condition)</td><td>断言一个条件为真</td></tr><br><tr><td>void assertFalse([String message],boolean condition)</td><td>断言一个条件为假</td></tr><br><tr><td>void assertNotNull([String message], java.lang.Object object)</td><td>断言一个对象不为空(null)</td></tr><br><tr><td>void assertNull([String message], java.lang.Object object)</td><td>断言一个对象为空(null)</td></tr><br><tr><td>void assertSame([String message], java.lang.Object expected, java.lang.Object actual)</td><td>断言，两个对象引用相同的对象</td></tr><br><tr><td>void assertNotSame([String message], java.lang.Object unexpected, java.lang.Object actual)</td><td>断言，两个对象不是引用同一个对象</td></tr><br><tr><td>void assertArrayEquals([String message], expectedArray, resultArray)</td><td>断言预期数组和结果数组相等。数组的类型可能是 int, long, short, char, byte or java.lang.Object.</td></tr><br></table>\n\n<p> 让我们看的一些前述断言的一个例子。</p>\n<pre><code>AssertionsTest.java\n\npackage com.yiibai.junit;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class AssertionsTest {\n\n@Test\npublic void test() {\n    String obj1 = &quot;junit&quot;;\n    String obj2 = &quot;junit&quot;;\n    String obj3 = &quot;test&quot;;\n    String obj4 = &quot;test&quot;;\n    String obj5 = null;\n    int var1 = 1;\n    int var2 = 2;\n    int[] arithmetic1 = { 1, 2, 3 };\n    int[] arithmetic2 = { 1, 2, 3 };\n\n    assertEquals(obj1, obj2);\n\n    assertSame(obj3, obj4);\n\n    assertNotSame(obj2, obj4);\n\n    assertNotNull(obj1);\n\n    assertNull(obj5);\n\n    assertTrue(var1  var2);\n\n    assertArrayEquals(arithmetic1, arithmetic2);\n}\n\n}\n</code></pre><p>在以上类中我们可以看到，这些断言方法是可以工作的。</p>\n<ul>\n<li>assertEquals() 如果比较的两个对象是相等的，此方法将正常返回；否则失败显示在JUnit的窗口测试将中止。</li>\n<li>assertSame() 和 assertNotSame() 方法测试两个对象引用指向完全相同的对象。</li>\n<li>assertNull() 和 assertNotNull() 方法测试一个变量是否为空或不为空(null)。</li>\n<li>assertTrue() 和 assertFalse() 方法测试if条件或变量是true还是false。</li>\n<li>assertArrayEquals() 将比较两个数组，如果它们相等，则该方法将继续进行不会发出错误。否则失败将显示在JUnit窗口和中止测试。</li>\n</ul>\n<blockquote>\n<p>文章转载自：易百教程 [http:/www.yiibai.com]</p>\n</blockquote></The>"},{"title":"JAVA学习之Jsp","date":"2017-03-29T12:41:07.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n# Jsp 简介 #\n\n\n> JSP全称是Java Server Pages，它和servle技术一样，都是SUN公司定义的一种用于开发动态web资源的技术。**JSP实际上就是Servlet。**\n\n\n***jsp = html + java***\n\n**html:**静态内容\n\n**servlet：**服务器端的小应用程序。适合编写java逻辑代码，如果编写网页内容--苦逼。\n\n**jsp:**适合编写输出动态内容，但不适合编写java逻辑。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# jsp的原理 #\n\n![](http://olg3gwtbm.bkt.clouddn.com/jsp1.png)\n\n# JSP 语法(3、6、9) #\n\n> 接下来就是JSP的3（jsp的3个指令）6（jsp的6个动作）9（jsp的9个内置对象）了，简称：三六九。\n\n## JSP的脚本 ##\n1. 小脚本: <% java代码 %>\n2. 表达式: <%= 2+3 %> 等价于out.print(2+3);  \n3. 声明:   <%! %> 表示在类中定义全局成员，和静态块。\n\n1、脚本程序的语法格式及示例：\n\n    <% 代码片段 %>\n\n    <%\n    out.println(\"Your IP address is \" + request.getRemoteAddr());\n    %>\n\n2、表达式示例：\n\n    <%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"ISO-8859-1\"%>\n    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n    <html>\n      <head>\n      </head>\n  \n      <body>\n       <%\n       Date date = new Date();\n       out.write(date.toLocaleString());\n     %>\n    </body>\n    </html>\n\n3、声明示例：\n\n\n> 一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。\n\n    <%! int i = 0; %> \n    <%! int a, b, c; %> \n    <%! Circle a = new Circle(2.0); %> \n\n## JSP 指令（3） ##\n\nJSP中的三种指令标签：\n<table>\n<tr><td>指令</td><td>\t描述</td></tr>\n<tr><td>  page  </td><td>\t定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr>\n<tr><td>  include  </td><td>\t包含其他文件</td></tr>\n<tr><td> taglib  </td><td>\t引入标签库的定义</td></tr>\n</table>\n\n### Page指令 ###\n\n> Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。\n\nPage指令的语法格式：\n\n    <%@ 指令名称 属性1=“属性值1” 属性2=“属性值2”。。。%>\n    或者：\n    <%@ 指令名称 属性1=“属性值1”%>\n    <%@ 指令名称 属性2=“属性值2”%>\n\n如：\n\n    <%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n    或者：\n    <%@ page language=\"java\" %>\n    <%@ page import=\"java.util.*\" %>\n\n与Page指令相关的属性：\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>buffer</td><td>\tJSP中有javax.servlet.jsp.JspWriter输出字符流。指定out对象使用缓冲区的大小,默认是8kb.</td></tr>\n<tr><td>autoFlush</td><td>\t控制out对象的 缓存区</td></tr>\n<tr><td>contentType</td><td>\t指定当前JSP页面的MIME类型和字符编码，等同于response.setContextType(\"text/html;charset=utf-8\");</td></tr>\n<tr><td>errorPage</td><td>\t指定当JSP页面发生异常时需要转向的错误处理页面</td></tr>\n<tr><td>isErrorPage</td><td>\t指定当前页面是否可以作为另一个JSP页面的错误处理页面，默认是false。</td></tr>\n<tr><td>extends</td><td>\t指定servlet从哪一个类继承</td></tr>\n<tr><td>import</td><td>\t导入要使用的Java类,和java代码中的import是一样的</td></tr>\n<tr><td>info</td><td>\t定义JSP页面的描述信息</td></tr>\n<tr><td>isThreadSafe</td><td>\t指定对JSP页面的访问是否为线程安全</td></tr>\n<tr><td>language</td><td>\t定义JSP页面所用的脚本语言，默认是Java</td></tr>\n<tr><td>session</td><td>\t指定JSP页面是否使用session,默认值是true</td></tr>\n<tr><td>isELIgnored</td><td>\t指定是否执行EL表达式</td></tr>\n<tr><td>isScriptingEnabled</td><td>\t确定脚本元素能否被使用</td></tr>\n<tr><td>pageEncoding</td><td>\t告诉JSP引擎要翻译的文件使用的编码</td></tr>\n</table>\n\n **注：**\n\n 1. errorPage：errorPage=\"/uri\" 如果写“/”则代表*当前应用*的目录下，*绝对路径*。\n如果不写“/”则代表*相对路径*。\n\n\n### include指令 ###\n\n> JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。\n\n静态包含：把其它资源包含到当前页面中。\n\n    <%@ include file=\"/include/header.jsp\" %>\n\n动态包含：\n\n    <jsp:include page=\"/include/header.jsp\"></jsp:include>\n\n两者的区别：翻译的时间段不同\n\n前者：在翻译时就把两个文件合并\n\n后者：不会合并文件，当代码执行到include时，才包含另一个文件的内容。\n\n原则：能用静的就不用动的。\n\n### taglib指令 ###\n\n**作用：**在JSP页面中导入JSTL标签库。替换jsp中的java代码片段。\n\n    <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> \n\n## JSP 动作元素（6） ##\n\n>  使用标签的形式来表示一段java代码。\n\n - `<jsp:include >` 动态包含 \n - `<jsp:forward>` 请求转发 \n - `<jsp:param>` 设置请求参数\n - `<jsp:useBean>` 创建一个对象\n - `<jsp:setProperty>` 给指定的对象属性赋值\n - `<jsp:getProperty>` 取出指定对象的属性值\n\n\n### 动作元素(jsp:include) ###\n\n\n> <jsp:include>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。\n\n语法格式如下：\n\n    <jsp:include page=\"相对 URL 地址\" flush=\"true\" />\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>page</td><td>\t包含在页面中的相对URL地址。</td></tr>\n<tr><td>flush</td><td>\t布尔属性，定义在包含资源前是否刷新缓存区。</td></tr>\n</table>\n\n**实例:**\n\n*date.jsp文件代码：*\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <p>\n       今天的日期是: <%= (new java.util.Date()).toLocaleString()%>\n    </p>\n\n*main.jsp文件代码：*\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title>123</title>\n    </head>\n    <body>\n    \n    <h2>include 动作实例</h2>\n    <jsp:include page=\"date.jsp\" flush=\"true\" />\n    \n    </body>\n    </html>\n\n### 动作元素(jsp:useBean) ###\n\njsp:useBean动作最简单的语法为：\n\n     <!-- 模板 -->\n    <jsp:useBean id=\"name\" class=\"package.class\" />\n     <!-- 示例 -->\n    <jsp:useBean id=\"stu1\" class=\"com.itheima.entity.Student\"></jsp:useBean>\n\n**注：**\n\n- class中填写的是Bean类的完整路径\n- id 为定义的的Bean变量名，如 Bean b = new Bean()中的b;\n\n### 动作元素(jsp:setProperty) ###\n\n> jsp:setProperty用来设置已经实例化的Bean对象的属性.\n\n\n\t <jsp:setProperty property=\"name\" name=\"stu1\" value=\"jerry\"/>\n\njsp:setProperty动作有下面四个属性,如下表：\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>name</td><td>\tname属性是必需的。它表示要设置属性的是哪个Bean。</td></tr>\n<tr><td>property</td><td>\tproperty属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是\"*\"，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr>\n<tr><td>value</td><td>\tvalue 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如\"true\"）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如\"42\"）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。</td></tr>\n<tr><td>param</td><td>\tparam 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr>\n</table>\n\n### 动作元素(jsp:getProperty) ###\n\n> jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。\n\n语法格式如下：\n\n\t <jsp:getProperty property=\"name\" name=\"stu1\"/>\n\t \n下表是与getProperty相关联的属性：\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>name</td><td>\t要检索的Bean属性名称。Bean必须已定义。</td></tr>\n<tr><td>property</td><td>\t表示要提取Bean属性的值</td></tr>\n</table>\n\n**实例：**\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title>useBean</title>\n    </head>\n    <body>\n    \n    <h2>Jsp 使用 JavaBean 实例</h2>\n    <jsp:useBean id=\"test\" class=\"com.runoob.main.TestBean\" />\n     \n    <jsp:setProperty name=\"test\" \n    property=\"message\" \n    value=\"教程...\" />\n     \n    <p>输出信息....</p>\n     \n    <jsp:getProperty name=\"test\" property=\"message\" />\n    \n    </body>\n    </html>\n\n\n### 动作元素(jsp:forward) ###\n\n> jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。\n\n语法格式如下所示：\n\n    <jsp:forward page=\"相对 URL 地址\" />\n\n以下是forward相关联的属性：\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>page</td><td>\tpage属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.</td></tr></table>\n\n**实例**\ndate.jsp 文件代码如下：\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <p>\n       今天的日期是: <%= (new java.util.Date()).toLocaleString()%>\n    </p>\n\nmain.jsp文件代码：\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    </head>\n    <body>\n    \n    <h2>forward 动作实例</h2>\n    <jsp:forward page=\"date.jsp\" />\n    </body>\n    </html>\n\n\n## JSP 隐式对象(9) ##\n\n> JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。\n\nJSP所支持的九大隐式对象：\n<table>\n<tr><td>对象</td><td>\t描述</td></tr>\n<tr><td>request</td><td>\tHttpServletRequest类的实例,它包含了有关浏览器请求的信息，并且提供了几个用于获取cookie, header, 和session数据的有用的方法。</td></tr>\n<tr><td>response</td><td>\tHttpServletResponse类的实例，并提供了几个用于设置送回\n浏览器的响应的方法（如cookies,头信息等）。</td></tr>\n<tr><td>out</td><td>\tPrintWriter类的实例，用于把结果输出至网页上</td></tr>\n<tr><td>session</td><td>\tHttpSession类的实例,Session可以存贮用户的状态信息。</td></tr>\n<tr><td>application</td><td>\tServletContext类的实例，与应用上下文有关,有助于查找有关servlet引擎和servlet环境的信息。</td></tr>\n<tr><td>config</td><td>\tServletConfig类的实例,该对象用于存取servlet实例的初始化参数。</td></tr>\n<tr><td>pageContext</td><td>\tPageContext类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr>\n<tr><td>page</td><td>\t类似于Java类中的this关键字，表示从该页面产生的一个servlet实例。</td></tr>\n<tr><td>Exception</td><td>\tException类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr>\n</table>\n\n**pageContext(重要):**\n1、本身也是一个域对象：它可以操作其它三个域对象（`request` `session` `application`）的数据.\n\n# 四大域对象 #\n\nPageContext : pageConext 存放的数据在当前页面有效。开发时使用较少。\n\nServletRequest: request  存放的数据在一次请求（转发）内有效。使用非常多。\n\nHttpSession: session 存放的数据在一次会话中有效。使用的比较多。如：存放用户的登录信息，购物车功能。\n\nServletContext: application 存放的数据在整个应用范围内都有效。因为范围太大，应尽量少用。\n\n# EL表达式 #\n\n## EL概述和基本语法 ## \n\n EL表达式：expression language 表达式语言\n\n 要简化jsp中java代码开发。\n\n 它不是一种开发语言，是jsp中获取数据的一种规范\n\n 基本语法如下：\n \n  `${表达式}`\n\n## EL中的基础操作符 ##\n<table>\n<tr><td>操作符</td><td>\t描述</td></tr>\n<tr><td>.</td><td>\t访问一个Bean属性或者一个映射条目</td></tr>\n<tr><td>[]</td><td>\t访问一个数组或者链表的元素</td></tr>\n<tr><td>( )</td><td>\t组织一个子表达式以改变优先级</td></tr>\n<tr><td>+</td><td>\t加</td></tr>\n<tr><td>-</td><td>\t减或负</td></tr>\n<tr><td>*</td><td>\t乘</td></tr>\n<tr><td>/ or div</td><td>\t除</td></tr>\n<tr><td>% or mod</td><td>\t取模</td></tr>\n<tr><td>A?B:C</td><td>\t执行某种条件判断</td></tr>\n<tr><td>== or eq</td><td>\t测试是否相等</td></tr>\n<tr><td>!= or ne</td><td>\t测试是否不等</td></tr>\n<tr><td>< or lt</td><td>\t测试是否小于</td></tr>\n<tr><td>> or gt</td><td>\t测试是否大于</td></tr>\n<tr><td><= or le</td><td>\t测试是否小于等于</td></tr>\n<tr><td>>= or ge</td><td>\t测试是否大于等于</td></tr>\n<tr><td>&& or and</td><td>\t测试逻辑与</td></tr>\n<tr><td>|| or or</td><td>\t测试逻辑或</td></tr>\n<tr><td>! or not</td><td>\t测试取反</td></tr>\n<tr><td>empty</td><td>\t测试是否空值</td></tr>\n</table>\n\n*补：*\n\nEL表达式中的empty运算符用于判断某个对象是否为null或\"\"，结果为布尔类型，语法格式如下：\n\n    ${empty var}\n\n下列情况empty返回值为true。\n\n- var变量不存在，即没有定义，例如表达式${empty name},如果不存在 name 变量，就返回 true。\n- var变量的值为null，例如表达式 ${empty customer.name},如果customer.name的值为null，就返回true.\n- var变量引用集合（Set、Map、List）类型对象，并且在集合对象中不包含任何元素。\n\n## 防止HTML注入 ##\n\n*displayMessage.jsp*\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Insert title here</title>\n    </head>\n    <body>\n      <form action=\"servlet/ResultServlet\" method=\"post\">\n    用户名：<input type=\"text\" name=\"username\"><br>\n    留言：\n    <textarea rows=\"6\" cols=\"50\" name=\"message\"></textarea>\n    <br>\n    <input type=\"submit\" value=\"提交\">\n      </form>\n    </body>\n    </html>\n\n*ResultServlet.java*\n\n    package com.tq.servlet;\n    \n    import java.io.IOException;\n    import java.io.PrintWriter;\n    \n    import javax.servlet.ServletException;\n    import javax.servlet.http.HttpServlet;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    \n    public class ResultServlet extends HttpServlet {\n    \n    \tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n    \t\t\tthrows ServletException, IOException {\n    \t\tdoPost(request,response);\n    \t}\n    \n    \tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\t\tthrows ServletException, IOException {\n    \t\trequest.setCharacterEncoding(\"UTF-8\");\n    \t\tString name = request.getParameter(\"username\");\n    \t\tString message = request.getParameter(\"message\");\n    \t\trequest.setAttribute(\"name\", name);\n    \t\trequest.setAttribute(\"message\", message);\n    \t\trequest.getRequestDispatcher(\"/result.jsp\").forward(request, response);\n    \t\t}\n    \n    }\n\n*HTMLFilter.java*\n\n    package com.tq.util;\n    \n    public class HTMLFilter {\n    \n    \tpublic static String filter(String message){\n    \t\tif (message==null) {\n    \t\t\treturn (null);\n    \t\t}\n    \t\tchar content[] = new char[message.length()];\n    \t\tmessage.getChars(0, message.length(), content, 0);\n    \t\tStringBuffer result = new StringBuffer(content.length);\n    \t\tfor (int i = 0; i < content.length; i++) {\n    \t\t\tswitch (content[i]) {\n    \t\t\tcase '<':\n    \t\t\t\tresult.append(\"&lt;\");\n    \t\t\t\tbreak;\n    \t\t\tcase '>':\n    \t\t\t\tresult.append(\"&gt;\");\n    \t\t\t\tbreak;\n    \t\t\tcase '&':\n    \t\t\t\tresult.append(\"&amp;\");\n    \t\t\t\tbreak;\n    \t\t\tcase '\"':\n    \t\t\t\tresult.append(\"&quot;\");\n    \t\t\t\tbreak;\n    \t\t\tdefault:\n    \t\t\t\tresult.append(content[i]);\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t}\n    \t\treturn (result.toString());\n    \t}\n    }\n\n*mytaglib.tld*\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <taglib xmlns=\"http://java.sun.com/xml/ns/j2ee\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd\"\n    version=\"2.0\">\n     <tlib-version>1.0</tlib-version>\n     <short-name>function</short-name>\n     <uri>http://www.mutouspace.cn</uri>\n     <function>\n    <name>filter</name>\n    <function-class>\n       com.tq.util.HTMLFilter\n    </function-class>\n    <function-signature>\n       java.lang.String filter(java.lang.String)\n    </function-signature>\n     </function>\n    </taglib>\n\n\n*result.jsp*\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <%@ taglib prefix = \"terry\" uri=\"http://www.mutouspace.cn\"  %>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Insert title here</title>\n    </head>\n    <body>\n    \n     用户名:${name}<br> \n     留言：${terry:filter(message)}\n    </body>\n    </html>\n\n# JSP 标准标签库（JSTL） #\n\n待补充。。。。","source":"_posts/JAVA学习之Jsp.md","raw":"---\ntitle: JAVA学习之Jsp\ndate: 2017-03-29 20:41:07\ncategories: JAVA #文章文类\ntags: [JAVA,JSP]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n# Jsp 简介 #\n\n\n> JSP全称是Java Server Pages，它和servle技术一样，都是SUN公司定义的一种用于开发动态web资源的技术。**JSP实际上就是Servlet。**\n\n\n***jsp = html + java***\n\n**html:**静态内容\n\n**servlet：**服务器端的小应用程序。适合编写java逻辑代码，如果编写网页内容--苦逼。\n\n**jsp:**适合编写输出动态内容，但不适合编写java逻辑。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# jsp的原理 #\n\n![](http://olg3gwtbm.bkt.clouddn.com/jsp1.png)\n\n# JSP 语法(3、6、9) #\n\n> 接下来就是JSP的3（jsp的3个指令）6（jsp的6个动作）9（jsp的9个内置对象）了，简称：三六九。\n\n## JSP的脚本 ##\n1. 小脚本: <% java代码 %>\n2. 表达式: <%= 2+3 %> 等价于out.print(2+3);  \n3. 声明:   <%! %> 表示在类中定义全局成员，和静态块。\n\n1、脚本程序的语法格式及示例：\n\n    <% 代码片段 %>\n\n    <%\n    out.println(\"Your IP address is \" + request.getRemoteAddr());\n    %>\n\n2、表达式示例：\n\n    <%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"ISO-8859-1\"%>\n    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n    <html>\n      <head>\n      </head>\n  \n      <body>\n       <%\n       Date date = new Date();\n       out.write(date.toLocaleString());\n     %>\n    </body>\n    </html>\n\n3、声明示例：\n\n\n> 一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。\n\n    <%! int i = 0; %> \n    <%! int a, b, c; %> \n    <%! Circle a = new Circle(2.0); %> \n\n## JSP 指令（3） ##\n\nJSP中的三种指令标签：\n<table>\n<tr><td>指令</td><td>\t描述</td></tr>\n<tr><td>  page  </td><td>\t定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr>\n<tr><td>  include  </td><td>\t包含其他文件</td></tr>\n<tr><td> taglib  </td><td>\t引入标签库的定义</td></tr>\n</table>\n\n### Page指令 ###\n\n> Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。\n\nPage指令的语法格式：\n\n    <%@ 指令名称 属性1=“属性值1” 属性2=“属性值2”。。。%>\n    或者：\n    <%@ 指令名称 属性1=“属性值1”%>\n    <%@ 指令名称 属性2=“属性值2”%>\n\n如：\n\n    <%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n    或者：\n    <%@ page language=\"java\" %>\n    <%@ page import=\"java.util.*\" %>\n\n与Page指令相关的属性：\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>buffer</td><td>\tJSP中有javax.servlet.jsp.JspWriter输出字符流。指定out对象使用缓冲区的大小,默认是8kb.</td></tr>\n<tr><td>autoFlush</td><td>\t控制out对象的 缓存区</td></tr>\n<tr><td>contentType</td><td>\t指定当前JSP页面的MIME类型和字符编码，等同于response.setContextType(\"text/html;charset=utf-8\");</td></tr>\n<tr><td>errorPage</td><td>\t指定当JSP页面发生异常时需要转向的错误处理页面</td></tr>\n<tr><td>isErrorPage</td><td>\t指定当前页面是否可以作为另一个JSP页面的错误处理页面，默认是false。</td></tr>\n<tr><td>extends</td><td>\t指定servlet从哪一个类继承</td></tr>\n<tr><td>import</td><td>\t导入要使用的Java类,和java代码中的import是一样的</td></tr>\n<tr><td>info</td><td>\t定义JSP页面的描述信息</td></tr>\n<tr><td>isThreadSafe</td><td>\t指定对JSP页面的访问是否为线程安全</td></tr>\n<tr><td>language</td><td>\t定义JSP页面所用的脚本语言，默认是Java</td></tr>\n<tr><td>session</td><td>\t指定JSP页面是否使用session,默认值是true</td></tr>\n<tr><td>isELIgnored</td><td>\t指定是否执行EL表达式</td></tr>\n<tr><td>isScriptingEnabled</td><td>\t确定脚本元素能否被使用</td></tr>\n<tr><td>pageEncoding</td><td>\t告诉JSP引擎要翻译的文件使用的编码</td></tr>\n</table>\n\n **注：**\n\n 1. errorPage：errorPage=\"/uri\" 如果写“/”则代表*当前应用*的目录下，*绝对路径*。\n如果不写“/”则代表*相对路径*。\n\n\n### include指令 ###\n\n> JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。\n\n静态包含：把其它资源包含到当前页面中。\n\n    <%@ include file=\"/include/header.jsp\" %>\n\n动态包含：\n\n    <jsp:include page=\"/include/header.jsp\"></jsp:include>\n\n两者的区别：翻译的时间段不同\n\n前者：在翻译时就把两个文件合并\n\n后者：不会合并文件，当代码执行到include时，才包含另一个文件的内容。\n\n原则：能用静的就不用动的。\n\n### taglib指令 ###\n\n**作用：**在JSP页面中导入JSTL标签库。替换jsp中的java代码片段。\n\n    <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> \n\n## JSP 动作元素（6） ##\n\n>  使用标签的形式来表示一段java代码。\n\n - `<jsp:include >` 动态包含 \n - `<jsp:forward>` 请求转发 \n - `<jsp:param>` 设置请求参数\n - `<jsp:useBean>` 创建一个对象\n - `<jsp:setProperty>` 给指定的对象属性赋值\n - `<jsp:getProperty>` 取出指定对象的属性值\n\n\n### 动作元素(jsp:include) ###\n\n\n> <jsp:include>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。\n\n语法格式如下：\n\n    <jsp:include page=\"相对 URL 地址\" flush=\"true\" />\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>page</td><td>\t包含在页面中的相对URL地址。</td></tr>\n<tr><td>flush</td><td>\t布尔属性，定义在包含资源前是否刷新缓存区。</td></tr>\n</table>\n\n**实例:**\n\n*date.jsp文件代码：*\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <p>\n       今天的日期是: <%= (new java.util.Date()).toLocaleString()%>\n    </p>\n\n*main.jsp文件代码：*\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title>123</title>\n    </head>\n    <body>\n    \n    <h2>include 动作实例</h2>\n    <jsp:include page=\"date.jsp\" flush=\"true\" />\n    \n    </body>\n    </html>\n\n### 动作元素(jsp:useBean) ###\n\njsp:useBean动作最简单的语法为：\n\n     <!-- 模板 -->\n    <jsp:useBean id=\"name\" class=\"package.class\" />\n     <!-- 示例 -->\n    <jsp:useBean id=\"stu1\" class=\"com.itheima.entity.Student\"></jsp:useBean>\n\n**注：**\n\n- class中填写的是Bean类的完整路径\n- id 为定义的的Bean变量名，如 Bean b = new Bean()中的b;\n\n### 动作元素(jsp:setProperty) ###\n\n> jsp:setProperty用来设置已经实例化的Bean对象的属性.\n\n\n\t <jsp:setProperty property=\"name\" name=\"stu1\" value=\"jerry\"/>\n\njsp:setProperty动作有下面四个属性,如下表：\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>name</td><td>\tname属性是必需的。它表示要设置属性的是哪个Bean。</td></tr>\n<tr><td>property</td><td>\tproperty属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是\"*\"，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr>\n<tr><td>value</td><td>\tvalue 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如\"true\"）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如\"42\"）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。</td></tr>\n<tr><td>param</td><td>\tparam 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr>\n</table>\n\n### 动作元素(jsp:getProperty) ###\n\n> jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。\n\n语法格式如下：\n\n\t <jsp:getProperty property=\"name\" name=\"stu1\"/>\n\t \n下表是与getProperty相关联的属性：\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>name</td><td>\t要检索的Bean属性名称。Bean必须已定义。</td></tr>\n<tr><td>property</td><td>\t表示要提取Bean属性的值</td></tr>\n</table>\n\n**实例：**\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title>useBean</title>\n    </head>\n    <body>\n    \n    <h2>Jsp 使用 JavaBean 实例</h2>\n    <jsp:useBean id=\"test\" class=\"com.runoob.main.TestBean\" />\n     \n    <jsp:setProperty name=\"test\" \n    property=\"message\" \n    value=\"教程...\" />\n     \n    <p>输出信息....</p>\n     \n    <jsp:getProperty name=\"test\" property=\"message\" />\n    \n    </body>\n    </html>\n\n\n### 动作元素(jsp:forward) ###\n\n> jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。\n\n语法格式如下所示：\n\n    <jsp:forward page=\"相对 URL 地址\" />\n\n以下是forward相关联的属性：\n<table>\n<tr><td>属性</td><td>\t描述</td></tr>\n<tr><td>page</td><td>\tpage属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.</td></tr></table>\n\n**实例**\ndate.jsp 文件代码如下：\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <p>\n       今天的日期是: <%= (new java.util.Date()).toLocaleString()%>\n    </p>\n\nmain.jsp文件代码：\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    </head>\n    <body>\n    \n    <h2>forward 动作实例</h2>\n    <jsp:forward page=\"date.jsp\" />\n    </body>\n    </html>\n\n\n## JSP 隐式对象(9) ##\n\n> JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。\n\nJSP所支持的九大隐式对象：\n<table>\n<tr><td>对象</td><td>\t描述</td></tr>\n<tr><td>request</td><td>\tHttpServletRequest类的实例,它包含了有关浏览器请求的信息，并且提供了几个用于获取cookie, header, 和session数据的有用的方法。</td></tr>\n<tr><td>response</td><td>\tHttpServletResponse类的实例，并提供了几个用于设置送回\n浏览器的响应的方法（如cookies,头信息等）。</td></tr>\n<tr><td>out</td><td>\tPrintWriter类的实例，用于把结果输出至网页上</td></tr>\n<tr><td>session</td><td>\tHttpSession类的实例,Session可以存贮用户的状态信息。</td></tr>\n<tr><td>application</td><td>\tServletContext类的实例，与应用上下文有关,有助于查找有关servlet引擎和servlet环境的信息。</td></tr>\n<tr><td>config</td><td>\tServletConfig类的实例,该对象用于存取servlet实例的初始化参数。</td></tr>\n<tr><td>pageContext</td><td>\tPageContext类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr>\n<tr><td>page</td><td>\t类似于Java类中的this关键字，表示从该页面产生的一个servlet实例。</td></tr>\n<tr><td>Exception</td><td>\tException类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr>\n</table>\n\n**pageContext(重要):**\n1、本身也是一个域对象：它可以操作其它三个域对象（`request` `session` `application`）的数据.\n\n# 四大域对象 #\n\nPageContext : pageConext 存放的数据在当前页面有效。开发时使用较少。\n\nServletRequest: request  存放的数据在一次请求（转发）内有效。使用非常多。\n\nHttpSession: session 存放的数据在一次会话中有效。使用的比较多。如：存放用户的登录信息，购物车功能。\n\nServletContext: application 存放的数据在整个应用范围内都有效。因为范围太大，应尽量少用。\n\n# EL表达式 #\n\n## EL概述和基本语法 ## \n\n EL表达式：expression language 表达式语言\n\n 要简化jsp中java代码开发。\n\n 它不是一种开发语言，是jsp中获取数据的一种规范\n\n 基本语法如下：\n \n  `${表达式}`\n\n## EL中的基础操作符 ##\n<table>\n<tr><td>操作符</td><td>\t描述</td></tr>\n<tr><td>.</td><td>\t访问一个Bean属性或者一个映射条目</td></tr>\n<tr><td>[]</td><td>\t访问一个数组或者链表的元素</td></tr>\n<tr><td>( )</td><td>\t组织一个子表达式以改变优先级</td></tr>\n<tr><td>+</td><td>\t加</td></tr>\n<tr><td>-</td><td>\t减或负</td></tr>\n<tr><td>*</td><td>\t乘</td></tr>\n<tr><td>/ or div</td><td>\t除</td></tr>\n<tr><td>% or mod</td><td>\t取模</td></tr>\n<tr><td>A?B:C</td><td>\t执行某种条件判断</td></tr>\n<tr><td>== or eq</td><td>\t测试是否相等</td></tr>\n<tr><td>!= or ne</td><td>\t测试是否不等</td></tr>\n<tr><td>< or lt</td><td>\t测试是否小于</td></tr>\n<tr><td>> or gt</td><td>\t测试是否大于</td></tr>\n<tr><td><= or le</td><td>\t测试是否小于等于</td></tr>\n<tr><td>>= or ge</td><td>\t测试是否大于等于</td></tr>\n<tr><td>&& or and</td><td>\t测试逻辑与</td></tr>\n<tr><td>|| or or</td><td>\t测试逻辑或</td></tr>\n<tr><td>! or not</td><td>\t测试取反</td></tr>\n<tr><td>empty</td><td>\t测试是否空值</td></tr>\n</table>\n\n*补：*\n\nEL表达式中的empty运算符用于判断某个对象是否为null或\"\"，结果为布尔类型，语法格式如下：\n\n    ${empty var}\n\n下列情况empty返回值为true。\n\n- var变量不存在，即没有定义，例如表达式${empty name},如果不存在 name 变量，就返回 true。\n- var变量的值为null，例如表达式 ${empty customer.name},如果customer.name的值为null，就返回true.\n- var变量引用集合（Set、Map、List）类型对象，并且在集合对象中不包含任何元素。\n\n## 防止HTML注入 ##\n\n*displayMessage.jsp*\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Insert title here</title>\n    </head>\n    <body>\n      <form action=\"servlet/ResultServlet\" method=\"post\">\n    用户名：<input type=\"text\" name=\"username\"><br>\n    留言：\n    <textarea rows=\"6\" cols=\"50\" name=\"message\"></textarea>\n    <br>\n    <input type=\"submit\" value=\"提交\">\n      </form>\n    </body>\n    </html>\n\n*ResultServlet.java*\n\n    package com.tq.servlet;\n    \n    import java.io.IOException;\n    import java.io.PrintWriter;\n    \n    import javax.servlet.ServletException;\n    import javax.servlet.http.HttpServlet;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    \n    public class ResultServlet extends HttpServlet {\n    \n    \tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n    \t\t\tthrows ServletException, IOException {\n    \t\tdoPost(request,response);\n    \t}\n    \n    \tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\t\tthrows ServletException, IOException {\n    \t\trequest.setCharacterEncoding(\"UTF-8\");\n    \t\tString name = request.getParameter(\"username\");\n    \t\tString message = request.getParameter(\"message\");\n    \t\trequest.setAttribute(\"name\", name);\n    \t\trequest.setAttribute(\"message\", message);\n    \t\trequest.getRequestDispatcher(\"/result.jsp\").forward(request, response);\n    \t\t}\n    \n    }\n\n*HTMLFilter.java*\n\n    package com.tq.util;\n    \n    public class HTMLFilter {\n    \n    \tpublic static String filter(String message){\n    \t\tif (message==null) {\n    \t\t\treturn (null);\n    \t\t}\n    \t\tchar content[] = new char[message.length()];\n    \t\tmessage.getChars(0, message.length(), content, 0);\n    \t\tStringBuffer result = new StringBuffer(content.length);\n    \t\tfor (int i = 0; i < content.length; i++) {\n    \t\t\tswitch (content[i]) {\n    \t\t\tcase '<':\n    \t\t\t\tresult.append(\"&lt;\");\n    \t\t\t\tbreak;\n    \t\t\tcase '>':\n    \t\t\t\tresult.append(\"&gt;\");\n    \t\t\t\tbreak;\n    \t\t\tcase '&':\n    \t\t\t\tresult.append(\"&amp;\");\n    \t\t\t\tbreak;\n    \t\t\tcase '\"':\n    \t\t\t\tresult.append(\"&quot;\");\n    \t\t\t\tbreak;\n    \t\t\tdefault:\n    \t\t\t\tresult.append(content[i]);\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t}\n    \t\treturn (result.toString());\n    \t}\n    }\n\n*mytaglib.tld*\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <taglib xmlns=\"http://java.sun.com/xml/ns/j2ee\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd\"\n    version=\"2.0\">\n     <tlib-version>1.0</tlib-version>\n     <short-name>function</short-name>\n     <uri>http://www.mutouspace.cn</uri>\n     <function>\n    <name>filter</name>\n    <function-class>\n       com.tq.util.HTMLFilter\n    </function-class>\n    <function-signature>\n       java.lang.String filter(java.lang.String)\n    </function-signature>\n     </function>\n    </taglib>\n\n\n*result.jsp*\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n    <%@ taglib prefix = \"terry\" uri=\"http://www.mutouspace.cn\"  %>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Insert title here</title>\n    </head>\n    <body>\n    \n     用户名:${name}<br> \n     留言：${terry:filter(message)}\n    </body>\n    </html>\n\n# JSP 标准标签库（JSTL） #\n\n待补充。。。。","slug":"JAVA学习之Jsp","published":1,"updated":"2017-04-15T09:23:31.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6v0000o64xtnvio2q4n","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"Jsp-简介\"><a href=\"#Jsp-简介\" class=\"headerlink\" title=\"Jsp 简介\"></a>Jsp 简介</h1><blockquote>\n<p>JSP全称是Java Server Pages，它和servle技术一样，都是SUN公司定义的一种用于开发动态web资源的技术。<strong>JSP实际上就是Servlet。</strong></p>\n</blockquote>\n<p><strong><em>jsp = html + java</em></strong></p>\n<p><strong>html:</strong>静态内容</p>\n<p><strong>servlet：</strong>服务器端的小应用程序。适合编写java逻辑代码，如果编写网页内容–苦逼。</p>\n<p><strong>jsp:</strong>适合编写输出动态内容，但不适合编写java逻辑。</p>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"jsp的原理\"><a href=\"#jsp的原理\" class=\"headerlink\" title=\"jsp的原理\"></a>jsp的原理</h1><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/jsp1.png\" alt=\"\"></p>\n<h1 id=\"JSP-语法-3、6、9\"><a href=\"#JSP-语法-3、6、9\" class=\"headerlink\" title=\"JSP 语法(3、6、9)\"></a>JSP 语法(3、6、9)</h1><blockquote>\n<p>接下来就是JSP的3（jsp的3个指令）6（jsp的6个动作）9（jsp的9个内置对象）了，简称：三六九。</p>\n</blockquote>\n<h2 id=\"JSP的脚本\"><a href=\"#JSP的脚本\" class=\"headerlink\" title=\"JSP的脚本\"></a>JSP的脚本</h2><ol>\n<li>小脚本: &lt;% java代码 %&gt;</li>\n<li>表达式: &lt;%= 2+3 %&gt; 等价于out.print(2+3);  </li>\n<li>声明:   &lt;%! %&gt; 表示在类中定义全局成员，和静态块。</li>\n</ol>\n<p>1、脚本程序的语法格式及示例：</p>\n<pre><code>&lt;% 代码片段 %&gt;\n\n&lt;%\nout.println(&quot;Your IP address is &quot; + request.getRemoteAddr());\n%&gt;\n</code></pre><p>2、表达式示例：</p>\n<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;ISO-8859-1&quot;%&gt;\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n   &lt;%\n   Date date = new Date();\n   out.write(date.toLocaleString());\n %&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>3、声明示例：</p>\n<blockquote>\n<p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。</p>\n</blockquote>\n<pre><code>&lt;%! int i = 0; %&gt; \n&lt;%! int a, b, c; %&gt; \n&lt;%! Circle a = new Circle(2.0); %&gt; \n</code></pre><h2 id=\"JSP-指令（3）\"><a href=\"#JSP-指令（3）\" class=\"headerlink\" title=\"JSP 指令（3）\"></a>JSP 指令（3）</h2><p>JSP中的三种指令标签：</p>\n<table><br><tr><td>指令</td><td>    描述</td></tr><br><tr><td>  page  </td><td>    定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><br><tr><td>  include  </td><td>    包含其他文件</td></tr><br><tr><td> taglib  </td><td>    引入标签库的定义</td></tr><br></table>\n\n<h3 id=\"Page指令\"><a href=\"#Page指令\" class=\"headerlink\" title=\"Page指令\"></a>Page指令</h3><blockquote>\n<p>Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。</p>\n</blockquote>\n<p>Page指令的语法格式：</p>\n<pre><code>&lt;%@ 指令名称 属性1=“属性值1” 属性2=“属性值2”。。。%&gt;\n或者：\n&lt;%@ 指令名称 属性1=“属性值1”%&gt;\n&lt;%@ 指令名称 属性2=“属性值2”%&gt;\n</code></pre><p>如：</p>\n<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;\n或者：\n&lt;%@ page language=&quot;java&quot; %&gt;\n&lt;%@ page import=&quot;java.util.*&quot; %&gt;\n</code></pre><p>与Page指令相关的属性：</p>\n<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>buffer</td><td>    JSP中有javax.servlet.jsp.JspWriter输出字符流。指定out对象使用缓冲区的大小,默认是8kb.</td></tr><br><tr><td>autoFlush</td><td>    控制out对象的 缓存区</td></tr><br><tr><td>contentType</td><td>    指定当前JSP页面的MIME类型和字符编码，等同于response.setContextType(“text/html;charset=utf-8”);</td></tr><br><tr><td>errorPage</td><td>    指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><br><tr><td>isErrorPage</td><td>    指定当前页面是否可以作为另一个JSP页面的错误处理页面，默认是false。</td></tr><br><tr><td>extends</td><td>    指定servlet从哪一个类继承</td></tr><br><tr><td>import</td><td>    导入要使用的Java类,和java代码中的import是一样的</td></tr><br><tr><td>info</td><td>    定义JSP页面的描述信息</td></tr><br><tr><td>isThreadSafe</td><td>    指定对JSP页面的访问是否为线程安全</td></tr><br><tr><td>language</td><td>    定义JSP页面所用的脚本语言，默认是Java</td></tr><br><tr><td>session</td><td>    指定JSP页面是否使用session,默认值是true</td></tr><br><tr><td>isELIgnored</td><td>    指定是否执行EL表达式</td></tr><br><tr><td>isScriptingEnabled</td><td>    确定脚本元素能否被使用</td></tr><br><tr><td>pageEncoding</td><td>    告诉JSP引擎要翻译的文件使用的编码</td></tr><br></table>\n\n<p> <strong>注：</strong></p>\n<ol>\n<li>errorPage：errorPage=”/uri” 如果写“/”则代表<em>当前应用</em>的目录下，<em>绝对路径</em>。<br>如果不写“/”则代表<em>相对路径</em>。</li>\n</ol>\n<h3 id=\"include指令\"><a href=\"#include指令\" class=\"headerlink\" title=\"include指令\"></a>include指令</h3><blockquote>\n<p>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。</p>\n</blockquote>\n<p>静态包含：把其它资源包含到当前页面中。</p>\n<pre><code>&lt;%@ include file=&quot;/include/header.jsp&quot; %&gt;\n</code></pre><p>动态包含：</p>\n<pre><code>&lt;jsp:include page=&quot;/include/header.jsp&quot;&gt;&lt;/jsp:include&gt;\n</code></pre><p>两者的区别：翻译的时间段不同</p>\n<p>前者：在翻译时就把两个文件合并</p>\n<p>后者：不会合并文件，当代码执行到include时，才包含另一个文件的内容。</p>\n<p>原则：能用静的就不用动的。</p>\n<h3 id=\"taglib指令\"><a href=\"#taglib指令\" class=\"headerlink\" title=\"taglib指令\"></a>taglib指令</h3><p><strong>作用：</strong>在JSP页面中导入JSTL标签库。替换jsp中的java代码片段。</p>\n<pre><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt; \n</code></pre><h2 id=\"JSP-动作元素（6）\"><a href=\"#JSP-动作元素（6）\" class=\"headerlink\" title=\"JSP 动作元素（6）\"></a>JSP 动作元素（6）</h2><blockquote>\n<p> 使用标签的形式来表示一段java代码。</p>\n</blockquote>\n<ul>\n<li><code>&lt;jsp:include &gt;</code> 动态包含 </li>\n<li><code>&lt;jsp:forward&gt;</code> 请求转发 </li>\n<li><code>&lt;jsp:param&gt;</code> 设置请求参数</li>\n<li><code>&lt;jsp:useBean&gt;</code> 创建一个对象</li>\n<li><code>&lt;jsp:setProperty&gt;</code> 给指定的对象属性赋值</li>\n<li><code>&lt;jsp:getProperty&gt;</code> 取出指定对象的属性值</li>\n</ul>\n<h3 id=\"动作元素-jsp-include\"><a href=\"#动作元素-jsp-include\" class=\"headerlink\" title=\"动作元素(jsp:include)\"></a>动作元素(jsp:include)</h3><blockquote>\n<p><jsp:include>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。</jsp:include></p>\n</blockquote>\n<p>语法格式如下：</p>\n<pre><code>&lt;jsp:include page=&quot;相对 URL 地址&quot; flush=&quot;true&quot; /&gt;\n</code></pre><table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>page</td><td>    包含在页面中的相对URL地址。</td></tr><br><tr><td>flush</td><td>    布尔属性，定义在包含资源前是否刷新缓存区。</td></tr><br></table>\n\n<p><strong>实例:</strong></p>\n<p><em>date.jsp文件代码：</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;p&gt;\n   今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;\n&lt;/p&gt;\n</code></pre><p><em>main.jsp文件代码：</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;123&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;include 动作实例&lt;/h2&gt;\n&lt;jsp:include page=&quot;date.jsp&quot; flush=&quot;true&quot; /&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"动作元素-jsp-useBean\"><a href=\"#动作元素-jsp-useBean\" class=\"headerlink\" title=\"动作元素(jsp:useBean)\"></a>动作元素(jsp:useBean)</h3><p>jsp:useBean动作最简单的语法为：</p>\n<pre><code> &lt;!-- 模板 --&gt;\n&lt;jsp:useBean id=&quot;name&quot; class=&quot;package.class&quot; /&gt;\n &lt;!-- 示例 --&gt;\n&lt;jsp:useBean id=&quot;stu1&quot; class=&quot;com.itheima.entity.Student&quot;&gt;&lt;/jsp:useBean&gt;\n</code></pre><p><strong>注：</strong></p>\n<ul>\n<li>class中填写的是Bean类的完整路径</li>\n<li>id 为定义的的Bean变量名，如 Bean b = new Bean()中的b;</li>\n</ul>\n<h3 id=\"动作元素-jsp-setProperty\"><a href=\"#动作元素-jsp-setProperty\" class=\"headerlink\" title=\"动作元素(jsp:setProperty)\"></a>动作元素(jsp:setProperty)</h3><blockquote>\n<p>jsp:setProperty用来设置已经实例化的Bean对象的属性.</p>\n</blockquote>\n<pre><code>&lt;jsp:setProperty property=&quot;name&quot; name=&quot;stu1&quot; value=&quot;jerry&quot;/&gt;\n</code></pre><p>jsp:setProperty动作有下面四个属性,如下表：</p>\n<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>name</td><td>    name属性是必需的。它表示要设置属性的是哪个Bean。</td></tr><br><tr><td>property</td><td>    property属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是”*”，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr><br><tr><td>value</td><td>    value 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如”true”）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如”42”）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。</td></tr><br><tr><td>param</td><td>    param 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr><br></table>\n\n<h3 id=\"动作元素-jsp-getProperty\"><a href=\"#动作元素-jsp-getProperty\" class=\"headerlink\" title=\"动作元素(jsp:getProperty)\"></a>动作元素(jsp:getProperty)</h3><blockquote>\n<p>jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。</p>\n</blockquote>\n<p>语法格式如下：</p>\n<pre><code>&lt;jsp:getProperty property=&quot;name&quot; name=&quot;stu1&quot;/&gt;\n</code></pre><p>下表是与getProperty相关联的属性：</p>\n<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>name</td><td>    要检索的Bean属性名称。Bean必须已定义。</td></tr><br><tr><td>property</td><td>    表示要提取Bean属性的值</td></tr><br></table>\n\n<p><strong>实例：</strong></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;useBean&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;Jsp 使用 JavaBean 实例&lt;/h2&gt;\n&lt;jsp:useBean id=&quot;test&quot; class=&quot;com.runoob.main.TestBean&quot; /&gt;\n\n&lt;jsp:setProperty name=&quot;test&quot; \nproperty=&quot;message&quot; \nvalue=&quot;教程...&quot; /&gt;\n\n&lt;p&gt;输出信息....&lt;/p&gt;\n\n&lt;jsp:getProperty name=&quot;test&quot; property=&quot;message&quot; /&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"动作元素-jsp-forward\"><a href=\"#动作元素-jsp-forward\" class=\"headerlink\" title=\"动作元素(jsp:forward)\"></a>动作元素(jsp:forward)</h3><blockquote>\n<p>jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。</p>\n</blockquote>\n<p>语法格式如下所示：</p>\n<pre><code>&lt;jsp:forward page=&quot;相对 URL 地址&quot; /&gt;\n</code></pre><p>以下是forward相关联的属性：</p>\n<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>page</td><td>    page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.</td></tr></table>\n\n<p><strong>实例</strong><br>date.jsp 文件代码如下：</p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;p&gt;\n   今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;\n&lt;/p&gt;\n</code></pre><p>main.jsp文件代码：</p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;forward 动作实例&lt;/h2&gt;\n&lt;jsp:forward page=&quot;date.jsp&quot; /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"JSP-隐式对象-9\"><a href=\"#JSP-隐式对象-9\" class=\"headerlink\" title=\"JSP 隐式对象(9)\"></a>JSP 隐式对象(9)</h2><blockquote>\n<p>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p>\n</blockquote>\n<p>JSP所支持的九大隐式对象：</p>\n<table><br><tr><td>对象</td><td>    描述</td></tr><br><tr><td>request</td><td>    HttpServletRequest类的实例,它包含了有关浏览器请求的信息，并且提供了几个用于获取cookie, header, 和session数据的有用的方法。</td></tr><br><tr><td>response</td><td>    HttpServletResponse类的实例，并提供了几个用于设置送回<br>浏览器的响应的方法（如cookies,头信息等）。</td></tr><br><tr><td>out</td><td>    PrintWriter类的实例，用于把结果输出至网页上</td></tr><br><tr><td>session</td><td>    HttpSession类的实例,Session可以存贮用户的状态信息。</td></tr><br><tr><td>application</td><td>    ServletContext类的实例，与应用上下文有关,有助于查找有关servlet引擎和servlet环境的信息。</td></tr><br><tr><td>config</td><td>    ServletConfig类的实例,该对象用于存取servlet实例的初始化参数。</td></tr><br><tr><td>pageContext</td><td>    PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><br><tr><td>page</td><td>    类似于Java类中的this关键字，表示从该页面产生的一个servlet实例。</td></tr><br><tr><td>Exception</td><td>    Exception类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr><br></table>\n\n<p><strong>pageContext(重要):</strong><br>1、本身也是一个域对象：它可以操作其它三个域对象（<code>request</code> <code>session</code> <code>application</code>）的数据.</p>\n<h1 id=\"四大域对象\"><a href=\"#四大域对象\" class=\"headerlink\" title=\"四大域对象\"></a>四大域对象</h1><p>PageContext : pageConext 存放的数据在当前页面有效。开发时使用较少。</p>\n<p>ServletRequest: request  存放的数据在一次请求（转发）内有效。使用非常多。</p>\n<p>HttpSession: session 存放的数据在一次会话中有效。使用的比较多。如：存放用户的登录信息，购物车功能。</p>\n<p>ServletContext: application 存放的数据在整个应用范围内都有效。因为范围太大，应尽量少用。</p>\n<h1 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h1><h2 id=\"EL概述和基本语法\"><a href=\"#EL概述和基本语法\" class=\"headerlink\" title=\"EL概述和基本语法\"></a>EL概述和基本语法</h2><p> EL表达式：expression language 表达式语言</p>\n<p> 要简化jsp中java代码开发。</p>\n<p> 它不是一种开发语言，是jsp中获取数据的一种规范</p>\n<p> 基本语法如下：</p>\n<p>  <code>${表达式}</code></p>\n<h2 id=\"EL中的基础操作符\"><a href=\"#EL中的基础操作符\" class=\"headerlink\" title=\"EL中的基础操作符\"></a>EL中的基础操作符</h2><table><br><tr><td>操作符</td><td>    描述</td></tr><br><tr><td>.</td><td>    访问一个Bean属性或者一个映射条目</td></tr><br><tr><td>[]</td><td>    访问一个数组或者链表的元素</td></tr><br><tr><td>( )</td><td>    组织一个子表达式以改变优先级</td></tr><br><tr><td>+</td><td>    加</td></tr><br><tr><td>-</td><td>    减或负</td></tr><br><tr><td>*</td><td>    乘</td></tr><br><tr><td>/ or div</td><td>    除</td></tr><br><tr><td>% or mod</td><td>    取模</td></tr><br><tr><td>A?B:C</td><td>    执行某种条件判断</td></tr><br><tr><td>== or eq</td><td>    测试是否相等</td></tr><br><tr><td>!= or ne</td><td>    测试是否不等</td></tr><br><tr><td>&lt; or lt</td><td>    测试是否小于</td></tr><br><tr><td>&gt; or gt</td><td>    测试是否大于</td></tr><br><tr><td>&lt;= or le</td><td>    测试是否小于等于</td></tr><br><tr><td>&gt;= or ge</td><td>    测试是否大于等于</td></tr><br><tr><td>&amp;&amp; or and</td><td>    测试逻辑与</td></tr><br><tr><td>|| or or</td><td>    测试逻辑或</td></tr><br><tr><td>! or not</td><td>    测试取反</td></tr><br><tr><td>empty</td><td>    测试是否空值</td></tr><br></table>\n\n<p><em>补：</em></p>\n<p>EL表达式中的empty运算符用于判断某个对象是否为null或””，结果为布尔类型，语法格式如下：</p>\n<pre><code>${empty var}\n</code></pre><p>下列情况empty返回值为true。</p>\n<ul>\n<li>var变量不存在，即没有定义，例如表达式${empty name},如果不存在 name 变量，就返回 true。</li>\n<li>var变量的值为null，例如表达式 ${empty customer.name},如果customer.name的值为null，就返回true.</li>\n<li>var变量引用集合（Set、Map、List）类型对象，并且在集合对象中不包含任何元素。</li>\n</ul>\n<h2 id=\"防止HTML注入\"><a href=\"#防止HTML注入\" class=\"headerlink\" title=\"防止HTML注入\"></a>防止HTML注入</h2><p><em>displayMessage.jsp</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;form action=&quot;servlet/ResultServlet&quot; method=&quot;post&quot;&gt;\n用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;\n留言：\n&lt;textarea rows=&quot;6&quot; cols=&quot;50&quot; name=&quot;message&quot;&gt;&lt;/textarea&gt;\n&lt;br&gt;\n&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n  &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><em>ResultServlet.java</em></p>\n<pre><code>package com.tq.servlet;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class ResultServlet extends HttpServlet {\n\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request,response);\n    }\n\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        request.setCharacterEncoding(&quot;UTF-8&quot;);\n        String name = request.getParameter(&quot;username&quot;);\n        String message = request.getParameter(&quot;message&quot;);\n        request.setAttribute(&quot;name&quot;, name);\n        request.setAttribute(&quot;message&quot;, message);\n        request.getRequestDispatcher(&quot;/result.jsp&quot;).forward(request, response);\n        }\n\n}\n</code></pre><p><em>HTMLFilter.java</em></p>\n<pre><code>package com.tq.util;\n\npublic class HTMLFilter {\n\n    public static String filter(String message){\n        if (message==null) {\n            return (null);\n        }\n        char content[] = new char[message.length()];\n        message.getChars(0, message.length(), content, 0);\n        StringBuffer result = new StringBuffer(content.length);\n        for (int i = 0; i &lt; content.length; i++) {\n            switch (content[i]) {\n            case &apos;&lt;&apos;:\n                result.append(&quot;&amp;lt;&quot;);\n                break;\n            case &apos;&gt;&apos;:\n                result.append(&quot;&amp;gt;&quot;);\n                break;\n            case &apos;&amp;&apos;:\n                result.append(&quot;&amp;amp;&quot;);\n                break;\n            case &apos;&quot;&apos;:\n                result.append(&quot;&amp;quot;&quot;);\n                break;\n            default:\n                result.append(content[i]);\n                break;\n            }\n        }\n        return (result.toString());\n    }\n}\n</code></pre><p><em>mytaglib.tld</em></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;  \nxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  \nxsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;\nversion=&quot;2.0&quot;&gt;\n &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;\n &lt;short-name&gt;function&lt;/short-name&gt;\n &lt;uri&gt;http://www.mutouspace.cn&lt;/uri&gt;\n &lt;function&gt;\n&lt;name&gt;filter&lt;/name&gt;\n&lt;function-class&gt;\n   com.tq.util.HTMLFilter\n&lt;/function-class&gt;\n&lt;function-signature&gt;\n   java.lang.String filter(java.lang.String)\n&lt;/function-signature&gt;\n &lt;/function&gt;\n&lt;/taglib&gt;\n</code></pre><p><em>result.jsp</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;%@ taglib prefix = &quot;terry&quot; uri=&quot;http://www.mutouspace.cn&quot;  %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n 用户名:${name}&lt;br&gt; \n 留言：${terry:filter(message)}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h1 id=\"JSP-标准标签库（JSTL）\"><a href=\"#JSP-标准标签库（JSTL）\" class=\"headerlink\" title=\"JSP 标准标签库（JSTL）\"></a>JSP 标准标签库（JSTL）</h1><p>待补充。。。。</p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"Jsp-简介\"><a href=\"#Jsp-简介\" class=\"headerlink\" title=\"Jsp 简介\"></a>Jsp 简介</h1><blockquote>\n<p>JSP全称是Java Server Pages，它和servle技术一样，都是SUN公司定义的一种用于开发动态web资源的技术。<strong>JSP实际上就是Servlet。</strong></p>\n</blockquote>\n<p><strong><em>jsp = html + java</em></strong></p>\n<p><strong>html:</strong>静态内容</p>\n<p><strong>servlet：</strong>服务器端的小应用程序。适合编写java逻辑代码，如果编写网页内容–苦逼。</p>\n<p><strong>jsp:</strong>适合编写输出动态内容，但不适合编写java逻辑。</p></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"jsp的原理\"><a href=\"#jsp的原理\" class=\"headerlink\" title=\"jsp的原理\"></a>jsp的原理</h1><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/jsp1.png\" alt=\"\"></p>\n<h1 id=\"JSP-语法-3、6、9\"><a href=\"#JSP-语法-3、6、9\" class=\"headerlink\" title=\"JSP 语法(3、6、9)\"></a>JSP 语法(3、6、9)</h1><blockquote>\n<p>接下来就是JSP的3（jsp的3个指令）6（jsp的6个动作）9（jsp的9个内置对象）了，简称：三六九。</p>\n</blockquote>\n<h2 id=\"JSP的脚本\"><a href=\"#JSP的脚本\" class=\"headerlink\" title=\"JSP的脚本\"></a>JSP的脚本</h2><ol>\n<li>小脚本: &lt;% java代码 %&gt;</li>\n<li>表达式: &lt;%= 2+3 %&gt; 等价于out.print(2+3);  </li>\n<li>声明:   &lt;%! %&gt; 表示在类中定义全局成员，和静态块。</li>\n</ol>\n<p>1、脚本程序的语法格式及示例：</p>\n<pre><code>&lt;% 代码片段 %&gt;\n\n&lt;%\nout.println(&quot;Your IP address is &quot; + request.getRemoteAddr());\n%&gt;\n</code></pre><p>2、表达式示例：</p>\n<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;ISO-8859-1&quot;%&gt;\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n   &lt;%\n   Date date = new Date();\n   out.write(date.toLocaleString());\n %&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>3、声明示例：</p>\n<blockquote>\n<p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。</p>\n</blockquote>\n<pre><code>&lt;%! int i = 0; %&gt; \n&lt;%! int a, b, c; %&gt; \n&lt;%! Circle a = new Circle(2.0); %&gt; \n</code></pre><h2 id=\"JSP-指令（3）\"><a href=\"#JSP-指令（3）\" class=\"headerlink\" title=\"JSP 指令（3）\"></a>JSP 指令（3）</h2><p>JSP中的三种指令标签：</p>\n<table><br><tr><td>指令</td><td>    描述</td></tr><br><tr><td>  page  </td><td>    定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><br><tr><td>  include  </td><td>    包含其他文件</td></tr><br><tr><td> taglib  </td><td>    引入标签库的定义</td></tr><br></table>\n\n<h3 id=\"Page指令\"><a href=\"#Page指令\" class=\"headerlink\" title=\"Page指令\"></a>Page指令</h3><blockquote>\n<p>Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。</p>\n</blockquote>\n<p>Page指令的语法格式：</p>\n<pre><code>&lt;%@ 指令名称 属性1=“属性值1” 属性2=“属性值2”。。。%&gt;\n或者：\n&lt;%@ 指令名称 属性1=“属性值1”%&gt;\n&lt;%@ 指令名称 属性2=“属性值2”%&gt;\n</code></pre><p>如：</p>\n<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;\n或者：\n&lt;%@ page language=&quot;java&quot; %&gt;\n&lt;%@ page import=&quot;java.util.*&quot; %&gt;\n</code></pre><p>与Page指令相关的属性：</p>\n<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>buffer</td><td>    JSP中有javax.servlet.jsp.JspWriter输出字符流。指定out对象使用缓冲区的大小,默认是8kb.</td></tr><br><tr><td>autoFlush</td><td>    控制out对象的 缓存区</td></tr><br><tr><td>contentType</td><td>    指定当前JSP页面的MIME类型和字符编码，等同于response.setContextType(“text/html;charset=utf-8”);</td></tr><br><tr><td>errorPage</td><td>    指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><br><tr><td>isErrorPage</td><td>    指定当前页面是否可以作为另一个JSP页面的错误处理页面，默认是false。</td></tr><br><tr><td>extends</td><td>    指定servlet从哪一个类继承</td></tr><br><tr><td>import</td><td>    导入要使用的Java类,和java代码中的import是一样的</td></tr><br><tr><td>info</td><td>    定义JSP页面的描述信息</td></tr><br><tr><td>isThreadSafe</td><td>    指定对JSP页面的访问是否为线程安全</td></tr><br><tr><td>language</td><td>    定义JSP页面所用的脚本语言，默认是Java</td></tr><br><tr><td>session</td><td>    指定JSP页面是否使用session,默认值是true</td></tr><br><tr><td>isELIgnored</td><td>    指定是否执行EL表达式</td></tr><br><tr><td>isScriptingEnabled</td><td>    确定脚本元素能否被使用</td></tr><br><tr><td>pageEncoding</td><td>    告诉JSP引擎要翻译的文件使用的编码</td></tr><br></table>\n\n<p> <strong>注：</strong></p>\n<ol>\n<li>errorPage：errorPage=”/uri” 如果写“/”则代表<em>当前应用</em>的目录下，<em>绝对路径</em>。<br>如果不写“/”则代表<em>相对路径</em>。</li>\n</ol>\n<h3 id=\"include指令\"><a href=\"#include指令\" class=\"headerlink\" title=\"include指令\"></a>include指令</h3><blockquote>\n<p>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。</p>\n</blockquote>\n<p>静态包含：把其它资源包含到当前页面中。</p>\n<pre><code>&lt;%@ include file=&quot;/include/header.jsp&quot; %&gt;\n</code></pre><p>动态包含：</p>\n<pre><code>&lt;jsp:include page=&quot;/include/header.jsp&quot;&gt;&lt;/jsp:include&gt;\n</code></pre><p>两者的区别：翻译的时间段不同</p>\n<p>前者：在翻译时就把两个文件合并</p>\n<p>后者：不会合并文件，当代码执行到include时，才包含另一个文件的内容。</p>\n<p>原则：能用静的就不用动的。</p>\n<h3 id=\"taglib指令\"><a href=\"#taglib指令\" class=\"headerlink\" title=\"taglib指令\"></a>taglib指令</h3><p><strong>作用：</strong>在JSP页面中导入JSTL标签库。替换jsp中的java代码片段。</p>\n<pre><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt; \n</code></pre><h2 id=\"JSP-动作元素（6）\"><a href=\"#JSP-动作元素（6）\" class=\"headerlink\" title=\"JSP 动作元素（6）\"></a>JSP 动作元素（6）</h2><blockquote>\n<p> 使用标签的形式来表示一段java代码。</p>\n</blockquote>\n<ul>\n<li><code>&lt;jsp:include &gt;</code> 动态包含 </li>\n<li><code>&lt;jsp:forward&gt;</code> 请求转发 </li>\n<li><code>&lt;jsp:param&gt;</code> 设置请求参数</li>\n<li><code>&lt;jsp:useBean&gt;</code> 创建一个对象</li>\n<li><code>&lt;jsp:setProperty&gt;</code> 给指定的对象属性赋值</li>\n<li><code>&lt;jsp:getProperty&gt;</code> 取出指定对象的属性值</li>\n</ul>\n<h3 id=\"动作元素-jsp-include\"><a href=\"#动作元素-jsp-include\" class=\"headerlink\" title=\"动作元素(jsp:include)\"></a>动作元素(jsp:include)</h3><blockquote>\n<p><jsp:include>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。</jsp:include></p>\n</blockquote>\n<p>语法格式如下：</p>\n<pre><code>&lt;jsp:include page=&quot;相对 URL 地址&quot; flush=&quot;true&quot; /&gt;\n</code></pre><table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>page</td><td>    包含在页面中的相对URL地址。</td></tr><br><tr><td>flush</td><td>    布尔属性，定义在包含资源前是否刷新缓存区。</td></tr><br></table>\n\n<p><strong>实例:</strong></p>\n<p><em>date.jsp文件代码：</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;p&gt;\n   今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;\n&lt;/p&gt;\n</code></pre><p><em>main.jsp文件代码：</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;123&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;include 动作实例&lt;/h2&gt;\n&lt;jsp:include page=&quot;date.jsp&quot; flush=&quot;true&quot; /&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"动作元素-jsp-useBean\"><a href=\"#动作元素-jsp-useBean\" class=\"headerlink\" title=\"动作元素(jsp:useBean)\"></a>动作元素(jsp:useBean)</h3><p>jsp:useBean动作最简单的语法为：</p>\n<pre><code> &lt;!-- 模板 --&gt;\n&lt;jsp:useBean id=&quot;name&quot; class=&quot;package.class&quot; /&gt;\n &lt;!-- 示例 --&gt;\n&lt;jsp:useBean id=&quot;stu1&quot; class=&quot;com.itheima.entity.Student&quot;&gt;&lt;/jsp:useBean&gt;\n</code></pre><p><strong>注：</strong></p>\n<ul>\n<li>class中填写的是Bean类的完整路径</li>\n<li>id 为定义的的Bean变量名，如 Bean b = new Bean()中的b;</li>\n</ul>\n<h3 id=\"动作元素-jsp-setProperty\"><a href=\"#动作元素-jsp-setProperty\" class=\"headerlink\" title=\"动作元素(jsp:setProperty)\"></a>动作元素(jsp:setProperty)</h3><blockquote>\n<p>jsp:setProperty用来设置已经实例化的Bean对象的属性.</p>\n</blockquote>\n<pre><code>&lt;jsp:setProperty property=&quot;name&quot; name=&quot;stu1&quot; value=&quot;jerry&quot;/&gt;\n</code></pre><p>jsp:setProperty动作有下面四个属性,如下表：</p>\n<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>name</td><td>    name属性是必需的。它表示要设置属性的是哪个Bean。</td></tr><br><tr><td>property</td><td>    property属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是”*”，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr><br><tr><td>value</td><td>    value 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如”true”）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如”42”）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。</td></tr><br><tr><td>param</td><td>    param 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr><br></table>\n\n<h3 id=\"动作元素-jsp-getProperty\"><a href=\"#动作元素-jsp-getProperty\" class=\"headerlink\" title=\"动作元素(jsp:getProperty)\"></a>动作元素(jsp:getProperty)</h3><blockquote>\n<p>jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。</p>\n</blockquote>\n<p>语法格式如下：</p>\n<pre><code>&lt;jsp:getProperty property=&quot;name&quot; name=&quot;stu1&quot;/&gt;\n</code></pre><p>下表是与getProperty相关联的属性：</p>\n<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>name</td><td>    要检索的Bean属性名称。Bean必须已定义。</td></tr><br><tr><td>property</td><td>    表示要提取Bean属性的值</td></tr><br></table>\n\n<p><strong>实例：</strong></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;useBean&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;Jsp 使用 JavaBean 实例&lt;/h2&gt;\n&lt;jsp:useBean id=&quot;test&quot; class=&quot;com.runoob.main.TestBean&quot; /&gt;\n\n&lt;jsp:setProperty name=&quot;test&quot; \nproperty=&quot;message&quot; \nvalue=&quot;教程...&quot; /&gt;\n\n&lt;p&gt;输出信息....&lt;/p&gt;\n\n&lt;jsp:getProperty name=&quot;test&quot; property=&quot;message&quot; /&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"动作元素-jsp-forward\"><a href=\"#动作元素-jsp-forward\" class=\"headerlink\" title=\"动作元素(jsp:forward)\"></a>动作元素(jsp:forward)</h3><blockquote>\n<p>jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。</p>\n</blockquote>\n<p>语法格式如下所示：</p>\n<pre><code>&lt;jsp:forward page=&quot;相对 URL 地址&quot; /&gt;\n</code></pre><p>以下是forward相关联的属性：</p>\n<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>page</td><td>    page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.</td></tr></table>\n\n<p><strong>实例</strong><br>date.jsp 文件代码如下：</p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;p&gt;\n   今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;\n&lt;/p&gt;\n</code></pre><p>main.jsp文件代码：</p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;forward 动作实例&lt;/h2&gt;\n&lt;jsp:forward page=&quot;date.jsp&quot; /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"JSP-隐式对象-9\"><a href=\"#JSP-隐式对象-9\" class=\"headerlink\" title=\"JSP 隐式对象(9)\"></a>JSP 隐式对象(9)</h2><blockquote>\n<p>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p>\n</blockquote>\n<p>JSP所支持的九大隐式对象：</p>\n<table><br><tr><td>对象</td><td>    描述</td></tr><br><tr><td>request</td><td>    HttpServletRequest类的实例,它包含了有关浏览器请求的信息，并且提供了几个用于获取cookie, header, 和session数据的有用的方法。</td></tr><br><tr><td>response</td><td>    HttpServletResponse类的实例，并提供了几个用于设置送回<br>浏览器的响应的方法（如cookies,头信息等）。</td></tr><br><tr><td>out</td><td>    PrintWriter类的实例，用于把结果输出至网页上</td></tr><br><tr><td>session</td><td>    HttpSession类的实例,Session可以存贮用户的状态信息。</td></tr><br><tr><td>application</td><td>    ServletContext类的实例，与应用上下文有关,有助于查找有关servlet引擎和servlet环境的信息。</td></tr><br><tr><td>config</td><td>    ServletConfig类的实例,该对象用于存取servlet实例的初始化参数。</td></tr><br><tr><td>pageContext</td><td>    PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><br><tr><td>page</td><td>    类似于Java类中的this关键字，表示从该页面产生的一个servlet实例。</td></tr><br><tr><td>Exception</td><td>    Exception类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr><br></table>\n\n<p><strong>pageContext(重要):</strong><br>1、本身也是一个域对象：它可以操作其它三个域对象（<code>request</code> <code>session</code> <code>application</code>）的数据.</p>\n<h1 id=\"四大域对象\"><a href=\"#四大域对象\" class=\"headerlink\" title=\"四大域对象\"></a>四大域对象</h1><p>PageContext : pageConext 存放的数据在当前页面有效。开发时使用较少。</p>\n<p>ServletRequest: request  存放的数据在一次请求（转发）内有效。使用非常多。</p>\n<p>HttpSession: session 存放的数据在一次会话中有效。使用的比较多。如：存放用户的登录信息，购物车功能。</p>\n<p>ServletContext: application 存放的数据在整个应用范围内都有效。因为范围太大，应尽量少用。</p>\n<h1 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h1><h2 id=\"EL概述和基本语法\"><a href=\"#EL概述和基本语法\" class=\"headerlink\" title=\"EL概述和基本语法\"></a>EL概述和基本语法</h2><p> EL表达式：expression language 表达式语言</p>\n<p> 要简化jsp中java代码开发。</p>\n<p> 它不是一种开发语言，是jsp中获取数据的一种规范</p>\n<p> 基本语法如下：</p>\n<p>  <code>${表达式}</code></p>\n<h2 id=\"EL中的基础操作符\"><a href=\"#EL中的基础操作符\" class=\"headerlink\" title=\"EL中的基础操作符\"></a>EL中的基础操作符</h2><table><br><tr><td>操作符</td><td>    描述</td></tr><br><tr><td>.</td><td>    访问一个Bean属性或者一个映射条目</td></tr><br><tr><td>[]</td><td>    访问一个数组或者链表的元素</td></tr><br><tr><td>( )</td><td>    组织一个子表达式以改变优先级</td></tr><br><tr><td>+</td><td>    加</td></tr><br><tr><td>-</td><td>    减或负</td></tr><br><tr><td>*</td><td>    乘</td></tr><br><tr><td>/ or div</td><td>    除</td></tr><br><tr><td>% or mod</td><td>    取模</td></tr><br><tr><td>A?B:C</td><td>    执行某种条件判断</td></tr><br><tr><td>== or eq</td><td>    测试是否相等</td></tr><br><tr><td>!= or ne</td><td>    测试是否不等</td></tr><br><tr><td>&lt; or lt</td><td>    测试是否小于</td></tr><br><tr><td>&gt; or gt</td><td>    测试是否大于</td></tr><br><tr><td>&lt;= or le</td><td>    测试是否小于等于</td></tr><br><tr><td>&gt;= or ge</td><td>    测试是否大于等于</td></tr><br><tr><td>&amp;&amp; or and</td><td>    测试逻辑与</td></tr><br><tr><td>|| or or</td><td>    测试逻辑或</td></tr><br><tr><td>! or not</td><td>    测试取反</td></tr><br><tr><td>empty</td><td>    测试是否空值</td></tr><br></table>\n\n<p><em>补：</em></p>\n<p>EL表达式中的empty运算符用于判断某个对象是否为null或””，结果为布尔类型，语法格式如下：</p>\n<pre><code>${empty var}\n</code></pre><p>下列情况empty返回值为true。</p>\n<ul>\n<li>var变量不存在，即没有定义，例如表达式${empty name},如果不存在 name 变量，就返回 true。</li>\n<li>var变量的值为null，例如表达式 ${empty customer.name},如果customer.name的值为null，就返回true.</li>\n<li>var变量引用集合（Set、Map、List）类型对象，并且在集合对象中不包含任何元素。</li>\n</ul>\n<h2 id=\"防止HTML注入\"><a href=\"#防止HTML注入\" class=\"headerlink\" title=\"防止HTML注入\"></a>防止HTML注入</h2><p><em>displayMessage.jsp</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;form action=&quot;servlet/ResultServlet&quot; method=&quot;post&quot;&gt;\n用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;\n留言：\n&lt;textarea rows=&quot;6&quot; cols=&quot;50&quot; name=&quot;message&quot;&gt;&lt;/textarea&gt;\n&lt;br&gt;\n&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n  &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><em>ResultServlet.java</em></p>\n<pre><code>package com.tq.servlet;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class ResultServlet extends HttpServlet {\n\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request,response);\n    }\n\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        request.setCharacterEncoding(&quot;UTF-8&quot;);\n        String name = request.getParameter(&quot;username&quot;);\n        String message = request.getParameter(&quot;message&quot;);\n        request.setAttribute(&quot;name&quot;, name);\n        request.setAttribute(&quot;message&quot;, message);\n        request.getRequestDispatcher(&quot;/result.jsp&quot;).forward(request, response);\n        }\n\n}\n</code></pre><p><em>HTMLFilter.java</em></p>\n<pre><code>package com.tq.util;\n\npublic class HTMLFilter {\n\n    public static String filter(String message){\n        if (message==null) {\n            return (null);\n        }\n        char content[] = new char[message.length()];\n        message.getChars(0, message.length(), content, 0);\n        StringBuffer result = new StringBuffer(content.length);\n        for (int i = 0; i &lt; content.length; i++) {\n            switch (content[i]) {\n            case &apos;&lt;&apos;:\n                result.append(&quot;&amp;lt;&quot;);\n                break;\n            case &apos;&gt;&apos;:\n                result.append(&quot;&amp;gt;&quot;);\n                break;\n            case &apos;&amp;&apos;:\n                result.append(&quot;&amp;amp;&quot;);\n                break;\n            case &apos;&quot;&apos;:\n                result.append(&quot;&amp;quot;&quot;);\n                break;\n            default:\n                result.append(content[i]);\n                break;\n            }\n        }\n        return (result.toString());\n    }\n}\n</code></pre><p><em>mytaglib.tld</em></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;  \nxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  \nxsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;\nversion=&quot;2.0&quot;&gt;\n &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;\n &lt;short-name&gt;function&lt;/short-name&gt;\n &lt;uri&gt;http://www.mutouspace.cn&lt;/uri&gt;\n &lt;function&gt;\n&lt;name&gt;filter&lt;/name&gt;\n&lt;function-class&gt;\n   com.tq.util.HTMLFilter\n&lt;/function-class&gt;\n&lt;function-signature&gt;\n   java.lang.String filter(java.lang.String)\n&lt;/function-signature&gt;\n &lt;/function&gt;\n&lt;/taglib&gt;\n</code></pre><p><em>result.jsp</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\npageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;%@ taglib prefix = &quot;terry&quot; uri=&quot;http://www.mutouspace.cn&quot;  %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n 用户名:${name}&lt;br&gt; \n 留言：${terry:filter(message)}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h1 id=\"JSP-标准标签库（JSTL）\"><a href=\"#JSP-标准标签库（JSTL）\" class=\"headerlink\" title=\"JSP 标准标签库（JSTL）\"></a>JSP 标准标签库（JSTL）</h1><p>待补充。。。。</p></The>"},{"title":"JAVA学习之MySQL","date":"2017-03-21T13:52:33.000Z","_content":"\n\n<Excerpt in index | 首页摘要>\n\n> 本文主要记录MySQL数据库的简单使用。\n> 本部分记录了MySQL的安装、卸载，SQL语句的基础。\n\n> 转载请注明：转载于Terry Tian的博客（[www.mutouspace.cn](www.mutouspace.cn)）!\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 数据库概述 #\n\n**数据库（DataBase，DB）：**指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。(文件系统)\n\n**数据库管理系统（DataBase Management System，DBMS）：**指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。\n\n*数据库软件应该为数据库管理系统，数据库是通过数据库管理系统创建和操作的。*\n\n> 数据库：存储、维护和管理数据的集合。\n\n# 数据库的安装与配置 #\n\n## 安装与配置 ##\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%877.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%878.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%879.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8710.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8711.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8712.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8713.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8714.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8715.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8716.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8717.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8718.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8719.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8720.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8721.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8722.png)\n\n\n## 卸载与修改密码 ##\n\n**卸载：**\n\n1. 停止mysql服务   net stop mysql       启动mysql服务  net start mysql\n \n2. 卸载mysql\n\n3. 找到mysql 安装目录下的 my.ini   datadir=\"C:/ProgramData/MySQL/MySQL Server 5.5/Data/\"\n\n**修改密码**\n\n运行cmd\n\n 安装成功了打开cmd  --> mysql -uroot -p你的密码\n\n 修改mysql root用户密码\n\n1) 停止mysql服务 运行输入services.msc 停止mysql服务\n\n\t\t\t\t或者 cmd -->  net stop mysql\n\n2) 在cmd下 输入 mysqld --skip-grant-tables 启动服务器 光标不动 （不要关闭该窗口）\n\n3) 新打开cmd 输入mysql -u root -p 不需要密码 \n\n           use mysql;\n\n           update user set password=password('abc') WHERE User='root';\n\n4) 关闭两个cmd窗口 在任务管理器结束mysqld 进程 \n\n5) 在服务管理页面 重启mysql 服务\n\n密码修改完成\n\n# sql概述 #\n\n> SQL：Structure Query Language。（结构化查询语言）\n\n# Sql的分类 #\n\n**DDL（Data Definition Language）：**数据定义语言，用来定义数据库对象：库、表、列等； \tCREATE、 ALTER、DROP\n\n**DML（Data Manipulation Language）：**数据操作语言，用来定义数据库记录（数据）；    \tINSERT、 UPDATE、 DELETE\n\n**DCL（Data Control Language）：**数据控制语言，用来定义访问权限和安全级别；\n\n**DQL（Data Query Language）：**数据查询语言，用来查询记录（数据）。SELECT\n\n**注意：sql语句以;结尾**\n\n## DDL:操作数据库、表、列等 ##\n\n> 使用的关键字：CREATE、 ALTER、 DROP\n\n**example:**\n\n    CREATE TABLE emp (\n    id INT,\n    NAME VARCHAR(50),\n    gender VARCHAR(10),\n    birthday DATE,\n    entry_date DATE,\n    job VARCHAR(100),\n    salary DOUBLE,\n    RESUME VARCHAR(200)\n    );\n    -- 查看表的字段信息\n    DESC emp;\n    -- 在emp TABLE中添加image列\n    ALTER TABLE emp ADD image BLOB;\n    -- 修改job列，使其长度为60。\n    ALTER TABLE emp MODIFY job VARCHAR(60);\n    -- 删除image列,一次只能删一列。\n    ALTER TABLE emp DROP image;\n    -- 表名改为USER。\n    RENAME TABLE emp TO USER;\n    -- 查看表格的创建细节\n    SHOW CREATE TABLE USER;\n    -- 修改表的字符集为gbk\n    ALTER TABLE USER CHARACTER SET gbk;\n    -- 列名NAME修改为username\n    ALTER TABLE USER CHANGE NAME username VARCHAR(100);\n    \n    DESC USER;\n    -- 删除表\n    DROP TABLE USER ;\n\n\n## DML操作(重要) ##\n\n### 插入操作：INSERT ###\n\n**语法：** INSERT INTO 表名（列名1，列名2 ...）VALUES(列值1，列值2...);\n**注意：**列名与列值的类型、个数、顺序要一一对应。\n\n可以把列名当做java中的形参，把列值当做实参。\n\n值不要超出列定义的长度。\n\n如果插入空值，请使用null\n\n插入的日期和字符一样，都使用引号括起来。\n\n**练习 ：**\n\n    create table emp(\n    id int,\n    name varchar(100),\n    gender varchar(10),\n    birthday date,\n    salary float(10,2),\n    entry_date date,\n    resume text\n    );\n    \n    INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\n    VALUES(1,'zhangsan','female','1990-5-10',10000,'2015-5-5-','good girl');\n    \n    INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\n    VALUES(2,'lisi','male','1995-5-10',10000,'2015-5-5','good boy');\n    \n    INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\n    VALUES(3,'wangwu','male','1995-5-10',10000,'2015-5-5','good boy');\n    \n    -- 批量插入：\n    INSERT INTO emp VALUES\n    (4,'zs','m','2015-09-01',10000,'2015-09-01',NULL),\n    (5,'li','m','2015-09-01',10000,'2015-09-01',NULL),\n    (6,'ww','m','2015-09-01',10000,'2015-09-01',NULL);\n\n\n### 修改操作 UPDATE ###\n\n**语法：**UPDATE 表名 SET 列名1=列值1，列名2=列值2 。。。 WHERE 列名=值\n\n**练习 ：**\n\n    -- 将所有员工薪水修改为5000元。\n    UPDATE emp SET salary=5000 \n    -- 将姓名为’tom’的员工薪水修改为3000元。\n    UPDATE emp SET salary=3000 WHERE NAME='tom';\n    -- 将姓名为’jerry’的员工薪水修改为4000元,gender改为female。\n     UPDATE emp SET salary=4000,gender='female' WHERE NAME='jerry';\n    -- 将蔡依林的薪水在原有基础上增加1000元。\n     UPDATE emp SET salary=salary+1000 WHERE NAME = '蔡依林';\n\n### 删除操作 DELETE ###\n\n**语法 ：** DELETE FROM 表名 【WHERE 列名=值】\n\n**练习 ：**\n\n    -- 删除表中名称为’zs’的记录。\n    DELETE FROM emp WHERE NAME=‘tom’;\n    -- 删除表中所有记录。\n    DELETE FROM emp;\n    -- 使用truncate删除表中记录。\n    TRUNCATE TABLE emp;\n\n> DELETE 删除表中的数据，表结构还在;删除后的数据可以找回\n>  TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。\n>  删除的数据不能找回。执行速度比DELETE快。\n\n\n## DQL操作 ##\n\n> DQL数据查询语言 （重要）\n> 数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。\n> 查询返回的结果集是一张虚拟表。\n\n**查询关键字：**SELECT \n**语法：** SELECT 列名 FROM表名 \n【WHERE --> GROUP BY -->HAVING--> ORDER BY】\n\n**语法：**\n\n      SELECT selection_list /*要查询的列名称*/\n      FROM table_list /*要查询的表名称*/\n      WHERE condition /*行条件*/\n      GROUP BY grouping_columns /*对结果分组*/\n      HAVING condition /*分组后的行条件*/\n      ORDER BY sorting_columns /*对结果分组*/\n      LIMIT offset_start, row_count /*结果限定*/\n\n开始之前让我们先建几个表并插入数据\n\n    CREATE TABLE stu (\n    \tsid\tCHAR(6),\n    \tsname\t\tVARCHAR(50),\n    \tage\t\tINT,\n    \tgender\tVARCHAR(50)\n    );\n\n    INSERT INTO stu VALUES('S_1001', 'liuYi', 35, 'male');\n    INSERT INTO stu VALUES('S_1002', 'chenEr', 15, 'female');\n    INSERT INTO stu VALUES('S_1003', 'zhangSan', 95, 'male');\n    INSERT INTO stu VALUES('S_1004', 'liSi', 65, 'female');\n    INSERT INTO stu VALUES('S_1005', 'wangWu', 55, 'male');\n    INSERT INTO stu VALUES('S_1006', 'zhaoLiu', 75, 'female');\n    INSERT INTO stu VALUES('S_1007', 'sunQi', 25, 'male');\n    INSERT INTO stu VALUES('S_1008', 'zhouBa', 45, 'female');\n    INSERT INTO stu VALUES('S_1009', 'wuJiu', 85, 'male');\n    INSERT INTO stu VALUES('S_1010', 'zhengShi', 5, 'female');\n    INSERT INTO stu VALUES('S_1011', 'xxx', NULL, NULL);\n\n\n    CREATE TABLE emp(\n    \tempno\t\tINT,\n    \tename\t\tVARCHAR(50),\n    \tjob\t\tVARCHAR(50),\n    \tmgr\t\tINT,\n    \thiredate\tDATE,\n    \tsal\t\tDECIMAL(7,2),\n    \tcomm\t\tDECIMAL(7,2),\n    \tdeptno\t\tINT\n    ) ;\n\n    INSERT INTO emp VALUES(7369,'SMITH','CLERK',7902,'1980-12-17',800,NULL,20);\n    INSERT INTO emp VALUES(7499,'ALLEN','SALESMAN',7698,'1981-02-20',1600,300,30);\n    INSERT INTO emp VALUES(7521,'WARD','SALESMAN',7698,'1981-02-22',1250,500,30);\n    INSERT INTO emp VALUES(7566,'JONES','MANAGER',7839,'1981-04-02',2975,NULL,20);\n    INSERT INTO emp VALUES(7654,'MARTIN','SALESMAN',7698,'1981-09-28',1250,1400,30);\n    INSERT INTO emp VALUES(7698,'BLAKE','MANAGER',7839,'1981-05-01',2850,NULL,30);\n    INSERT INTO emp VALUES(7782,'CLARK','MANAGER',7839,'1981-06-09',2450,NULL,10);\n    INSERT INTO emp VALUES(7788,'SCOTT','ANALYST',7566,'1987-04-19',3000,NULL,20);\n    INSERT INTO emp VALUES(7839,'KING','PRESIDENT',NULL,'1981-11-17',5000,NULL,10);\n    INSERT INTO emp VALUES(7844,'TURNER','SALESMAN',7698,'1981-09-08',1500,0,30);\n    INSERT INTO emp VALUES(7876,'ADAMS','CLERK',7788,'1987-05-23',1100,NULL,20);\n    INSERT INTO emp VALUES(7900,'JAMES','CLERK',7698,'1981-12-03',950,NULL,30);\n    INSERT INTO emp VALUES(7902,'FORD','ANALYST',7566,'1981-12-03',3000,NULL,20);\n    INSERT INTO emp VALUES(7934,'MILLER','CLERK',7782,'1982-01-23',1300,NULL,10);\n\n\n    CREATE TABLE dept(\n    \tdeptno\t\tINT,\n    \tdname\t\tVARCHAR(14),\n    \tloc\t\tVARCHAR(13)\n    );\n\n    INSERT INTO dept VALUES(10, 'ACCOUNTING', 'NEW YORK');\n    INSERT INTO dept VALUES(20, 'RESEARCH', 'DALLAS');\n    INSERT INTO dept VALUES(30, 'SALES', 'CHICAGO');\n    INSERT INTO dept VALUES(40, 'OPERATIONS', 'BOSTON');\n\n\n### 基础查询 ###\n\n1.1　查询所有列\n\n    SELECT * FROM stu;\n\n1.2　查询指定列\n\n    SELECT sid, sname, age FROM stu;\n\n### 条件查询 ###\n\n    -- 查询性别为女，并且年龄>=50的记录\n    SELECT * FROM stu WHERE gender='female' AND age >=50;\n    \n    -- 查询学号为S_1001，或者姓名为liSi的记录\n    SELECT * FROM stu \n    WHERE sid ='S_1001' OR sname='liSi';\n    \n    -- 查询学号为S_1001，S_1002，S_1003的记录\n    SELECT * FROM stu \n    WHERE sid IN ('S_1001','S_1002','S_1003');\n    \n    -- 查询学号不是S_1001，S_1002，S_1003的记录\n    SELECT * FROM stu \n    WHERE sid NOT IN ('S_1001','S_1002','S_1003');\n    \n    -- 查询年龄为null的记录\n    SELECT * FROM stu\n    WHERE age IS NULL;\n    \n    -- 查询年龄在20到40之间的学生记录\n    SELECT * \n    FROM stu\n    WHERE age>=20 AND age<=40;\n    -- 或者\n    SELECT * \n    FROM stu \n    WHERE age BETWEEN 20 AND 40;\n    \n    -- 查询性别非男的学生记录\n    SELECT * \n    FROM stu\n    WHERE gender!='male';\n    -- 或者\n    SELECT * \n    FROM stu\n    WHERE gender<>'male';\n    -- 或者\n    SELECT * \n    FROM stu\n    WHERE NOT gender='male';\n    \n    -- 查询姓名不为null的学生记录\n    \n    SELECT * FROM stu WHERE sname IS NOT NULL;\n\n### 模糊查询 ###\n\n> 当想查询姓名中包含a字母的学生时就需要使用模糊查询了。模糊查询需要使用关键字LIKE。\n\n**通配符:** \n\n    _ ：任意一个字符\n\n  \t% ：任意0~n个字符\n\n**Example:**\n\n    -- 查询姓名由5个字母构成的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE '_____';\n    -- 模糊查询必须使用LIKE关键字。其中 “_”匹配任意一个字母，5个“_”表示5个任意字母。\n    \n    -- 3.2　查询姓名由5个字母构成，并且第5个字母为“i”的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE '____i';\n    \n    -- 3.3　查询姓名以“z”开头的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE 'z%';\n    -- 其中“%”匹配0~n个任何字母。\n    \n    -- 3.4　查询姓名中第2个字母为“i”的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE '_i%';\n    \n    -- 3.5　查询姓名中包含“a”字母的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE '%a%';\n\n### 字段控制查询 ###\n\n    SELECT * FROM emp;\n    -- 去除重复记录\n    SELECT DISTINCT deptno,mgr FROM emp;\n    \n    -- 查看雇员的月薪与佣金之和\n    SELECT * ,sal+comm FROM emp;\n    -- 过滤null 并起别名\n    SELECT * ,sal+IFNULL(comm,0) AS total FROM emp;\n\n### 排序  ###\n\n> order by 列名 asc(默认) desc\n\n    -- 查询所有学生记录，按年龄升序排序\n    SELECT * FROM stu ORDER BY age ASC;\n    -- 查询所有学生记录，按年龄降序排序\n    SELECT * FROM stu ORDER BY age DESC;\n    -- 查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序\n    SELECT * FROM emp\n    ORDER BY sal DESC,empno ASC;\n\n### 聚合函数 ###\n\n> 聚合函数是用来做纵向运算的函数：\n> \n> COUNT()：统计指定列不为NULL的记录行数；\n> \n> MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；\n> \n> MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；\n> \n> SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；\n> \n> AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；\n\n    -- 查询emp表中记录数：\n    SELECT COUNT(*) AS cnt FROM emp;\n    \n    -- 查询emp表中有佣金的人数：\n    SELECT COUNT(comm) cnt FROM emp;\n    -- 注意，因为count()函数中给出的是comm列，那么只统计comm列非NULL的行数。\n    \n    -- 查询emp表中月薪大于2500的人数：\n    SELECT COUNT(*) FROM emp\n    WHERE sal > 2500;\n    \n    -- 统计月薪与佣金之和大于2500元的人数：\n    SELECT COUNT(*) AS cnt FROM emp WHERE sal+IFNULL(comm,0) > 2500;\n    \n    -- 查询有佣金的人数，有领导的人数：\n    SELECT COUNT(comm), COUNT(mgr) FROM emp;\n    \n    \n    -- 查询所有雇员月薪和：\n    SELECT SUM(sal) FROM emp;\n    \n    -- 查询所有雇员月薪和，以及所有雇员佣金和：\n    SELECT SUM(sal), SUM(comm) FROM emp;\n    \n    -- 查询所有雇员月薪+佣金和：\n    SELECT SUM(sal+IFNULL(comm,0)) FROM emp;\n    \n    -- 统计所有员工平均工资：\n    SELECT AVG(sal) FROM emp;\n    \n    -- MAX和MIN\n    -- 查询最高工资和最低工资：\n    SELECT MAX(sal), MIN(sal) FROM emp;\n\n### 分组查询 ###\n\n> 注：凡和聚合函数同时出现的列名，一定要写在group by 之后\n\n    -- 查询每个部门的部门编号和每个部门的工资和：\n    SELECT deptno, SUM(sal)\n    FROM emp\n    GROUP BY deptno;\n    \n    -- 查询每个部门的部门编号以及每个部门的人数：\n    SELECT deptno,COUNT(*)\n    FROM emp\n    GROUP BY deptno;\n    \n    -- 查询每个部门的部门编号以及每个部门工资大于1500的人数：\n    SELECT deptno,COUNT(*)\n    FROM emp\n    WHERE sal>1500\n    GROUP BY deptno;\n    \n    -- 查询工资总和大于9000的部门编号以及工资和：\n    SELECT deptno, SUM(sal)\n    FROM emp\n    GROUP BY deptno\n    HAVING SUM(sal) > 9000;\n\n**注：**\n\n  *having与where的区别:*\n\n\t\t1.having是在分组后对数据进行过滤.\n\n\t\t  where是在分组前对数据进行过滤\n\t\t\n        2.having后面可以使用聚合函数(统计函数)\n\n          where后面不可以使用聚合函数。\n\n*WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束。*\n\n### LIMIT ###\n\n> LIMIT用来限定查询结果的起始行，以及总行数。\n\n    -- 查询5行记录，起始行从0开始\n    SELECT * FROM emp LIMIT 0, 5;\n    -- 查询10行记录，起始行从3开始\n    SELECT * FROM emp LIMIT 3, 10;","source":"_posts/JAVA学习之MySQL.md","raw":"---\ntitle: JAVA学习之MySQL\ndate: 2017-03-21 21:52:33\ncategories: 数据库 #文章文类\ntags: [JAVA,MySQL,数据库]\n\n---\n\n\n<Excerpt in index | 首页摘要>\n\n> 本文主要记录MySQL数据库的简单使用。\n> 本部分记录了MySQL的安装、卸载，SQL语句的基础。\n\n> 转载请注明：转载于Terry Tian的博客（[www.mutouspace.cn](www.mutouspace.cn)）!\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 数据库概述 #\n\n**数据库（DataBase，DB）：**指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。(文件系统)\n\n**数据库管理系统（DataBase Management System，DBMS）：**指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。\n\n*数据库软件应该为数据库管理系统，数据库是通过数据库管理系统创建和操作的。*\n\n> 数据库：存储、维护和管理数据的集合。\n\n# 数据库的安装与配置 #\n\n## 安装与配置 ##\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%877.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%878.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%879.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8710.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8711.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8712.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8713.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8714.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8715.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8716.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8717.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8718.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8719.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8720.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8721.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8722.png)\n\n\n## 卸载与修改密码 ##\n\n**卸载：**\n\n1. 停止mysql服务   net stop mysql       启动mysql服务  net start mysql\n \n2. 卸载mysql\n\n3. 找到mysql 安装目录下的 my.ini   datadir=\"C:/ProgramData/MySQL/MySQL Server 5.5/Data/\"\n\n**修改密码**\n\n运行cmd\n\n 安装成功了打开cmd  --> mysql -uroot -p你的密码\n\n 修改mysql root用户密码\n\n1) 停止mysql服务 运行输入services.msc 停止mysql服务\n\n\t\t\t\t或者 cmd -->  net stop mysql\n\n2) 在cmd下 输入 mysqld --skip-grant-tables 启动服务器 光标不动 （不要关闭该窗口）\n\n3) 新打开cmd 输入mysql -u root -p 不需要密码 \n\n           use mysql;\n\n           update user set password=password('abc') WHERE User='root';\n\n4) 关闭两个cmd窗口 在任务管理器结束mysqld 进程 \n\n5) 在服务管理页面 重启mysql 服务\n\n密码修改完成\n\n# sql概述 #\n\n> SQL：Structure Query Language。（结构化查询语言）\n\n# Sql的分类 #\n\n**DDL（Data Definition Language）：**数据定义语言，用来定义数据库对象：库、表、列等； \tCREATE、 ALTER、DROP\n\n**DML（Data Manipulation Language）：**数据操作语言，用来定义数据库记录（数据）；    \tINSERT、 UPDATE、 DELETE\n\n**DCL（Data Control Language）：**数据控制语言，用来定义访问权限和安全级别；\n\n**DQL（Data Query Language）：**数据查询语言，用来查询记录（数据）。SELECT\n\n**注意：sql语句以;结尾**\n\n## DDL:操作数据库、表、列等 ##\n\n> 使用的关键字：CREATE、 ALTER、 DROP\n\n**example:**\n\n    CREATE TABLE emp (\n    id INT,\n    NAME VARCHAR(50),\n    gender VARCHAR(10),\n    birthday DATE,\n    entry_date DATE,\n    job VARCHAR(100),\n    salary DOUBLE,\n    RESUME VARCHAR(200)\n    );\n    -- 查看表的字段信息\n    DESC emp;\n    -- 在emp TABLE中添加image列\n    ALTER TABLE emp ADD image BLOB;\n    -- 修改job列，使其长度为60。\n    ALTER TABLE emp MODIFY job VARCHAR(60);\n    -- 删除image列,一次只能删一列。\n    ALTER TABLE emp DROP image;\n    -- 表名改为USER。\n    RENAME TABLE emp TO USER;\n    -- 查看表格的创建细节\n    SHOW CREATE TABLE USER;\n    -- 修改表的字符集为gbk\n    ALTER TABLE USER CHARACTER SET gbk;\n    -- 列名NAME修改为username\n    ALTER TABLE USER CHANGE NAME username VARCHAR(100);\n    \n    DESC USER;\n    -- 删除表\n    DROP TABLE USER ;\n\n\n## DML操作(重要) ##\n\n### 插入操作：INSERT ###\n\n**语法：** INSERT INTO 表名（列名1，列名2 ...）VALUES(列值1，列值2...);\n**注意：**列名与列值的类型、个数、顺序要一一对应。\n\n可以把列名当做java中的形参，把列值当做实参。\n\n值不要超出列定义的长度。\n\n如果插入空值，请使用null\n\n插入的日期和字符一样，都使用引号括起来。\n\n**练习 ：**\n\n    create table emp(\n    id int,\n    name varchar(100),\n    gender varchar(10),\n    birthday date,\n    salary float(10,2),\n    entry_date date,\n    resume text\n    );\n    \n    INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\n    VALUES(1,'zhangsan','female','1990-5-10',10000,'2015-5-5-','good girl');\n    \n    INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\n    VALUES(2,'lisi','male','1995-5-10',10000,'2015-5-5','good boy');\n    \n    INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\n    VALUES(3,'wangwu','male','1995-5-10',10000,'2015-5-5','good boy');\n    \n    -- 批量插入：\n    INSERT INTO emp VALUES\n    (4,'zs','m','2015-09-01',10000,'2015-09-01',NULL),\n    (5,'li','m','2015-09-01',10000,'2015-09-01',NULL),\n    (6,'ww','m','2015-09-01',10000,'2015-09-01',NULL);\n\n\n### 修改操作 UPDATE ###\n\n**语法：**UPDATE 表名 SET 列名1=列值1，列名2=列值2 。。。 WHERE 列名=值\n\n**练习 ：**\n\n    -- 将所有员工薪水修改为5000元。\n    UPDATE emp SET salary=5000 \n    -- 将姓名为’tom’的员工薪水修改为3000元。\n    UPDATE emp SET salary=3000 WHERE NAME='tom';\n    -- 将姓名为’jerry’的员工薪水修改为4000元,gender改为female。\n     UPDATE emp SET salary=4000,gender='female' WHERE NAME='jerry';\n    -- 将蔡依林的薪水在原有基础上增加1000元。\n     UPDATE emp SET salary=salary+1000 WHERE NAME = '蔡依林';\n\n### 删除操作 DELETE ###\n\n**语法 ：** DELETE FROM 表名 【WHERE 列名=值】\n\n**练习 ：**\n\n    -- 删除表中名称为’zs’的记录。\n    DELETE FROM emp WHERE NAME=‘tom’;\n    -- 删除表中所有记录。\n    DELETE FROM emp;\n    -- 使用truncate删除表中记录。\n    TRUNCATE TABLE emp;\n\n> DELETE 删除表中的数据，表结构还在;删除后的数据可以找回\n>  TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。\n>  删除的数据不能找回。执行速度比DELETE快。\n\n\n## DQL操作 ##\n\n> DQL数据查询语言 （重要）\n> 数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。\n> 查询返回的结果集是一张虚拟表。\n\n**查询关键字：**SELECT \n**语法：** SELECT 列名 FROM表名 \n【WHERE --> GROUP BY -->HAVING--> ORDER BY】\n\n**语法：**\n\n      SELECT selection_list /*要查询的列名称*/\n      FROM table_list /*要查询的表名称*/\n      WHERE condition /*行条件*/\n      GROUP BY grouping_columns /*对结果分组*/\n      HAVING condition /*分组后的行条件*/\n      ORDER BY sorting_columns /*对结果分组*/\n      LIMIT offset_start, row_count /*结果限定*/\n\n开始之前让我们先建几个表并插入数据\n\n    CREATE TABLE stu (\n    \tsid\tCHAR(6),\n    \tsname\t\tVARCHAR(50),\n    \tage\t\tINT,\n    \tgender\tVARCHAR(50)\n    );\n\n    INSERT INTO stu VALUES('S_1001', 'liuYi', 35, 'male');\n    INSERT INTO stu VALUES('S_1002', 'chenEr', 15, 'female');\n    INSERT INTO stu VALUES('S_1003', 'zhangSan', 95, 'male');\n    INSERT INTO stu VALUES('S_1004', 'liSi', 65, 'female');\n    INSERT INTO stu VALUES('S_1005', 'wangWu', 55, 'male');\n    INSERT INTO stu VALUES('S_1006', 'zhaoLiu', 75, 'female');\n    INSERT INTO stu VALUES('S_1007', 'sunQi', 25, 'male');\n    INSERT INTO stu VALUES('S_1008', 'zhouBa', 45, 'female');\n    INSERT INTO stu VALUES('S_1009', 'wuJiu', 85, 'male');\n    INSERT INTO stu VALUES('S_1010', 'zhengShi', 5, 'female');\n    INSERT INTO stu VALUES('S_1011', 'xxx', NULL, NULL);\n\n\n    CREATE TABLE emp(\n    \tempno\t\tINT,\n    \tename\t\tVARCHAR(50),\n    \tjob\t\tVARCHAR(50),\n    \tmgr\t\tINT,\n    \thiredate\tDATE,\n    \tsal\t\tDECIMAL(7,2),\n    \tcomm\t\tDECIMAL(7,2),\n    \tdeptno\t\tINT\n    ) ;\n\n    INSERT INTO emp VALUES(7369,'SMITH','CLERK',7902,'1980-12-17',800,NULL,20);\n    INSERT INTO emp VALUES(7499,'ALLEN','SALESMAN',7698,'1981-02-20',1600,300,30);\n    INSERT INTO emp VALUES(7521,'WARD','SALESMAN',7698,'1981-02-22',1250,500,30);\n    INSERT INTO emp VALUES(7566,'JONES','MANAGER',7839,'1981-04-02',2975,NULL,20);\n    INSERT INTO emp VALUES(7654,'MARTIN','SALESMAN',7698,'1981-09-28',1250,1400,30);\n    INSERT INTO emp VALUES(7698,'BLAKE','MANAGER',7839,'1981-05-01',2850,NULL,30);\n    INSERT INTO emp VALUES(7782,'CLARK','MANAGER',7839,'1981-06-09',2450,NULL,10);\n    INSERT INTO emp VALUES(7788,'SCOTT','ANALYST',7566,'1987-04-19',3000,NULL,20);\n    INSERT INTO emp VALUES(7839,'KING','PRESIDENT',NULL,'1981-11-17',5000,NULL,10);\n    INSERT INTO emp VALUES(7844,'TURNER','SALESMAN',7698,'1981-09-08',1500,0,30);\n    INSERT INTO emp VALUES(7876,'ADAMS','CLERK',7788,'1987-05-23',1100,NULL,20);\n    INSERT INTO emp VALUES(7900,'JAMES','CLERK',7698,'1981-12-03',950,NULL,30);\n    INSERT INTO emp VALUES(7902,'FORD','ANALYST',7566,'1981-12-03',3000,NULL,20);\n    INSERT INTO emp VALUES(7934,'MILLER','CLERK',7782,'1982-01-23',1300,NULL,10);\n\n\n    CREATE TABLE dept(\n    \tdeptno\t\tINT,\n    \tdname\t\tVARCHAR(14),\n    \tloc\t\tVARCHAR(13)\n    );\n\n    INSERT INTO dept VALUES(10, 'ACCOUNTING', 'NEW YORK');\n    INSERT INTO dept VALUES(20, 'RESEARCH', 'DALLAS');\n    INSERT INTO dept VALUES(30, 'SALES', 'CHICAGO');\n    INSERT INTO dept VALUES(40, 'OPERATIONS', 'BOSTON');\n\n\n### 基础查询 ###\n\n1.1　查询所有列\n\n    SELECT * FROM stu;\n\n1.2　查询指定列\n\n    SELECT sid, sname, age FROM stu;\n\n### 条件查询 ###\n\n    -- 查询性别为女，并且年龄>=50的记录\n    SELECT * FROM stu WHERE gender='female' AND age >=50;\n    \n    -- 查询学号为S_1001，或者姓名为liSi的记录\n    SELECT * FROM stu \n    WHERE sid ='S_1001' OR sname='liSi';\n    \n    -- 查询学号为S_1001，S_1002，S_1003的记录\n    SELECT * FROM stu \n    WHERE sid IN ('S_1001','S_1002','S_1003');\n    \n    -- 查询学号不是S_1001，S_1002，S_1003的记录\n    SELECT * FROM stu \n    WHERE sid NOT IN ('S_1001','S_1002','S_1003');\n    \n    -- 查询年龄为null的记录\n    SELECT * FROM stu\n    WHERE age IS NULL;\n    \n    -- 查询年龄在20到40之间的学生记录\n    SELECT * \n    FROM stu\n    WHERE age>=20 AND age<=40;\n    -- 或者\n    SELECT * \n    FROM stu \n    WHERE age BETWEEN 20 AND 40;\n    \n    -- 查询性别非男的学生记录\n    SELECT * \n    FROM stu\n    WHERE gender!='male';\n    -- 或者\n    SELECT * \n    FROM stu\n    WHERE gender<>'male';\n    -- 或者\n    SELECT * \n    FROM stu\n    WHERE NOT gender='male';\n    \n    -- 查询姓名不为null的学生记录\n    \n    SELECT * FROM stu WHERE sname IS NOT NULL;\n\n### 模糊查询 ###\n\n> 当想查询姓名中包含a字母的学生时就需要使用模糊查询了。模糊查询需要使用关键字LIKE。\n\n**通配符:** \n\n    _ ：任意一个字符\n\n  \t% ：任意0~n个字符\n\n**Example:**\n\n    -- 查询姓名由5个字母构成的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE '_____';\n    -- 模糊查询必须使用LIKE关键字。其中 “_”匹配任意一个字母，5个“_”表示5个任意字母。\n    \n    -- 3.2　查询姓名由5个字母构成，并且第5个字母为“i”的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE '____i';\n    \n    -- 3.3　查询姓名以“z”开头的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE 'z%';\n    -- 其中“%”匹配0~n个任何字母。\n    \n    -- 3.4　查询姓名中第2个字母为“i”的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE '_i%';\n    \n    -- 3.5　查询姓名中包含“a”字母的学生记录\n    SELECT * \n    FROM stu\n    WHERE sname LIKE '%a%';\n\n### 字段控制查询 ###\n\n    SELECT * FROM emp;\n    -- 去除重复记录\n    SELECT DISTINCT deptno,mgr FROM emp;\n    \n    -- 查看雇员的月薪与佣金之和\n    SELECT * ,sal+comm FROM emp;\n    -- 过滤null 并起别名\n    SELECT * ,sal+IFNULL(comm,0) AS total FROM emp;\n\n### 排序  ###\n\n> order by 列名 asc(默认) desc\n\n    -- 查询所有学生记录，按年龄升序排序\n    SELECT * FROM stu ORDER BY age ASC;\n    -- 查询所有学生记录，按年龄降序排序\n    SELECT * FROM stu ORDER BY age DESC;\n    -- 查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序\n    SELECT * FROM emp\n    ORDER BY sal DESC,empno ASC;\n\n### 聚合函数 ###\n\n> 聚合函数是用来做纵向运算的函数：\n> \n> COUNT()：统计指定列不为NULL的记录行数；\n> \n> MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；\n> \n> MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；\n> \n> SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；\n> \n> AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；\n\n    -- 查询emp表中记录数：\n    SELECT COUNT(*) AS cnt FROM emp;\n    \n    -- 查询emp表中有佣金的人数：\n    SELECT COUNT(comm) cnt FROM emp;\n    -- 注意，因为count()函数中给出的是comm列，那么只统计comm列非NULL的行数。\n    \n    -- 查询emp表中月薪大于2500的人数：\n    SELECT COUNT(*) FROM emp\n    WHERE sal > 2500;\n    \n    -- 统计月薪与佣金之和大于2500元的人数：\n    SELECT COUNT(*) AS cnt FROM emp WHERE sal+IFNULL(comm,0) > 2500;\n    \n    -- 查询有佣金的人数，有领导的人数：\n    SELECT COUNT(comm), COUNT(mgr) FROM emp;\n    \n    \n    -- 查询所有雇员月薪和：\n    SELECT SUM(sal) FROM emp;\n    \n    -- 查询所有雇员月薪和，以及所有雇员佣金和：\n    SELECT SUM(sal), SUM(comm) FROM emp;\n    \n    -- 查询所有雇员月薪+佣金和：\n    SELECT SUM(sal+IFNULL(comm,0)) FROM emp;\n    \n    -- 统计所有员工平均工资：\n    SELECT AVG(sal) FROM emp;\n    \n    -- MAX和MIN\n    -- 查询最高工资和最低工资：\n    SELECT MAX(sal), MIN(sal) FROM emp;\n\n### 分组查询 ###\n\n> 注：凡和聚合函数同时出现的列名，一定要写在group by 之后\n\n    -- 查询每个部门的部门编号和每个部门的工资和：\n    SELECT deptno, SUM(sal)\n    FROM emp\n    GROUP BY deptno;\n    \n    -- 查询每个部门的部门编号以及每个部门的人数：\n    SELECT deptno,COUNT(*)\n    FROM emp\n    GROUP BY deptno;\n    \n    -- 查询每个部门的部门编号以及每个部门工资大于1500的人数：\n    SELECT deptno,COUNT(*)\n    FROM emp\n    WHERE sal>1500\n    GROUP BY deptno;\n    \n    -- 查询工资总和大于9000的部门编号以及工资和：\n    SELECT deptno, SUM(sal)\n    FROM emp\n    GROUP BY deptno\n    HAVING SUM(sal) > 9000;\n\n**注：**\n\n  *having与where的区别:*\n\n\t\t1.having是在分组后对数据进行过滤.\n\n\t\t  where是在分组前对数据进行过滤\n\t\t\n        2.having后面可以使用聚合函数(统计函数)\n\n          where后面不可以使用聚合函数。\n\n*WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束。*\n\n### LIMIT ###\n\n> LIMIT用来限定查询结果的起始行，以及总行数。\n\n    -- 查询5行记录，起始行从0开始\n    SELECT * FROM emp LIMIT 0, 5;\n    -- 查询10行记录，起始行从3开始\n    SELECT * FROM emp LIMIT 3, 10;","slug":"JAVA学习之MySQL","published":1,"updated":"2017-03-22T12:32:51.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6v5000q64xtvjpdutc0","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>本文主要记录MySQL数据库的简单使用。<br>本部分记录了MySQL的安装、卸载，SQL语句的基础。</p>\n<p>转载请注明：转载于Terry Tian的博客（<a href=\"www.mutouspace.cn\">www.mutouspace.cn</a>）!</p>\n</blockquote>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"数据库概述\"><a href=\"#数据库概述\" class=\"headerlink\" title=\"数据库概述\"></a>数据库概述</h1><p><strong>数据库（DataBase，DB）：</strong>指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。(文件系统)</p>\n<p><strong>数据库管理系统（DataBase Management System，DBMS）：</strong>指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。</p>\n<p><em>数据库软件应该为数据库管理系统，数据库是通过数据库管理系统创建和操作的。</em></p>\n<blockquote>\n<p>数据库：存储、维护和管理数据的集合。</p>\n</blockquote>\n<h1 id=\"数据库的安装与配置\"><a href=\"#数据库的安装与配置\" class=\"headerlink\" title=\"数据库的安装与配置\"></a>数据库的安装与配置</h1><h2 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h2><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%877.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%878.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%879.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8710.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8711.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8712.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8713.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8714.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8715.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8716.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8717.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8718.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8719.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8720.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8721.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8722.png\" alt=\"\"></p>\n<h2 id=\"卸载与修改密码\"><a href=\"#卸载与修改密码\" class=\"headerlink\" title=\"卸载与修改密码\"></a>卸载与修改密码</h2><p><strong>卸载：</strong></p>\n<ol>\n<li><p>停止mysql服务   net stop mysql       启动mysql服务  net start mysql</p>\n</li>\n<li><p>卸载mysql</p>\n</li>\n<li><p>找到mysql 安装目录下的 my.ini   datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“</p>\n</li>\n</ol>\n<p><strong>修改密码</strong></p>\n<p>运行cmd</p>\n<p> 安装成功了打开cmd  –&gt; mysql -uroot -p你的密码</p>\n<p> 修改mysql root用户密码</p>\n<p>1) 停止mysql服务 运行输入services.msc 停止mysql服务</p>\n<pre><code>或者 cmd --&gt;  net stop mysql\n</code></pre><p>2) 在cmd下 输入 mysqld –skip-grant-tables 启动服务器 光标不动 （不要关闭该窗口）</p>\n<p>3) 新打开cmd 输入mysql -u root -p 不需要密码 </p>\n<pre><code>use mysql;\n\nupdate user set password=password(&apos;abc&apos;) WHERE User=&apos;root&apos;;\n</code></pre><p>4) 关闭两个cmd窗口 在任务管理器结束mysqld 进程 </p>\n<p>5) 在服务管理页面 重启mysql 服务</p>\n<p>密码修改完成</p>\n<h1 id=\"sql概述\"><a href=\"#sql概述\" class=\"headerlink\" title=\"sql概述\"></a>sql概述</h1><blockquote>\n<p>SQL：Structure Query Language。（结构化查询语言）</p>\n</blockquote>\n<h1 id=\"Sql的分类\"><a href=\"#Sql的分类\" class=\"headerlink\" title=\"Sql的分类\"></a>Sql的分类</h1><p><strong>DDL（Data Definition Language）：</strong>数据定义语言，用来定义数据库对象：库、表、列等；     CREATE、 ALTER、DROP</p>\n<p><strong>DML（Data Manipulation Language）：</strong>数据操作语言，用来定义数据库记录（数据）；        INSERT、 UPDATE、 DELETE</p>\n<p><strong>DCL（Data Control Language）：</strong>数据控制语言，用来定义访问权限和安全级别；</p>\n<p><strong>DQL（Data Query Language）：</strong>数据查询语言，用来查询记录（数据）。SELECT</p>\n<p><strong>注意：sql语句以;结尾</strong></p>\n<h2 id=\"DDL-操作数据库、表、列等\"><a href=\"#DDL-操作数据库、表、列等\" class=\"headerlink\" title=\"DDL:操作数据库、表、列等\"></a>DDL:操作数据库、表、列等</h2><blockquote>\n<p>使用的关键字：CREATE、 ALTER、 DROP</p>\n</blockquote>\n<p><strong>example:</strong></p>\n<pre><code>CREATE TABLE emp (\nid INT,\nNAME VARCHAR(50),\ngender VARCHAR(10),\nbirthday DATE,\nentry_date DATE,\njob VARCHAR(100),\nsalary DOUBLE,\nRESUME VARCHAR(200)\n);\n-- 查看表的字段信息\nDESC emp;\n-- 在emp TABLE中添加image列\nALTER TABLE emp ADD image BLOB;\n-- 修改job列，使其长度为60。\nALTER TABLE emp MODIFY job VARCHAR(60);\n-- 删除image列,一次只能删一列。\nALTER TABLE emp DROP image;\n-- 表名改为USER。\nRENAME TABLE emp TO USER;\n-- 查看表格的创建细节\nSHOW CREATE TABLE USER;\n-- 修改表的字符集为gbk\nALTER TABLE USER CHARACTER SET gbk;\n-- 列名NAME修改为username\nALTER TABLE USER CHANGE NAME username VARCHAR(100);\n\nDESC USER;\n-- 删除表\nDROP TABLE USER ;\n</code></pre><h2 id=\"DML操作-重要\"><a href=\"#DML操作-重要\" class=\"headerlink\" title=\"DML操作(重要)\"></a>DML操作(重要)</h2><h3 id=\"插入操作：INSERT\"><a href=\"#插入操作：INSERT\" class=\"headerlink\" title=\"插入操作：INSERT\"></a>插入操作：INSERT</h3><p><strong>语法：</strong> INSERT INTO 表名（列名1，列名2 …）VALUES(列值1，列值2…);<br><strong>注意：</strong>列名与列值的类型、个数、顺序要一一对应。</p>\n<p>可以把列名当做java中的形参，把列值当做实参。</p>\n<p>值不要超出列定义的长度。</p>\n<p>如果插入空值，请使用null</p>\n<p>插入的日期和字符一样，都使用引号括起来。</p>\n<p><strong>练习 ：</strong></p>\n<pre><code>create table emp(\nid int,\nname varchar(100),\ngender varchar(10),\nbirthday date,\nsalary float(10,2),\nentry_date date,\nresume text\n);\n\nINSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\nVALUES(1,&apos;zhangsan&apos;,&apos;female&apos;,&apos;1990-5-10&apos;,10000,&apos;2015-5-5-&apos;,&apos;good girl&apos;);\n\nINSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\nVALUES(2,&apos;lisi&apos;,&apos;male&apos;,&apos;1995-5-10&apos;,10000,&apos;2015-5-5&apos;,&apos;good boy&apos;);\n\nINSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\nVALUES(3,&apos;wangwu&apos;,&apos;male&apos;,&apos;1995-5-10&apos;,10000,&apos;2015-5-5&apos;,&apos;good boy&apos;);\n\n-- 批量插入：\nINSERT INTO emp VALUES\n(4,&apos;zs&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL),\n(5,&apos;li&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL),\n(6,&apos;ww&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL);\n</code></pre><h3 id=\"修改操作-UPDATE\"><a href=\"#修改操作-UPDATE\" class=\"headerlink\" title=\"修改操作 UPDATE\"></a>修改操作 UPDATE</h3><p><strong>语法：</strong>UPDATE 表名 SET 列名1=列值1，列名2=列值2 。。。 WHERE 列名=值</p>\n<p><strong>练习 ：</strong></p>\n<pre><code>-- 将所有员工薪水修改为5000元。\nUPDATE emp SET salary=5000 \n-- 将姓名为’tom’的员工薪水修改为3000元。\nUPDATE emp SET salary=3000 WHERE NAME=&apos;tom&apos;;\n-- 将姓名为’jerry’的员工薪水修改为4000元,gender改为female。\n UPDATE emp SET salary=4000,gender=&apos;female&apos; WHERE NAME=&apos;jerry&apos;;\n-- 将蔡依林的薪水在原有基础上增加1000元。\n UPDATE emp SET salary=salary+1000 WHERE NAME = &apos;蔡依林&apos;;\n</code></pre><h3 id=\"删除操作-DELETE\"><a href=\"#删除操作-DELETE\" class=\"headerlink\" title=\"删除操作 DELETE\"></a>删除操作 DELETE</h3><p><strong>语法 ：</strong> DELETE FROM 表名 【WHERE 列名=值】</p>\n<p><strong>练习 ：</strong></p>\n<pre><code>-- 删除表中名称为’zs’的记录。\nDELETE FROM emp WHERE NAME=‘tom’;\n-- 删除表中所有记录。\nDELETE FROM emp;\n-- 使用truncate删除表中记录。\nTRUNCATE TABLE emp;\n</code></pre><blockquote>\n<p>DELETE 删除表中的数据，表结构还在;删除后的数据可以找回<br> TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。<br> 删除的数据不能找回。执行速度比DELETE快。</p>\n</blockquote>\n<h2 id=\"DQL操作\"><a href=\"#DQL操作\" class=\"headerlink\" title=\"DQL操作\"></a>DQL操作</h2><blockquote>\n<p>DQL数据查询语言 （重要）<br>数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。<br>查询返回的结果集是一张虚拟表。</p>\n</blockquote>\n<p><strong>查询关键字：</strong>SELECT<br><strong>语法：</strong> SELECT 列名 FROM表名<br>【WHERE –&gt; GROUP BY –&gt;HAVING–&gt; ORDER BY】</p>\n<p><strong>语法：</strong></p>\n<pre><code>SELECT selection_list /*要查询的列名称*/\nFROM table_list /*要查询的表名称*/\nWHERE condition /*行条件*/\nGROUP BY grouping_columns /*对结果分组*/\nHAVING condition /*分组后的行条件*/\nORDER BY sorting_columns /*对结果分组*/\nLIMIT offset_start, row_count /*结果限定*/\n</code></pre><p>开始之前让我们先建几个表并插入数据</p>\n<pre><code>CREATE TABLE stu (\n    sid    CHAR(6),\n    sname        VARCHAR(50),\n    age        INT,\n    gender    VARCHAR(50)\n);\n\nINSERT INTO stu VALUES(&apos;S_1001&apos;, &apos;liuYi&apos;, 35, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1002&apos;, &apos;chenEr&apos;, 15, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1003&apos;, &apos;zhangSan&apos;, 95, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1004&apos;, &apos;liSi&apos;, 65, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1005&apos;, &apos;wangWu&apos;, 55, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1006&apos;, &apos;zhaoLiu&apos;, 75, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1007&apos;, &apos;sunQi&apos;, 25, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1008&apos;, &apos;zhouBa&apos;, 45, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1009&apos;, &apos;wuJiu&apos;, 85, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1010&apos;, &apos;zhengShi&apos;, 5, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1011&apos;, &apos;xxx&apos;, NULL, NULL);\n\n\nCREATE TABLE emp(\n    empno        INT,\n    ename        VARCHAR(50),\n    job        VARCHAR(50),\n    mgr        INT,\n    hiredate    DATE,\n    sal        DECIMAL(7,2),\n    comm        DECIMAL(7,2),\n    deptno        INT\n) ;\n\nINSERT INTO emp VALUES(7369,&apos;SMITH&apos;,&apos;CLERK&apos;,7902,&apos;1980-12-17&apos;,800,NULL,20);\nINSERT INTO emp VALUES(7499,&apos;ALLEN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-20&apos;,1600,300,30);\nINSERT INTO emp VALUES(7521,&apos;WARD&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-22&apos;,1250,500,30);\nINSERT INTO emp VALUES(7566,&apos;JONES&apos;,&apos;MANAGER&apos;,7839,&apos;1981-04-02&apos;,2975,NULL,20);\nINSERT INTO emp VALUES(7654,&apos;MARTIN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-28&apos;,1250,1400,30);\nINSERT INTO emp VALUES(7698,&apos;BLAKE&apos;,&apos;MANAGER&apos;,7839,&apos;1981-05-01&apos;,2850,NULL,30);\nINSERT INTO emp VALUES(7782,&apos;CLARK&apos;,&apos;MANAGER&apos;,7839,&apos;1981-06-09&apos;,2450,NULL,10);\nINSERT INTO emp VALUES(7788,&apos;SCOTT&apos;,&apos;ANALYST&apos;,7566,&apos;1987-04-19&apos;,3000,NULL,20);\nINSERT INTO emp VALUES(7839,&apos;KING&apos;,&apos;PRESIDENT&apos;,NULL,&apos;1981-11-17&apos;,5000,NULL,10);\nINSERT INTO emp VALUES(7844,&apos;TURNER&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-08&apos;,1500,0,30);\nINSERT INTO emp VALUES(7876,&apos;ADAMS&apos;,&apos;CLERK&apos;,7788,&apos;1987-05-23&apos;,1100,NULL,20);\nINSERT INTO emp VALUES(7900,&apos;JAMES&apos;,&apos;CLERK&apos;,7698,&apos;1981-12-03&apos;,950,NULL,30);\nINSERT INTO emp VALUES(7902,&apos;FORD&apos;,&apos;ANALYST&apos;,7566,&apos;1981-12-03&apos;,3000,NULL,20);\nINSERT INTO emp VALUES(7934,&apos;MILLER&apos;,&apos;CLERK&apos;,7782,&apos;1982-01-23&apos;,1300,NULL,10);\n\n\nCREATE TABLE dept(\n    deptno        INT,\n    dname        VARCHAR(14),\n    loc        VARCHAR(13)\n);\n\nINSERT INTO dept VALUES(10, &apos;ACCOUNTING&apos;, &apos;NEW YORK&apos;);\nINSERT INTO dept VALUES(20, &apos;RESEARCH&apos;, &apos;DALLAS&apos;);\nINSERT INTO dept VALUES(30, &apos;SALES&apos;, &apos;CHICAGO&apos;);\nINSERT INTO dept VALUES(40, &apos;OPERATIONS&apos;, &apos;BOSTON&apos;);\n</code></pre><h3 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h3><p>1.1　查询所有列</p>\n<pre><code>SELECT * FROM stu;\n</code></pre><p>1.2　查询指定列</p>\n<pre><code>SELECT sid, sname, age FROM stu;\n</code></pre><h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><pre><code>-- 查询性别为女，并且年龄&gt;=50的记录\nSELECT * FROM stu WHERE gender=&apos;female&apos; AND age &gt;=50;\n\n-- 查询学号为S_1001，或者姓名为liSi的记录\nSELECT * FROM stu \nWHERE sid =&apos;S_1001&apos; OR sname=&apos;liSi&apos;;\n\n-- 查询学号为S_1001，S_1002，S_1003的记录\nSELECT * FROM stu \nWHERE sid IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;);\n\n-- 查询学号不是S_1001，S_1002，S_1003的记录\nSELECT * FROM stu \nWHERE sid NOT IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;);\n\n-- 查询年龄为null的记录\nSELECT * FROM stu\nWHERE age IS NULL;\n\n-- 查询年龄在20到40之间的学生记录\nSELECT * \nFROM stu\nWHERE age&gt;=20 AND age&lt;=40;\n-- 或者\nSELECT * \nFROM stu \nWHERE age BETWEEN 20 AND 40;\n\n-- 查询性别非男的学生记录\nSELECT * \nFROM stu\nWHERE gender!=&apos;male&apos;;\n-- 或者\nSELECT * \nFROM stu\nWHERE gender&lt;&gt;&apos;male&apos;;\n-- 或者\nSELECT * \nFROM stu\nWHERE NOT gender=&apos;male&apos;;\n\n-- 查询姓名不为null的学生记录\n\nSELECT * FROM stu WHERE sname IS NOT NULL;\n</code></pre><h3 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h3><blockquote>\n<p>当想查询姓名中包含a字母的学生时就需要使用模糊查询了。模糊查询需要使用关键字LIKE。</p>\n</blockquote>\n<p><strong>通配符:</strong> </p>\n<pre><code>_ ：任意一个字符\n\n  % ：任意0~n个字符\n</code></pre><p><strong>Example:</strong></p>\n<pre><code>-- 查询姓名由5个字母构成的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;_____&apos;;\n-- 模糊查询必须使用LIKE关键字。其中 “_”匹配任意一个字母，5个“_”表示5个任意字母。\n\n-- 3.2　查询姓名由5个字母构成，并且第5个字母为“i”的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;____i&apos;;\n\n-- 3.3　查询姓名以“z”开头的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;z%&apos;;\n-- 其中“%”匹配0~n个任何字母。\n\n-- 3.4　查询姓名中第2个字母为“i”的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;_i%&apos;;\n\n-- 3.5　查询姓名中包含“a”字母的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;%a%&apos;;\n</code></pre><h3 id=\"字段控制查询\"><a href=\"#字段控制查询\" class=\"headerlink\" title=\"字段控制查询\"></a>字段控制查询</h3><pre><code>SELECT * FROM emp;\n-- 去除重复记录\nSELECT DISTINCT deptno,mgr FROM emp;\n\n-- 查看雇员的月薪与佣金之和\nSELECT * ,sal+comm FROM emp;\n-- 过滤null 并起别名\nSELECT * ,sal+IFNULL(comm,0) AS total FROM emp;\n</code></pre><h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><blockquote>\n<p>order by 列名 asc(默认) desc</p>\n</blockquote>\n<pre><code>-- 查询所有学生记录，按年龄升序排序\nSELECT * FROM stu ORDER BY age ASC;\n-- 查询所有学生记录，按年龄降序排序\nSELECT * FROM stu ORDER BY age DESC;\n-- 查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序\nSELECT * FROM emp\nORDER BY sal DESC,empno ASC;\n</code></pre><h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><blockquote>\n<p>聚合函数是用来做纵向运算的函数：</p>\n<p>COUNT()：统计指定列不为NULL的记录行数；</p>\n<p>MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</p>\n<p>MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</p>\n<p>SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</p>\n<p>AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</p>\n</blockquote>\n<pre><code>-- 查询emp表中记录数：\nSELECT COUNT(*) AS cnt FROM emp;\n\n-- 查询emp表中有佣金的人数：\nSELECT COUNT(comm) cnt FROM emp;\n-- 注意，因为count()函数中给出的是comm列，那么只统计comm列非NULL的行数。\n\n-- 查询emp表中月薪大于2500的人数：\nSELECT COUNT(*) FROM emp\nWHERE sal &gt; 2500;\n\n-- 统计月薪与佣金之和大于2500元的人数：\nSELECT COUNT(*) AS cnt FROM emp WHERE sal+IFNULL(comm,0) &gt; 2500;\n\n-- 查询有佣金的人数，有领导的人数：\nSELECT COUNT(comm), COUNT(mgr) FROM emp;\n\n\n-- 查询所有雇员月薪和：\nSELECT SUM(sal) FROM emp;\n\n-- 查询所有雇员月薪和，以及所有雇员佣金和：\nSELECT SUM(sal), SUM(comm) FROM emp;\n\n-- 查询所有雇员月薪+佣金和：\nSELECT SUM(sal+IFNULL(comm,0)) FROM emp;\n\n-- 统计所有员工平均工资：\nSELECT AVG(sal) FROM emp;\n\n-- MAX和MIN\n-- 查询最高工资和最低工资：\nSELECT MAX(sal), MIN(sal) FROM emp;\n</code></pre><h3 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h3><blockquote>\n<p>注：凡和聚合函数同时出现的列名，一定要写在group by 之后</p>\n</blockquote>\n<pre><code>-- 查询每个部门的部门编号和每个部门的工资和：\nSELECT deptno, SUM(sal)\nFROM emp\nGROUP BY deptno;\n\n-- 查询每个部门的部门编号以及每个部门的人数：\nSELECT deptno,COUNT(*)\nFROM emp\nGROUP BY deptno;\n\n-- 查询每个部门的部门编号以及每个部门工资大于1500的人数：\nSELECT deptno,COUNT(*)\nFROM emp\nWHERE sal&gt;1500\nGROUP BY deptno;\n\n-- 查询工资总和大于9000的部门编号以及工资和：\nSELECT deptno, SUM(sal)\nFROM emp\nGROUP BY deptno\nHAVING SUM(sal) &gt; 9000;\n</code></pre><p><strong>注：</strong></p>\n<p>  <em>having与where的区别:</em></p>\n<pre><code>1.having是在分组后对数据进行过滤.\n\n  where是在分组前对数据进行过滤\n\n2.having后面可以使用聚合函数(统计函数)\n\n  where后面不可以使用聚合函数。\n</code></pre><p><em>WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束。</em></p>\n<h3 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h3><blockquote>\n<p>LIMIT用来限定查询结果的起始行，以及总行数。</p>\n</blockquote>\n<pre><code>-- 查询5行记录，起始行从0开始\nSELECT * FROM emp LIMIT 0, 5;\n-- 查询10行记录，起始行从3开始\nSELECT * FROM emp LIMIT 3, 10;\n</code></pre></the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>本文主要记录MySQL数据库的简单使用。<br>本部分记录了MySQL的安装、卸载，SQL语句的基础。</p>\n<p>转载请注明：转载于Terry Tian的博客（<a href=\"www.mutouspace.cn\">www.mutouspace.cn</a>）!</p>\n</blockquote></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"数据库概述\"><a href=\"#数据库概述\" class=\"headerlink\" title=\"数据库概述\"></a>数据库概述</h1><p><strong>数据库（DataBase，DB）：</strong>指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。(文件系统)</p>\n<p><strong>数据库管理系统（DataBase Management System，DBMS）：</strong>指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。</p>\n<p><em>数据库软件应该为数据库管理系统，数据库是通过数据库管理系统创建和操作的。</em></p>\n<blockquote>\n<p>数据库：存储、维护和管理数据的集合。</p>\n</blockquote>\n<h1 id=\"数据库的安装与配置\"><a href=\"#数据库的安装与配置\" class=\"headerlink\" title=\"数据库的安装与配置\"></a>数据库的安装与配置</h1><h2 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h2><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%877.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%878.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%879.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8710.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8711.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8712.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8713.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8714.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8715.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8716.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8717.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8718.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8719.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8720.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8721.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8722.png\" alt=\"\"></p>\n<h2 id=\"卸载与修改密码\"><a href=\"#卸载与修改密码\" class=\"headerlink\" title=\"卸载与修改密码\"></a>卸载与修改密码</h2><p><strong>卸载：</strong></p>\n<ol>\n<li><p>停止mysql服务   net stop mysql       启动mysql服务  net start mysql</p>\n</li>\n<li><p>卸载mysql</p>\n</li>\n<li><p>找到mysql 安装目录下的 my.ini   datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“</p>\n</li>\n</ol>\n<p><strong>修改密码</strong></p>\n<p>运行cmd</p>\n<p> 安装成功了打开cmd  –&gt; mysql -uroot -p你的密码</p>\n<p> 修改mysql root用户密码</p>\n<p>1) 停止mysql服务 运行输入services.msc 停止mysql服务</p>\n<pre><code>或者 cmd --&gt;  net stop mysql\n</code></pre><p>2) 在cmd下 输入 mysqld –skip-grant-tables 启动服务器 光标不动 （不要关闭该窗口）</p>\n<p>3) 新打开cmd 输入mysql -u root -p 不需要密码 </p>\n<pre><code>use mysql;\n\nupdate user set password=password(&apos;abc&apos;) WHERE User=&apos;root&apos;;\n</code></pre><p>4) 关闭两个cmd窗口 在任务管理器结束mysqld 进程 </p>\n<p>5) 在服务管理页面 重启mysql 服务</p>\n<p>密码修改完成</p>\n<h1 id=\"sql概述\"><a href=\"#sql概述\" class=\"headerlink\" title=\"sql概述\"></a>sql概述</h1><blockquote>\n<p>SQL：Structure Query Language。（结构化查询语言）</p>\n</blockquote>\n<h1 id=\"Sql的分类\"><a href=\"#Sql的分类\" class=\"headerlink\" title=\"Sql的分类\"></a>Sql的分类</h1><p><strong>DDL（Data Definition Language）：</strong>数据定义语言，用来定义数据库对象：库、表、列等；     CREATE、 ALTER、DROP</p>\n<p><strong>DML（Data Manipulation Language）：</strong>数据操作语言，用来定义数据库记录（数据）；        INSERT、 UPDATE、 DELETE</p>\n<p><strong>DCL（Data Control Language）：</strong>数据控制语言，用来定义访问权限和安全级别；</p>\n<p><strong>DQL（Data Query Language）：</strong>数据查询语言，用来查询记录（数据）。SELECT</p>\n<p><strong>注意：sql语句以;结尾</strong></p>\n<h2 id=\"DDL-操作数据库、表、列等\"><a href=\"#DDL-操作数据库、表、列等\" class=\"headerlink\" title=\"DDL:操作数据库、表、列等\"></a>DDL:操作数据库、表、列等</h2><blockquote>\n<p>使用的关键字：CREATE、 ALTER、 DROP</p>\n</blockquote>\n<p><strong>example:</strong></p>\n<pre><code>CREATE TABLE emp (\nid INT,\nNAME VARCHAR(50),\ngender VARCHAR(10),\nbirthday DATE,\nentry_date DATE,\njob VARCHAR(100),\nsalary DOUBLE,\nRESUME VARCHAR(200)\n);\n-- 查看表的字段信息\nDESC emp;\n-- 在emp TABLE中添加image列\nALTER TABLE emp ADD image BLOB;\n-- 修改job列，使其长度为60。\nALTER TABLE emp MODIFY job VARCHAR(60);\n-- 删除image列,一次只能删一列。\nALTER TABLE emp DROP image;\n-- 表名改为USER。\nRENAME TABLE emp TO USER;\n-- 查看表格的创建细节\nSHOW CREATE TABLE USER;\n-- 修改表的字符集为gbk\nALTER TABLE USER CHARACTER SET gbk;\n-- 列名NAME修改为username\nALTER TABLE USER CHANGE NAME username VARCHAR(100);\n\nDESC USER;\n-- 删除表\nDROP TABLE USER ;\n</code></pre><h2 id=\"DML操作-重要\"><a href=\"#DML操作-重要\" class=\"headerlink\" title=\"DML操作(重要)\"></a>DML操作(重要)</h2><h3 id=\"插入操作：INSERT\"><a href=\"#插入操作：INSERT\" class=\"headerlink\" title=\"插入操作：INSERT\"></a>插入操作：INSERT</h3><p><strong>语法：</strong> INSERT INTO 表名（列名1，列名2 …）VALUES(列值1，列值2…);<br><strong>注意：</strong>列名与列值的类型、个数、顺序要一一对应。</p>\n<p>可以把列名当做java中的形参，把列值当做实参。</p>\n<p>值不要超出列定义的长度。</p>\n<p>如果插入空值，请使用null</p>\n<p>插入的日期和字符一样，都使用引号括起来。</p>\n<p><strong>练习 ：</strong></p>\n<pre><code>create table emp(\nid int,\nname varchar(100),\ngender varchar(10),\nbirthday date,\nsalary float(10,2),\nentry_date date,\nresume text\n);\n\nINSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\nVALUES(1,&apos;zhangsan&apos;,&apos;female&apos;,&apos;1990-5-10&apos;,10000,&apos;2015-5-5-&apos;,&apos;good girl&apos;);\n\nINSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\nVALUES(2,&apos;lisi&apos;,&apos;male&apos;,&apos;1995-5-10&apos;,10000,&apos;2015-5-5&apos;,&apos;good boy&apos;);\n\nINSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)\nVALUES(3,&apos;wangwu&apos;,&apos;male&apos;,&apos;1995-5-10&apos;,10000,&apos;2015-5-5&apos;,&apos;good boy&apos;);\n\n-- 批量插入：\nINSERT INTO emp VALUES\n(4,&apos;zs&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL),\n(5,&apos;li&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL),\n(6,&apos;ww&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL);\n</code></pre><h3 id=\"修改操作-UPDATE\"><a href=\"#修改操作-UPDATE\" class=\"headerlink\" title=\"修改操作 UPDATE\"></a>修改操作 UPDATE</h3><p><strong>语法：</strong>UPDATE 表名 SET 列名1=列值1，列名2=列值2 。。。 WHERE 列名=值</p>\n<p><strong>练习 ：</strong></p>\n<pre><code>-- 将所有员工薪水修改为5000元。\nUPDATE emp SET salary=5000 \n-- 将姓名为’tom’的员工薪水修改为3000元。\nUPDATE emp SET salary=3000 WHERE NAME=&apos;tom&apos;;\n-- 将姓名为’jerry’的员工薪水修改为4000元,gender改为female。\n UPDATE emp SET salary=4000,gender=&apos;female&apos; WHERE NAME=&apos;jerry&apos;;\n-- 将蔡依林的薪水在原有基础上增加1000元。\n UPDATE emp SET salary=salary+1000 WHERE NAME = &apos;蔡依林&apos;;\n</code></pre><h3 id=\"删除操作-DELETE\"><a href=\"#删除操作-DELETE\" class=\"headerlink\" title=\"删除操作 DELETE\"></a>删除操作 DELETE</h3><p><strong>语法 ：</strong> DELETE FROM 表名 【WHERE 列名=值】</p>\n<p><strong>练习 ：</strong></p>\n<pre><code>-- 删除表中名称为’zs’的记录。\nDELETE FROM emp WHERE NAME=‘tom’;\n-- 删除表中所有记录。\nDELETE FROM emp;\n-- 使用truncate删除表中记录。\nTRUNCATE TABLE emp;\n</code></pre><blockquote>\n<p>DELETE 删除表中的数据，表结构还在;删除后的数据可以找回<br> TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。<br> 删除的数据不能找回。执行速度比DELETE快。</p>\n</blockquote>\n<h2 id=\"DQL操作\"><a href=\"#DQL操作\" class=\"headerlink\" title=\"DQL操作\"></a>DQL操作</h2><blockquote>\n<p>DQL数据查询语言 （重要）<br>数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。<br>查询返回的结果集是一张虚拟表。</p>\n</blockquote>\n<p><strong>查询关键字：</strong>SELECT<br><strong>语法：</strong> SELECT 列名 FROM表名<br>【WHERE –&gt; GROUP BY –&gt;HAVING–&gt; ORDER BY】</p>\n<p><strong>语法：</strong></p>\n<pre><code>SELECT selection_list /*要查询的列名称*/\nFROM table_list /*要查询的表名称*/\nWHERE condition /*行条件*/\nGROUP BY grouping_columns /*对结果分组*/\nHAVING condition /*分组后的行条件*/\nORDER BY sorting_columns /*对结果分组*/\nLIMIT offset_start, row_count /*结果限定*/\n</code></pre><p>开始之前让我们先建几个表并插入数据</p>\n<pre><code>CREATE TABLE stu (\n    sid    CHAR(6),\n    sname        VARCHAR(50),\n    age        INT,\n    gender    VARCHAR(50)\n);\n\nINSERT INTO stu VALUES(&apos;S_1001&apos;, &apos;liuYi&apos;, 35, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1002&apos;, &apos;chenEr&apos;, 15, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1003&apos;, &apos;zhangSan&apos;, 95, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1004&apos;, &apos;liSi&apos;, 65, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1005&apos;, &apos;wangWu&apos;, 55, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1006&apos;, &apos;zhaoLiu&apos;, 75, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1007&apos;, &apos;sunQi&apos;, 25, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1008&apos;, &apos;zhouBa&apos;, 45, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1009&apos;, &apos;wuJiu&apos;, 85, &apos;male&apos;);\nINSERT INTO stu VALUES(&apos;S_1010&apos;, &apos;zhengShi&apos;, 5, &apos;female&apos;);\nINSERT INTO stu VALUES(&apos;S_1011&apos;, &apos;xxx&apos;, NULL, NULL);\n\n\nCREATE TABLE emp(\n    empno        INT,\n    ename        VARCHAR(50),\n    job        VARCHAR(50),\n    mgr        INT,\n    hiredate    DATE,\n    sal        DECIMAL(7,2),\n    comm        DECIMAL(7,2),\n    deptno        INT\n) ;\n\nINSERT INTO emp VALUES(7369,&apos;SMITH&apos;,&apos;CLERK&apos;,7902,&apos;1980-12-17&apos;,800,NULL,20);\nINSERT INTO emp VALUES(7499,&apos;ALLEN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-20&apos;,1600,300,30);\nINSERT INTO emp VALUES(7521,&apos;WARD&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-22&apos;,1250,500,30);\nINSERT INTO emp VALUES(7566,&apos;JONES&apos;,&apos;MANAGER&apos;,7839,&apos;1981-04-02&apos;,2975,NULL,20);\nINSERT INTO emp VALUES(7654,&apos;MARTIN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-28&apos;,1250,1400,30);\nINSERT INTO emp VALUES(7698,&apos;BLAKE&apos;,&apos;MANAGER&apos;,7839,&apos;1981-05-01&apos;,2850,NULL,30);\nINSERT INTO emp VALUES(7782,&apos;CLARK&apos;,&apos;MANAGER&apos;,7839,&apos;1981-06-09&apos;,2450,NULL,10);\nINSERT INTO emp VALUES(7788,&apos;SCOTT&apos;,&apos;ANALYST&apos;,7566,&apos;1987-04-19&apos;,3000,NULL,20);\nINSERT INTO emp VALUES(7839,&apos;KING&apos;,&apos;PRESIDENT&apos;,NULL,&apos;1981-11-17&apos;,5000,NULL,10);\nINSERT INTO emp VALUES(7844,&apos;TURNER&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-08&apos;,1500,0,30);\nINSERT INTO emp VALUES(7876,&apos;ADAMS&apos;,&apos;CLERK&apos;,7788,&apos;1987-05-23&apos;,1100,NULL,20);\nINSERT INTO emp VALUES(7900,&apos;JAMES&apos;,&apos;CLERK&apos;,7698,&apos;1981-12-03&apos;,950,NULL,30);\nINSERT INTO emp VALUES(7902,&apos;FORD&apos;,&apos;ANALYST&apos;,7566,&apos;1981-12-03&apos;,3000,NULL,20);\nINSERT INTO emp VALUES(7934,&apos;MILLER&apos;,&apos;CLERK&apos;,7782,&apos;1982-01-23&apos;,1300,NULL,10);\n\n\nCREATE TABLE dept(\n    deptno        INT,\n    dname        VARCHAR(14),\n    loc        VARCHAR(13)\n);\n\nINSERT INTO dept VALUES(10, &apos;ACCOUNTING&apos;, &apos;NEW YORK&apos;);\nINSERT INTO dept VALUES(20, &apos;RESEARCH&apos;, &apos;DALLAS&apos;);\nINSERT INTO dept VALUES(30, &apos;SALES&apos;, &apos;CHICAGO&apos;);\nINSERT INTO dept VALUES(40, &apos;OPERATIONS&apos;, &apos;BOSTON&apos;);\n</code></pre><h3 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h3><p>1.1　查询所有列</p>\n<pre><code>SELECT * FROM stu;\n</code></pre><p>1.2　查询指定列</p>\n<pre><code>SELECT sid, sname, age FROM stu;\n</code></pre><h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><pre><code>-- 查询性别为女，并且年龄&gt;=50的记录\nSELECT * FROM stu WHERE gender=&apos;female&apos; AND age &gt;=50;\n\n-- 查询学号为S_1001，或者姓名为liSi的记录\nSELECT * FROM stu \nWHERE sid =&apos;S_1001&apos; OR sname=&apos;liSi&apos;;\n\n-- 查询学号为S_1001，S_1002，S_1003的记录\nSELECT * FROM stu \nWHERE sid IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;);\n\n-- 查询学号不是S_1001，S_1002，S_1003的记录\nSELECT * FROM stu \nWHERE sid NOT IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;);\n\n-- 查询年龄为null的记录\nSELECT * FROM stu\nWHERE age IS NULL;\n\n-- 查询年龄在20到40之间的学生记录\nSELECT * \nFROM stu\nWHERE age&gt;=20 AND age&lt;=40;\n-- 或者\nSELECT * \nFROM stu \nWHERE age BETWEEN 20 AND 40;\n\n-- 查询性别非男的学生记录\nSELECT * \nFROM stu\nWHERE gender!=&apos;male&apos;;\n-- 或者\nSELECT * \nFROM stu\nWHERE gender&lt;&gt;&apos;male&apos;;\n-- 或者\nSELECT * \nFROM stu\nWHERE NOT gender=&apos;male&apos;;\n\n-- 查询姓名不为null的学生记录\n\nSELECT * FROM stu WHERE sname IS NOT NULL;\n</code></pre><h3 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h3><blockquote>\n<p>当想查询姓名中包含a字母的学生时就需要使用模糊查询了。模糊查询需要使用关键字LIKE。</p>\n</blockquote>\n<p><strong>通配符:</strong> </p>\n<pre><code>_ ：任意一个字符\n\n  % ：任意0~n个字符\n</code></pre><p><strong>Example:</strong></p>\n<pre><code>-- 查询姓名由5个字母构成的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;_____&apos;;\n-- 模糊查询必须使用LIKE关键字。其中 “_”匹配任意一个字母，5个“_”表示5个任意字母。\n\n-- 3.2　查询姓名由5个字母构成，并且第5个字母为“i”的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;____i&apos;;\n\n-- 3.3　查询姓名以“z”开头的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;z%&apos;;\n-- 其中“%”匹配0~n个任何字母。\n\n-- 3.4　查询姓名中第2个字母为“i”的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;_i%&apos;;\n\n-- 3.5　查询姓名中包含“a”字母的学生记录\nSELECT * \nFROM stu\nWHERE sname LIKE &apos;%a%&apos;;\n</code></pre><h3 id=\"字段控制查询\"><a href=\"#字段控制查询\" class=\"headerlink\" title=\"字段控制查询\"></a>字段控制查询</h3><pre><code>SELECT * FROM emp;\n-- 去除重复记录\nSELECT DISTINCT deptno,mgr FROM emp;\n\n-- 查看雇员的月薪与佣金之和\nSELECT * ,sal+comm FROM emp;\n-- 过滤null 并起别名\nSELECT * ,sal+IFNULL(comm,0) AS total FROM emp;\n</code></pre><h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><blockquote>\n<p>order by 列名 asc(默认) desc</p>\n</blockquote>\n<pre><code>-- 查询所有学生记录，按年龄升序排序\nSELECT * FROM stu ORDER BY age ASC;\n-- 查询所有学生记录，按年龄降序排序\nSELECT * FROM stu ORDER BY age DESC;\n-- 查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序\nSELECT * FROM emp\nORDER BY sal DESC,empno ASC;\n</code></pre><h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><blockquote>\n<p>聚合函数是用来做纵向运算的函数：</p>\n<p>COUNT()：统计指定列不为NULL的记录行数；</p>\n<p>MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</p>\n<p>MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</p>\n<p>SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</p>\n<p>AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</p>\n</blockquote>\n<pre><code>-- 查询emp表中记录数：\nSELECT COUNT(*) AS cnt FROM emp;\n\n-- 查询emp表中有佣金的人数：\nSELECT COUNT(comm) cnt FROM emp;\n-- 注意，因为count()函数中给出的是comm列，那么只统计comm列非NULL的行数。\n\n-- 查询emp表中月薪大于2500的人数：\nSELECT COUNT(*) FROM emp\nWHERE sal &gt; 2500;\n\n-- 统计月薪与佣金之和大于2500元的人数：\nSELECT COUNT(*) AS cnt FROM emp WHERE sal+IFNULL(comm,0) &gt; 2500;\n\n-- 查询有佣金的人数，有领导的人数：\nSELECT COUNT(comm), COUNT(mgr) FROM emp;\n\n\n-- 查询所有雇员月薪和：\nSELECT SUM(sal) FROM emp;\n\n-- 查询所有雇员月薪和，以及所有雇员佣金和：\nSELECT SUM(sal), SUM(comm) FROM emp;\n\n-- 查询所有雇员月薪+佣金和：\nSELECT SUM(sal+IFNULL(comm,0)) FROM emp;\n\n-- 统计所有员工平均工资：\nSELECT AVG(sal) FROM emp;\n\n-- MAX和MIN\n-- 查询最高工资和最低工资：\nSELECT MAX(sal), MIN(sal) FROM emp;\n</code></pre><h3 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h3><blockquote>\n<p>注：凡和聚合函数同时出现的列名，一定要写在group by 之后</p>\n</blockquote>\n<pre><code>-- 查询每个部门的部门编号和每个部门的工资和：\nSELECT deptno, SUM(sal)\nFROM emp\nGROUP BY deptno;\n\n-- 查询每个部门的部门编号以及每个部门的人数：\nSELECT deptno,COUNT(*)\nFROM emp\nGROUP BY deptno;\n\n-- 查询每个部门的部门编号以及每个部门工资大于1500的人数：\nSELECT deptno,COUNT(*)\nFROM emp\nWHERE sal&gt;1500\nGROUP BY deptno;\n\n-- 查询工资总和大于9000的部门编号以及工资和：\nSELECT deptno, SUM(sal)\nFROM emp\nGROUP BY deptno\nHAVING SUM(sal) &gt; 9000;\n</code></pre><p><strong>注：</strong></p>\n<p>  <em>having与where的区别:</em></p>\n<pre><code>1.having是在分组后对数据进行过滤.\n\n  where是在分组前对数据进行过滤\n\n2.having后面可以使用聚合函数(统计函数)\n\n  where后面不可以使用聚合函数。\n</code></pre><p><em>WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束。</em></p>\n<h3 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h3><blockquote>\n<p>LIMIT用来限定查询结果的起始行，以及总行数。</p>\n</blockquote>\n<pre><code>-- 查询5行记录，起始行从0开始\nSELECT * FROM emp LIMIT 0, 5;\n-- 查询10行记录，起始行从3开始\nSELECT * FROM emp LIMIT 3, 10;\n</code></pre></The>"},{"title":"JAVA学习之Struts2框架(二)","date":"2017-04-20T13:41:17.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n","source":"_posts/JAVA学习之Struts2框架-二.md","raw":"---\ntitle: JAVA学习之Struts2框架(二)\ndate: 2017-04-20 21:41:17\ncategories: JAVA #文章文类\ntags: [JAVA,框架,Struts2]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n","slug":"JAVA学习之Struts2框架-二","published":1,"updated":"2017-04-20T13:56:25.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6v9000v64xtqjgbgii3","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></The>"},{"title":"JAVA学习之Struts2框架（一）","date":"2017-04-15T12:52:52.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n# Struts2简介 \n\n## Struts2概述 \n\nStruts2是Apache发行的MVC开源框架。注意：它只是表现层（MVC）框架。\n\n## Struts2的来历 \n\n ** Struts1：** 也是apache开发的一套mvc的开源框架。在2005年之前非常流行。\n\n 弊端：Struts1的核心控制器就是一个Servlet。随着使用者的增多，弊端开始出现。\n\n** Struts2：**在long long ago，有一个设计超前的框架XWork，后来推出了XWork1和WebWork2。Struts2就是apache和OpenSymphony组织合并开发出来。*里面包含了WebWork2的核心及Struts的一些特性和功能。除此之外，和Struts1没有任何关系了。*\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 搭建Struts2开发环境 #\n\n## 下载Struts2开发包 ##\n\n[官网：http://struts.apache.org](http://struts.apache.org)\n\n由于国内网络比较好，所以说可能有时候打不开，可以百度一下，下载一份。\n\n## 开发包目录结构 ##\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%BC%80%E5%8F%91%E5%8C%85%E7%9B%AE%E5%BD%951.png)\n\t\t\t\n## 搭建开发环境 ##\n\n### 拷贝必要jar包到classpath中 ###\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6jar%E5%8C%851.png)\n\n   **拷贝哪些jar包？**\n\n   找到Struts2自带的例子中，struts-blank的war包，在它的`\\WEB-INF\\lib`目录下的jar包全拷贝。\n\n### 建立Struts2的配置文件 ###\n \n  at the top of classpath（在最顶层的构建路径）,建立一个默认名称为`struts.xml`的配置文件。\n\n  struts.xml \n\n          <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n          <!DOCTYPE struts PUBLIC\n\t      \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n\t       \"http://struts.apache.org/dtds/struts-2.3.dtd\">\n          <struts>\n    \n          </struts>\n\t\t\t\n   **注意：**\n\n   - 文件名大小写。\n   - 创建位置。\n   - 该名称允许修改，但是我们一般不改。\n\n\n### 配置控制器 ###\n \na、配置位置：在web.xml中\n\nb、配置什么： struts2已经写好了的一个过滤器。\n\n**结论：**\n\nstruts2比struts1优秀的一个体现就是，它用了更为强大的`过滤器`作为控制器了。\n\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\n    <display-name>Struts2Template</display-name>\n     <!-- 配置Struts核心控制器，就是一个过滤器 -->\n     <filter>\n    <filter-name>struts2</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n    <filter-mapping>\n    <filter-name>struts2</filter-name>\n    <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <welcome-file-list>\n      <welcome-file>index.html</welcome-file>\n    </welcome-file-list>\n    </web-app>\n\t\t\t\n### 验证是否成功 ###\n \n部署应用，启动Tomcat，不报错表示搭建成功。\n\n# 第一个Struts2案例 #\n\n> 以下步骤是日后实际开发中经常重复的。\n\n## 建立一个jsp文件 ##\n\n*index.jsp*\n\n    <%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n    <html>\n      <head>\n    <title>Struts入门案例</title>\n      </head> \n     <body>\n    <a href=\"${pageContext.request.contextPath}/hello.action\">访问Struts的第一个入门案例</a>\n    <a href=\"${pageContext.request.contextPath}/hello\">访问Struts的第一个入门案例</a>\n     </body>\n    </html>\n\n\t\t\t\n## 在struts.xml文件中配置 ##\n\n*struts.xml*\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!DOCTYPE struts PUBLIC\n\t\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n\t\"http://struts.apache.org/dtds/struts-2.3.dtd\">\n    <struts>\n      <package name=\"p1\" extends=\"struts-default\" >\n      <!-- \n        name:jsp对应的请求地址；\n        class:指定一个动作类，在这里也就是给hello指定一个动作类\n        method: 对应hello要执行的方法。\n       -->\n     <action name=\"hello\" class=\"cn.terry.web.action.HelloAction\" method=\"sayHello\">\n        <!-- 配置结果视图 -->\n       <result name=\"success\">/success.jsp</result>\n     </action>\n      </package>\n    </struts>\n\t\t\n## 建立动作类和动作方法 ##\n\n*HelloAction.java*\n\n     package cn.terry.web.action;\n\n     public class HelloAction {//动作类\n\n\t/**\n\t * 在动作类中的指定的动作方法\n\t * 动作方法的书写要求：\n\t * \t\t1、都是public的\n\t * \t\t2、返回值必须是一个String\n\t * \t\t3、必须没有参数\n\t * @return\n\t */\n\tpublic String sayHello(){\n\t\tSystem.out.println(\"HelloAction的sayHello方法执行了\");\n\t\treturn \"success\";//与配置文件中result的name取值相对应\n\t}\n    }\n\n\t\t\n## 结果视图页面 ##\n\n*success.jsp*\n\n    <%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n\n    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n    <html>\n      <head>\n    <title>title</title>\n    \n\t<meta http-equiv=\"pragma\" content=\"no-cache\">\n\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\n\t<meta http-equiv=\"expires\" content=\"0\">\n\t<!--\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n\t -->\n\n      </head>\n  \n      <body>\n    操作成功\n      </body>\n    </html>\n\n\t\t\t\n## 测试： ##\n\n只要没有错误，这里就可以得到自己想要的结果。\n\t\t\n## 关于struts.xml没有代码提示的问题 ##\n\n分析原因：没有找到对应的dtd约束文件。\n\n解决办法：\n  \n![](http://olg3gwtbm.bkt.clouddn.com/dtd1.png)\n\n在网上找到struts的.dtd包，放到如图目录中，这个包在网上找就可以。\n\n![](http://olg3gwtbm.bkt.clouddn.com/dtd2.png)\t\n\nok就可以了。\t\t\t\t\t\n\t\t\t\t\t\t\n## 第一个案例的执行过程 ##\n\n![](http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B1.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B2.png)\n\t\t\t\n# Struts2的配置文件 #\n\n## 加载时机： ##\n\n当应用被tomcat加载的时候，struts2的配置文件就已经被加载过了。\n\n## 加载顺序 ##\n\n**加载顺序：**default.properties——struts-default.xml——plugins配置——struts.xml——struts.properties——web.xml\n<table>\n<tr><td>顺序</td><td>配置文件名</td><td>所在位置</td><td>说明</td></tr>\n<tr><td>1</td><td>default.properties</td><td>struts2-core-2.3.15.3.jar\\org\\apache\\struts2</td><td>\t不能修改</td></tr>\n<tr><td>2</td><td>struts-default.xml</td><td>struts2-core-2.3.15.3.jar</td><td>\t不能修改</td></tr>\n<tr><td>3</td><td>strtuts-plugin.xml</td><td>在struts2提供的插件jar包中</td><td>\t不能修改</td></tr>\n<tr><td>4</td><td>struts.xml</td><td>我们的应用中</td><td >\t我们修改的：推荐</td></tr>\n<tr><td>5</td><td>struts.properties</td><td>我们的应用中</td><td>\t我们修改的</td></tr>\n<tr><td>6</td><td>web.xml</td><td>我们的应用中</td><td>\t我们修改的，可以给过滤器配置参数</td></tr>\n</table>\n\n**注意：**\n\n1、Struts2提供了两种配置的方式。一种是key=value的方式，即使用.properties文件。另一种是xml文件配置。`我们推荐使用xml文件（它能描述层级关系）。`\n\n2、当多个配置文件中，有相同的参数，后面的会把前面的值给覆盖了。\n\n# Struts2框架提供的常量 #\n\n## 常用的常量 ##\n\n常量定义在了default.properties配置文件中，体现形式都是key=value。所有的struts2应用都会用到这些常量。\n\n常用的：\n<table>\n<tr><td>常量名</td><td>常量值</td><td>说明</td></tr>\n<tr><td>struts.i18n.encoding</td><td>UTF-8</td><td>应用中使用的编码</td></tr>\n<tr><td>struts.objectFactory.spring.autoWire</td><td>name</td><td>和spring框架整合有关</td></tr>\n<tr><td>struts.multipart.parser\t</td><td>jakarta</td><td>\t指定文件上传用的组件</td></tr>\n<tr><td>struts.multipart.maxSize</td><td>\t2097152\t</td><td>文件上传总文件大小限制：2M</td></tr>\n<tr><td>struts.action.extension</td><td>\taction</td><td>\t能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td></tr>\n<tr><td>struts.enable.DynamicMethodInvocation</td><td>\tfalse</td><td>\t是否允许动态方法调用</td></tr>\n<tr><td>struts.devMode</td><td>\tfalse</td><td>\t是否是开发模式。开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。</td></tr>\n<tr><td>struts.ui.theme</td><td>\txhtml</td><td>\t页面展示用的主题</td></tr></table>\n\t\n## 在struts.xml中覆盖常量 ##\n\n使用`<constant name=\"\" value=\"\"></constant>`元素进行覆盖\n\n例如：\n\n    <!-- 修改struts中默认的后缀名 -->\n    <constant name=\"struts.action.extension\" value=\"do\"></constant>\n\n![](http://olg3gwtbm.bkt.clouddn.com/struts%E8%A6%86%E7%9B%96.png)\n\n## 创建struts.properties文件覆盖 ##\n\n在应用的构建路径中创建一个struts.properties的文件。\n\n![](http://olg3gwtbm.bkt.clouddn.com/pro%E8%A6%86%E7%9B%96.png)\n\n# struts.xml配置文件的主要元素 #\n\n## package元素 ##\n\n 1. 属性：\n \n    **name：**包的名称。必须写。且必须唯一。\n\n\t**extends：**一般情况下需要继承struts-default包，但不是必须的。不过如果不继承的话，将无法使用struts2提供的核心功能。\n\t\t\t\t\t\t\t\tstruts-default.xml中定义着struts-default这个包。而struts-default.xml是在我们的struts.xml加载之前加载。\n\n\t**abstract：**把包声明为抽象包，抽象包就是用来被继承的。只要是没有<action>元素的包，就可以声明为抽象包。\n\n\t**namespace：**名称空间。\n\n\t\t\t\t\t`名称空间\t+\t动作名称\t=\t访问路径`\n\t\n  *struts.xml代码片段*\t\n\n         <!-- \n           package元素：是定义一个struts的包，它是把配置文件按照面向对象的思想来管理。分模块开发。\n           name属性：包的名称。具有唯一性。\n           extends属性：指定当前包的父包。它是按照面向对象的思想管理的体现。\n           abstract属性：把包声明为一个抽象包。抽象包是用来被继承的。只有没有action元素的包才能被定义为抽象包。\n           namespace属性：名称空间。当指定了名称空间以后，访问路径就变成了：\n                                                     访问路径 = 名称空间+动作名称。\n                                               当不指定该属性时，该属性有默认值，默认值是\"\",不是\"/\".                                 \n          -->\n         <package name=\"p1\" extends=\"struts-default\" namespace=\"/user\">\t\t\t\t\t\n\t\t\t\t\t\t\t\n 2. packege中的namespace详解\n \n\t namespace的默认值：\n\n\t\t\ta.不写该属性\n\n\t\t\tb.写了该属性，取值是一个\"\".注意：默认值不是/\n\n 3. 动作类的搜索顺序：\n\n ![](http://olg3gwtbm.bkt.clouddn.com/%E5%8A%A8%E4%BD%9C%E7%B1%BB%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png)\n\t\t\t\t\t\t\n## action元素 ##\n\n\n 1. 属性：\n \n\tname：动作名称\n\n\tclass：动作类全名。默认的动作类是：com.opensymphony.xwork2.ActionSupport,是在struts-default.xml中定义的,要想替换默认动作类：在应用的struts.xml中，package中加入：\n\t\t\t\t\t\t\t\n\tmethod：动作类中的方法名称。默认是public String execute(){}\n\n\t\t\t\t\t\t要求：\n\t\t\t\t\t\t\t1.public的\n\t\t\t\t\t\t\t2.返回值必须是String\n\t\t\t\t\t\t\t3.没有参数\n  \n   *struts.xml代码片段*\n\n           <!-- \n              action元素：是用于定义动作名称，动作类和动作方法的映射。以及当出现不同情况时前往指定的结果视图。\n              name属性：动作名称。和jsp中请求的url中的名称对应起来。注意：此处不能写 .action\n              class属性：指定的动作类。\n              method属性：动作类中的方法名称。默认是public String execute(){}\n\t\t\t\t\t\t要求：\n\t\t\t\t\t\t\t1.public的\n\t\t\t\t\t\t\t2.返回值必须是String\n\t\t\t\t\t\t\t3.没有参数\n             -->\n          <action name=\"action1\" class=\"cn.terry.web.action.DemoAction1\" method=\"saveUser\">\n    \n 2. 动作类\n \n\ta.方式一：动作类就是一个POJO（Plain Old Java Object 原始的java对象），非常简单的javabean。\n\t\t\t\t\t\t\t\t\n\tb.方式二：动作类实现com.opensymphony.xwork2.Action接口。\n\n\t常量：给动作方法返回值用的。用常量可以使你的应用规范和统一。\n<table>\n<tr><td>常量变量名</td><td>\t对应的值</td><td>\t说明</td></tr>\n<tr><td>SUCCESS</td><td>\tsuccess</td><td>\t动作方法执行一切OK</td></tr>\n<tr><td>ERROR\t</td><td>error</td><td>\t动作方法执行时遇到了异常</td></tr>\n<tr><td>INPUT</td><td>\tinput</td><td>\t回显</td></tr>\n<tr><td>LOGIN</td><td>\tlogin</td><td>\t一般转向登陆页面</td></tr>\n<tr><td>NONE\t</td><td>none</td><td>\t不转向任何的视图</td></tr></table>\n\n   c.方式三：动作类继承com.opensymphony.xwork2.ActionSupport\t推荐使用\n\t\t\t\t\t\t\t\n 3. 动作的访问\n \n  a.使用通配符：\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/action11.png)\n\t\t\t\t\n  升级版：\n\t\n   ![](http://olg3gwtbm.bkt.clouddn.com/action12.png)\t\n\t\t\n   优先级：绝对匹配优先。使用通配符的按照在配置文件中的先后顺序进行匹配的。\n\n   b.动态方法调用\n\t\t\t\t\n ![](http://olg3gwtbm.bkt.clouddn.com/action13.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/action14.png)\n\n## result元素 ##\n\n1. 属性：\n\n    name：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 \n\t\t\t\n    type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。\n\n    *struts.xml*\n\n          <!--\n           result元素：配置逻辑结果视图；\n           name属性：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 \n           type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。\n                                常用取值：\n                   dispatcher：(默认值)\n\t\t\t\t\t使用请求转发，转向一个页面。\n\t\t\t       redirect：\n\t\t\t\t\t使用重定向，转向一个页面。\n            -->\n          <result name=\"success\">/success.jsp</result>\n\n2. result元素中type的取值\n\n   常用结果类型介绍：\n\n   dispatcher：(默认值)使用请求转发，转向一个页面。\n\n   redirect：使用重定向，转向一个页面。\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/redirect.png)\n\t\t\t\t\t\n   redirectAction：注意：使用的是重定向。\n\n   a.重定向到另一个相同名称空间的动作。\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/redirectAction1.png)\n\t\t\t\t\t\t\n   b.重定向到不同名称空间的动作\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/redirectAction2.png)\n\t\t\t\t\t\t\n   chain：注意： 使用的是请求转发。\n\n   a.转发到另一个相同名称空间的动作。\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/chain1.png)\t\n\t\t\t\t\t\t\t\n   b.请求转发到不同名称空间的动作\t\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/chain2.png)\n\t\t\t\t\t","source":"_posts/JAVA学习之Struts2框架.md","raw":"---\ntitle: JAVA学习之Struts2框架（一）\ndate: 2017-04-15 20:52:52\ncategories: JAVA #文章文类\ntags: [JAVA,框架,Struts2]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n# Struts2简介 \n\n## Struts2概述 \n\nStruts2是Apache发行的MVC开源框架。注意：它只是表现层（MVC）框架。\n\n## Struts2的来历 \n\n ** Struts1：** 也是apache开发的一套mvc的开源框架。在2005年之前非常流行。\n\n 弊端：Struts1的核心控制器就是一个Servlet。随着使用者的增多，弊端开始出现。\n\n** Struts2：**在long long ago，有一个设计超前的框架XWork，后来推出了XWork1和WebWork2。Struts2就是apache和OpenSymphony组织合并开发出来。*里面包含了WebWork2的核心及Struts的一些特性和功能。除此之外，和Struts1没有任何关系了。*\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 搭建Struts2开发环境 #\n\n## 下载Struts2开发包 ##\n\n[官网：http://struts.apache.org](http://struts.apache.org)\n\n由于国内网络比较好，所以说可能有时候打不开，可以百度一下，下载一份。\n\n## 开发包目录结构 ##\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E5%BC%80%E5%8F%91%E5%8C%85%E7%9B%AE%E5%BD%951.png)\n\t\t\t\n## 搭建开发环境 ##\n\n### 拷贝必要jar包到classpath中 ###\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6jar%E5%8C%851.png)\n\n   **拷贝哪些jar包？**\n\n   找到Struts2自带的例子中，struts-blank的war包，在它的`\\WEB-INF\\lib`目录下的jar包全拷贝。\n\n### 建立Struts2的配置文件 ###\n \n  at the top of classpath（在最顶层的构建路径）,建立一个默认名称为`struts.xml`的配置文件。\n\n  struts.xml \n\n          <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n          <!DOCTYPE struts PUBLIC\n\t      \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n\t       \"http://struts.apache.org/dtds/struts-2.3.dtd\">\n          <struts>\n    \n          </struts>\n\t\t\t\n   **注意：**\n\n   - 文件名大小写。\n   - 创建位置。\n   - 该名称允许修改，但是我们一般不改。\n\n\n### 配置控制器 ###\n \na、配置位置：在web.xml中\n\nb、配置什么： struts2已经写好了的一个过滤器。\n\n**结论：**\n\nstruts2比struts1优秀的一个体现就是，它用了更为强大的`过滤器`作为控制器了。\n\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\n    <display-name>Struts2Template</display-name>\n     <!-- 配置Struts核心控制器，就是一个过滤器 -->\n     <filter>\n    <filter-name>struts2</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n    <filter-mapping>\n    <filter-name>struts2</filter-name>\n    <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <welcome-file-list>\n      <welcome-file>index.html</welcome-file>\n    </welcome-file-list>\n    </web-app>\n\t\t\t\n### 验证是否成功 ###\n \n部署应用，启动Tomcat，不报错表示搭建成功。\n\n# 第一个Struts2案例 #\n\n> 以下步骤是日后实际开发中经常重复的。\n\n## 建立一个jsp文件 ##\n\n*index.jsp*\n\n    <%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n    <html>\n      <head>\n    <title>Struts入门案例</title>\n      </head> \n     <body>\n    <a href=\"${pageContext.request.contextPath}/hello.action\">访问Struts的第一个入门案例</a>\n    <a href=\"${pageContext.request.contextPath}/hello\">访问Struts的第一个入门案例</a>\n     </body>\n    </html>\n\n\t\t\t\n## 在struts.xml文件中配置 ##\n\n*struts.xml*\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!DOCTYPE struts PUBLIC\n\t\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n\t\"http://struts.apache.org/dtds/struts-2.3.dtd\">\n    <struts>\n      <package name=\"p1\" extends=\"struts-default\" >\n      <!-- \n        name:jsp对应的请求地址；\n        class:指定一个动作类，在这里也就是给hello指定一个动作类\n        method: 对应hello要执行的方法。\n       -->\n     <action name=\"hello\" class=\"cn.terry.web.action.HelloAction\" method=\"sayHello\">\n        <!-- 配置结果视图 -->\n       <result name=\"success\">/success.jsp</result>\n     </action>\n      </package>\n    </struts>\n\t\t\n## 建立动作类和动作方法 ##\n\n*HelloAction.java*\n\n     package cn.terry.web.action;\n\n     public class HelloAction {//动作类\n\n\t/**\n\t * 在动作类中的指定的动作方法\n\t * 动作方法的书写要求：\n\t * \t\t1、都是public的\n\t * \t\t2、返回值必须是一个String\n\t * \t\t3、必须没有参数\n\t * @return\n\t */\n\tpublic String sayHello(){\n\t\tSystem.out.println(\"HelloAction的sayHello方法执行了\");\n\t\treturn \"success\";//与配置文件中result的name取值相对应\n\t}\n    }\n\n\t\t\n## 结果视图页面 ##\n\n*success.jsp*\n\n    <%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>\n\n    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n    <html>\n      <head>\n    <title>title</title>\n    \n\t<meta http-equiv=\"pragma\" content=\"no-cache\">\n\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\n\t<meta http-equiv=\"expires\" content=\"0\">\n\t<!--\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n\t -->\n\n      </head>\n  \n      <body>\n    操作成功\n      </body>\n    </html>\n\n\t\t\t\n## 测试： ##\n\n只要没有错误，这里就可以得到自己想要的结果。\n\t\t\n## 关于struts.xml没有代码提示的问题 ##\n\n分析原因：没有找到对应的dtd约束文件。\n\n解决办法：\n  \n![](http://olg3gwtbm.bkt.clouddn.com/dtd1.png)\n\n在网上找到struts的.dtd包，放到如图目录中，这个包在网上找就可以。\n\n![](http://olg3gwtbm.bkt.clouddn.com/dtd2.png)\t\n\nok就可以了。\t\t\t\t\t\n\t\t\t\t\t\t\n## 第一个案例的执行过程 ##\n\n![](http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B1.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B2.png)\n\t\t\t\n# Struts2的配置文件 #\n\n## 加载时机： ##\n\n当应用被tomcat加载的时候，struts2的配置文件就已经被加载过了。\n\n## 加载顺序 ##\n\n**加载顺序：**default.properties——struts-default.xml——plugins配置——struts.xml——struts.properties——web.xml\n<table>\n<tr><td>顺序</td><td>配置文件名</td><td>所在位置</td><td>说明</td></tr>\n<tr><td>1</td><td>default.properties</td><td>struts2-core-2.3.15.3.jar\\org\\apache\\struts2</td><td>\t不能修改</td></tr>\n<tr><td>2</td><td>struts-default.xml</td><td>struts2-core-2.3.15.3.jar</td><td>\t不能修改</td></tr>\n<tr><td>3</td><td>strtuts-plugin.xml</td><td>在struts2提供的插件jar包中</td><td>\t不能修改</td></tr>\n<tr><td>4</td><td>struts.xml</td><td>我们的应用中</td><td >\t我们修改的：推荐</td></tr>\n<tr><td>5</td><td>struts.properties</td><td>我们的应用中</td><td>\t我们修改的</td></tr>\n<tr><td>6</td><td>web.xml</td><td>我们的应用中</td><td>\t我们修改的，可以给过滤器配置参数</td></tr>\n</table>\n\n**注意：**\n\n1、Struts2提供了两种配置的方式。一种是key=value的方式，即使用.properties文件。另一种是xml文件配置。`我们推荐使用xml文件（它能描述层级关系）。`\n\n2、当多个配置文件中，有相同的参数，后面的会把前面的值给覆盖了。\n\n# Struts2框架提供的常量 #\n\n## 常用的常量 ##\n\n常量定义在了default.properties配置文件中，体现形式都是key=value。所有的struts2应用都会用到这些常量。\n\n常用的：\n<table>\n<tr><td>常量名</td><td>常量值</td><td>说明</td></tr>\n<tr><td>struts.i18n.encoding</td><td>UTF-8</td><td>应用中使用的编码</td></tr>\n<tr><td>struts.objectFactory.spring.autoWire</td><td>name</td><td>和spring框架整合有关</td></tr>\n<tr><td>struts.multipart.parser\t</td><td>jakarta</td><td>\t指定文件上传用的组件</td></tr>\n<tr><td>struts.multipart.maxSize</td><td>\t2097152\t</td><td>文件上传总文件大小限制：2M</td></tr>\n<tr><td>struts.action.extension</td><td>\taction</td><td>\t能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td></tr>\n<tr><td>struts.enable.DynamicMethodInvocation</td><td>\tfalse</td><td>\t是否允许动态方法调用</td></tr>\n<tr><td>struts.devMode</td><td>\tfalse</td><td>\t是否是开发模式。开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。</td></tr>\n<tr><td>struts.ui.theme</td><td>\txhtml</td><td>\t页面展示用的主题</td></tr></table>\n\t\n## 在struts.xml中覆盖常量 ##\n\n使用`<constant name=\"\" value=\"\"></constant>`元素进行覆盖\n\n例如：\n\n    <!-- 修改struts中默认的后缀名 -->\n    <constant name=\"struts.action.extension\" value=\"do\"></constant>\n\n![](http://olg3gwtbm.bkt.clouddn.com/struts%E8%A6%86%E7%9B%96.png)\n\n## 创建struts.properties文件覆盖 ##\n\n在应用的构建路径中创建一个struts.properties的文件。\n\n![](http://olg3gwtbm.bkt.clouddn.com/pro%E8%A6%86%E7%9B%96.png)\n\n# struts.xml配置文件的主要元素 #\n\n## package元素 ##\n\n 1. 属性：\n \n    **name：**包的名称。必须写。且必须唯一。\n\n\t**extends：**一般情况下需要继承struts-default包，但不是必须的。不过如果不继承的话，将无法使用struts2提供的核心功能。\n\t\t\t\t\t\t\t\tstruts-default.xml中定义着struts-default这个包。而struts-default.xml是在我们的struts.xml加载之前加载。\n\n\t**abstract：**把包声明为抽象包，抽象包就是用来被继承的。只要是没有<action>元素的包，就可以声明为抽象包。\n\n\t**namespace：**名称空间。\n\n\t\t\t\t\t`名称空间\t+\t动作名称\t=\t访问路径`\n\t\n  *struts.xml代码片段*\t\n\n         <!-- \n           package元素：是定义一个struts的包，它是把配置文件按照面向对象的思想来管理。分模块开发。\n           name属性：包的名称。具有唯一性。\n           extends属性：指定当前包的父包。它是按照面向对象的思想管理的体现。\n           abstract属性：把包声明为一个抽象包。抽象包是用来被继承的。只有没有action元素的包才能被定义为抽象包。\n           namespace属性：名称空间。当指定了名称空间以后，访问路径就变成了：\n                                                     访问路径 = 名称空间+动作名称。\n                                               当不指定该属性时，该属性有默认值，默认值是\"\",不是\"/\".                                 \n          -->\n         <package name=\"p1\" extends=\"struts-default\" namespace=\"/user\">\t\t\t\t\t\n\t\t\t\t\t\t\t\n 2. packege中的namespace详解\n \n\t namespace的默认值：\n\n\t\t\ta.不写该属性\n\n\t\t\tb.写了该属性，取值是一个\"\".注意：默认值不是/\n\n 3. 动作类的搜索顺序：\n\n ![](http://olg3gwtbm.bkt.clouddn.com/%E5%8A%A8%E4%BD%9C%E7%B1%BB%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png)\n\t\t\t\t\t\t\n## action元素 ##\n\n\n 1. 属性：\n \n\tname：动作名称\n\n\tclass：动作类全名。默认的动作类是：com.opensymphony.xwork2.ActionSupport,是在struts-default.xml中定义的,要想替换默认动作类：在应用的struts.xml中，package中加入：\n\t\t\t\t\t\t\t\n\tmethod：动作类中的方法名称。默认是public String execute(){}\n\n\t\t\t\t\t\t要求：\n\t\t\t\t\t\t\t1.public的\n\t\t\t\t\t\t\t2.返回值必须是String\n\t\t\t\t\t\t\t3.没有参数\n  \n   *struts.xml代码片段*\n\n           <!-- \n              action元素：是用于定义动作名称，动作类和动作方法的映射。以及当出现不同情况时前往指定的结果视图。\n              name属性：动作名称。和jsp中请求的url中的名称对应起来。注意：此处不能写 .action\n              class属性：指定的动作类。\n              method属性：动作类中的方法名称。默认是public String execute(){}\n\t\t\t\t\t\t要求：\n\t\t\t\t\t\t\t1.public的\n\t\t\t\t\t\t\t2.返回值必须是String\n\t\t\t\t\t\t\t3.没有参数\n             -->\n          <action name=\"action1\" class=\"cn.terry.web.action.DemoAction1\" method=\"saveUser\">\n    \n 2. 动作类\n \n\ta.方式一：动作类就是一个POJO（Plain Old Java Object 原始的java对象），非常简单的javabean。\n\t\t\t\t\t\t\t\t\n\tb.方式二：动作类实现com.opensymphony.xwork2.Action接口。\n\n\t常量：给动作方法返回值用的。用常量可以使你的应用规范和统一。\n<table>\n<tr><td>常量变量名</td><td>\t对应的值</td><td>\t说明</td></tr>\n<tr><td>SUCCESS</td><td>\tsuccess</td><td>\t动作方法执行一切OK</td></tr>\n<tr><td>ERROR\t</td><td>error</td><td>\t动作方法执行时遇到了异常</td></tr>\n<tr><td>INPUT</td><td>\tinput</td><td>\t回显</td></tr>\n<tr><td>LOGIN</td><td>\tlogin</td><td>\t一般转向登陆页面</td></tr>\n<tr><td>NONE\t</td><td>none</td><td>\t不转向任何的视图</td></tr></table>\n\n   c.方式三：动作类继承com.opensymphony.xwork2.ActionSupport\t推荐使用\n\t\t\t\t\t\t\t\n 3. 动作的访问\n \n  a.使用通配符：\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/action11.png)\n\t\t\t\t\n  升级版：\n\t\n   ![](http://olg3gwtbm.bkt.clouddn.com/action12.png)\t\n\t\t\n   优先级：绝对匹配优先。使用通配符的按照在配置文件中的先后顺序进行匹配的。\n\n   b.动态方法调用\n\t\t\t\t\n ![](http://olg3gwtbm.bkt.clouddn.com/action13.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/action14.png)\n\n## result元素 ##\n\n1. 属性：\n\n    name：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 \n\t\t\t\n    type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。\n\n    *struts.xml*\n\n          <!--\n           result元素：配置逻辑结果视图；\n           name属性：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 \n           type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。\n                                常用取值：\n                   dispatcher：(默认值)\n\t\t\t\t\t使用请求转发，转向一个页面。\n\t\t\t       redirect：\n\t\t\t\t\t使用重定向，转向一个页面。\n            -->\n          <result name=\"success\">/success.jsp</result>\n\n2. result元素中type的取值\n\n   常用结果类型介绍：\n\n   dispatcher：(默认值)使用请求转发，转向一个页面。\n\n   redirect：使用重定向，转向一个页面。\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/redirect.png)\n\t\t\t\t\t\n   redirectAction：注意：使用的是重定向。\n\n   a.重定向到另一个相同名称空间的动作。\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/redirectAction1.png)\n\t\t\t\t\t\t\n   b.重定向到不同名称空间的动作\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/redirectAction2.png)\n\t\t\t\t\t\t\n   chain：注意： 使用的是请求转发。\n\n   a.转发到另一个相同名称空间的动作。\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/chain1.png)\t\n\t\t\t\t\t\t\t\n   b.请求转发到不同名称空间的动作\t\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/chain2.png)\n\t\t\t\t\t","slug":"JAVA学习之Struts2框架","published":1,"updated":"2017-10-11T15:04:09.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6vc000x64xt1zkccjpn","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"Struts2简介\"><a href=\"#Struts2简介\" class=\"headerlink\" title=\"Struts2简介\"></a>Struts2简介</h1><h2 id=\"Struts2概述\"><a href=\"#Struts2概述\" class=\"headerlink\" title=\"Struts2概述\"></a>Struts2概述</h2><p>Struts2是Apache发行的MVC开源框架。注意：它只是表现层（MVC）框架。</p>\n<h2 id=\"Struts2的来历\"><a href=\"#Struts2的来历\" class=\"headerlink\" title=\"Struts2的来历\"></a>Struts2的来历</h2><p> <strong> Struts1：</strong> 也是apache开发的一套mvc的开源框架。在2005年之前非常流行。</p>\n<p> 弊端：Struts1的核心控制器就是一个Servlet。随着使用者的增多，弊端开始出现。</p>\n<p><strong> Struts2：</strong>在long long ago，有一个设计超前的框架XWork，后来推出了XWork1和WebWork2。Struts2就是apache和OpenSymphony组织合并开发出来。<em>里面包含了WebWork2的核心及Struts的一些特性和功能。除此之外，和Struts1没有任何关系了。</em></p>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"搭建Struts2开发环境\"><a href=\"#搭建Struts2开发环境\" class=\"headerlink\" title=\"搭建Struts2开发环境\"></a>搭建Struts2开发环境</h1><h2 id=\"下载Struts2开发包\"><a href=\"#下载Struts2开发包\" class=\"headerlink\" title=\"下载Struts2开发包\"></a>下载Struts2开发包</h2><p><a href=\"http://struts.apache.org\" target=\"_blank\" rel=\"external\">官网：http://struts.apache.org</a></p>\n<p>由于国内网络比较好，所以说可能有时候打不开，可以百度一下，下载一份。</p>\n<h2 id=\"开发包目录结构\"><a href=\"#开发包目录结构\" class=\"headerlink\" title=\"开发包目录结构\"></a>开发包目录结构</h2><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%BC%80%E5%8F%91%E5%8C%85%E7%9B%AE%E5%BD%951.png\" alt=\"\"></p>\n<h2 id=\"搭建开发环境\"><a href=\"#搭建开发环境\" class=\"headerlink\" title=\"搭建开发环境\"></a>搭建开发环境</h2><h3 id=\"拷贝必要jar包到classpath中\"><a href=\"#拷贝必要jar包到classpath中\" class=\"headerlink\" title=\"拷贝必要jar包到classpath中\"></a>拷贝必要jar包到classpath中</h3><p>   <img src=\"http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6jar%E5%8C%851.png\" alt=\"\"></p>\n<p>   <strong>拷贝哪些jar包？</strong></p>\n<p>   找到Struts2自带的例子中，struts-blank的war包，在它的<code>\\WEB-INF\\lib</code>目录下的jar包全拷贝。</p>\n<h3 id=\"建立Struts2的配置文件\"><a href=\"#建立Struts2的配置文件\" class=\"headerlink\" title=\"建立Struts2的配置文件\"></a>建立Struts2的配置文件</h3><p>  at the top of classpath（在最顶层的构建路径）,建立一个默认名称为<code>struts.xml</code>的配置文件。</p>\n<p>  struts.xml </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE struts PUBLIC\n&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;\n &quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;\n&lt;struts&gt;\n\n&lt;/struts&gt;\n</code></pre><p>   <strong>注意：</strong></p>\n<ul>\n<li>文件名大小写。</li>\n<li>创建位置。</li>\n<li>该名称允许修改，但是我们一般不改。</li>\n</ul>\n<h3 id=\"配置控制器\"><a href=\"#配置控制器\" class=\"headerlink\" title=\"配置控制器\"></a>配置控制器</h3><p>a、配置位置：在web.xml中</p>\n<p>b、配置什么： struts2已经写好了的一个过滤器。</p>\n<p><strong>结论：</strong></p>\n<p>struts2比struts1优秀的一个体现就是，它用了更为强大的<code>过滤器</code>作为控制器了。</p>\n<pre><code>  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;3.0&quot;&gt;\n&lt;display-name&gt;Struts2Template&lt;/display-name&gt;\n &lt;!-- 配置Struts核心控制器，就是一个过滤器 --&gt;\n &lt;filter&gt;\n&lt;filter-name&gt;struts2&lt;/filter-name&gt;\n&lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;struts2&lt;/filter-name&gt;\n&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;welcome-file-list&gt;\n  &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;\n&lt;/welcome-file-list&gt;\n&lt;/web-app&gt;\n</code></pre><h3 id=\"验证是否成功\"><a href=\"#验证是否成功\" class=\"headerlink\" title=\"验证是否成功\"></a>验证是否成功</h3><p>部署应用，启动Tomcat，不报错表示搭建成功。</p>\n<h1 id=\"第一个Struts2案例\"><a href=\"#第一个Struts2案例\" class=\"headerlink\" title=\"第一个Struts2案例\"></a>第一个Struts2案例</h1><blockquote>\n<p>以下步骤是日后实际开发中经常重复的。</p>\n</blockquote>\n<h2 id=\"建立一个jsp文件\"><a href=\"#建立一个jsp文件\" class=\"headerlink\" title=\"建立一个jsp文件\"></a>建立一个jsp文件</h2><p><em>index.jsp</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Struts入门案例&lt;/title&gt;\n  &lt;/head&gt; \n &lt;body&gt;\n&lt;a href=&quot;${pageContext.request.contextPath}/hello.action&quot;&gt;访问Struts的第一个入门案例&lt;/a&gt;\n&lt;a href=&quot;${pageContext.request.contextPath}/hello&quot;&gt;访问Struts的第一个入门案例&lt;/a&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"在struts-xml文件中配置\"><a href=\"#在struts-xml文件中配置\" class=\"headerlink\" title=\"在struts.xml文件中配置\"></a>在struts.xml文件中配置</h2><p><em>struts.xml</em></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE struts PUBLIC\n&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;\n&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;\n&lt;struts&gt;\n  &lt;package name=&quot;p1&quot; extends=&quot;struts-default&quot; &gt;\n  &lt;!-- \n    name:jsp对应的请求地址；\n    class:指定一个动作类，在这里也就是给hello指定一个动作类\n    method: 对应hello要执行的方法。\n   --&gt;\n &lt;action name=&quot;hello&quot; class=&quot;cn.terry.web.action.HelloAction&quot; method=&quot;sayHello&quot;&gt;\n    &lt;!-- 配置结果视图 --&gt;\n   &lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;\n &lt;/action&gt;\n  &lt;/package&gt;\n&lt;/struts&gt;\n</code></pre><h2 id=\"建立动作类和动作方法\"><a href=\"#建立动作类和动作方法\" class=\"headerlink\" title=\"建立动作类和动作方法\"></a>建立动作类和动作方法</h2><p><em>HelloAction.java</em></p>\n<pre><code> package cn.terry.web.action;\n\n public class HelloAction {//动作类\n\n/**\n * 在动作类中的指定的动作方法\n * 动作方法的书写要求：\n *         1、都是public的\n *         2、返回值必须是一个String\n *         3、必须没有参数\n * @return\n */\npublic String sayHello(){\n    System.out.println(&quot;HelloAction的sayHello方法执行了&quot;);\n    return &quot;success&quot;;//与配置文件中result的name取值相对应\n}\n}\n</code></pre><h2 id=\"结果视图页面\"><a href=\"#结果视图页面\" class=\"headerlink\" title=\"结果视图页面\"></a>结果视图页面</h2><p><em>success.jsp</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;\n\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;title&lt;/title&gt;\n\n&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;\n&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;\n&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;\n&lt;!--\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;\n --&gt;\n\n  &lt;/head&gt;\n\n  &lt;body&gt;\n操作成功\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h2><p>只要没有错误，这里就可以得到自己想要的结果。</p>\n<h2 id=\"关于struts-xml没有代码提示的问题\"><a href=\"#关于struts-xml没有代码提示的问题\" class=\"headerlink\" title=\"关于struts.xml没有代码提示的问题\"></a>关于struts.xml没有代码提示的问题</h2><p>分析原因：没有找到对应的dtd约束文件。</p>\n<p>解决办法：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/dtd1.png\" alt=\"\"></p>\n<p>在网上找到struts的.dtd包，放到如图目录中，这个包在网上找就可以。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/dtd2.png\" alt=\"\">    </p>\n<p>ok就可以了。                    </p>\n<h2 id=\"第一个案例的执行过程\"><a href=\"#第一个案例的执行过程\" class=\"headerlink\" title=\"第一个案例的执行过程\"></a>第一个案例的执行过程</h2><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B1.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B2.png\" alt=\"\"></p>\n<h1 id=\"Struts2的配置文件\"><a href=\"#Struts2的配置文件\" class=\"headerlink\" title=\"Struts2的配置文件\"></a>Struts2的配置文件</h1><h2 id=\"加载时机：\"><a href=\"#加载时机：\" class=\"headerlink\" title=\"加载时机：\"></a>加载时机：</h2><p>当应用被tomcat加载的时候，struts2的配置文件就已经被加载过了。</p>\n<h2 id=\"加载顺序\"><a href=\"#加载顺序\" class=\"headerlink\" title=\"加载顺序\"></a>加载顺序</h2><p><strong>加载顺序：</strong>default.properties——struts-default.xml——plugins配置——struts.xml——struts.properties——web.xml</p>\n<table><br><tr><td>顺序</td><td>配置文件名</td><td>所在位置</td><td>说明</td></tr><br><tr><td>1</td><td>default.properties</td><td>struts2-core-2.3.15.3.jar\\org\\apache\\struts2</td><td>    不能修改</td></tr><br><tr><td>2</td><td>struts-default.xml</td><td>struts2-core-2.3.15.3.jar</td><td>    不能修改</td></tr><br><tr><td>3</td><td>strtuts-plugin.xml</td><td>在struts2提供的插件jar包中</td><td>    不能修改</td></tr><br><tr><td>4</td><td>struts.xml</td><td>我们的应用中</td><td>    我们修改的：推荐</td></tr><br><tr><td>5</td><td>struts.properties</td><td>我们的应用中</td><td>    我们修改的</td></tr><br><tr><td>6</td><td>web.xml</td><td>我们的应用中</td><td>    我们修改的，可以给过滤器配置参数</td></tr><br></table>\n\n<p><strong>注意：</strong></p>\n<p>1、Struts2提供了两种配置的方式。一种是key=value的方式，即使用.properties文件。另一种是xml文件配置。<code>我们推荐使用xml文件（它能描述层级关系）。</code></p>\n<p>2、当多个配置文件中，有相同的参数，后面的会把前面的值给覆盖了。</p>\n<h1 id=\"Struts2框架提供的常量\"><a href=\"#Struts2框架提供的常量\" class=\"headerlink\" title=\"Struts2框架提供的常量\"></a>Struts2框架提供的常量</h1><h2 id=\"常用的常量\"><a href=\"#常用的常量\" class=\"headerlink\" title=\"常用的常量\"></a>常用的常量</h2><p>常量定义在了default.properties配置文件中，体现形式都是key=value。所有的struts2应用都会用到这些常量。</p>\n<p>常用的：</p>\n<table><br><tr><td>常量名</td><td>常量值</td><td>说明</td></tr><br><tr><td>struts.i18n.encoding</td><td>UTF-8</td><td>应用中使用的编码</td></tr><br><tr><td>struts.objectFactory.spring.autoWire</td><td>name</td><td>和spring框架整合有关</td></tr><br><tr><td>struts.multipart.parser    </td><td>jakarta</td><td>    指定文件上传用的组件</td></tr><br><tr><td>struts.multipart.maxSize</td><td>    2097152    </td><td>文件上传总文件大小限制：2M</td></tr><br><tr><td>struts.action.extension</td><td>    action</td><td>    能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td></tr><br><tr><td>struts.enable.DynamicMethodInvocation</td><td>    false</td><td>    是否允许动态方法调用</td></tr><br><tr><td>struts.devMode</td><td>    false</td><td>    是否是开发模式。开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。</td></tr><br><tr><td>struts.ui.theme</td><td>    xhtml</td><td>    页面展示用的主题</td></tr></table>\n\n<h2 id=\"在struts-xml中覆盖常量\"><a href=\"#在struts-xml中覆盖常量\" class=\"headerlink\" title=\"在struts.xml中覆盖常量\"></a>在struts.xml中覆盖常量</h2><p>使用<code>&lt;constant name=&quot;&quot; value=&quot;&quot;&gt;&lt;/constant&gt;</code>元素进行覆盖</p>\n<p>例如：</p>\n<pre><code>&lt;!-- 修改struts中默认的后缀名 --&gt;\n&lt;constant name=&quot;struts.action.extension&quot; value=&quot;do&quot;&gt;&lt;/constant&gt;\n</code></pre><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/struts%E8%A6%86%E7%9B%96.png\" alt=\"\"></p>\n<h2 id=\"创建struts-properties文件覆盖\"><a href=\"#创建struts-properties文件覆盖\" class=\"headerlink\" title=\"创建struts.properties文件覆盖\"></a>创建struts.properties文件覆盖</h2><p>在应用的构建路径中创建一个struts.properties的文件。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/pro%E8%A6%86%E7%9B%96.png\" alt=\"\"></p>\n<h1 id=\"struts-xml配置文件的主要元素\"><a href=\"#struts-xml配置文件的主要元素\" class=\"headerlink\" title=\"struts.xml配置文件的主要元素\"></a>struts.xml配置文件的主要元素</h1><h2 id=\"package元素\"><a href=\"#package元素\" class=\"headerlink\" title=\"package元素\"></a>package元素</h2><ol>\n<li><p>属性：</p>\n<p><strong>name：</strong>包的名称。必须写。且必须唯一。</p>\n<p><strong>extends：</strong>一般情况下需要继承struts-default包，但不是必须的。不过如果不继承的话，将无法使用struts2提供的核心功能。</p>\n<pre><code>struts-default.xml中定义着struts-default这个包。而struts-default.xml是在我们的struts.xml加载之前加载。\n</code></pre><p><strong>abstract：</strong>把包声明为抽象包，抽象包就是用来被继承的。只要是没有<action>元素的包，就可以声明为抽象包。</action></p>\n<p><strong>namespace：</strong>名称空间。</p>\n<pre><code>`名称空间    +    动作名称    =    访问路径`\n</code></pre><p><em>struts.xml代码片段</em>    </p>\n<pre><code>&lt;!-- \n  package元素：是定义一个struts的包，它是把配置文件按照面向对象的思想来管理。分模块开发。\n  name属性：包的名称。具有唯一性。\n  extends属性：指定当前包的父包。它是按照面向对象的思想管理的体现。\n  abstract属性：把包声明为一个抽象包。抽象包是用来被继承的。只有没有action元素的包才能被定义为抽象包。\n  namespace属性：名称空间。当指定了名称空间以后，访问路径就变成了：\n                                            访问路径 = 名称空间+动作名称。\n                                      当不指定该属性时，该属性有默认值，默认值是&quot;&quot;,不是&quot;/&quot;.                                 \n --&gt;\n&lt;package name=&quot;p1&quot; extends=&quot;struts-default&quot; namespace=&quot;/user&quot;&gt;                    \n</code></pre></li>\n<li><p>packege中的namespace详解</p>\n<p> namespace的默认值：</p>\n<pre><code>a.不写该属性\n\nb.写了该属性，取值是一个&quot;&quot;.注意：默认值不是/\n</code></pre></li>\n<li><p>动作类的搜索顺序：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%8A%A8%E4%BD%9C%E7%B1%BB%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"action元素\"><a href=\"#action元素\" class=\"headerlink\" title=\"action元素\"></a>action元素</h2><ol>\n<li><p>属性：</p>\n<p>name：动作名称</p>\n<p>class：动作类全名。默认的动作类是：com.opensymphony.xwork2.ActionSupport,是在struts-default.xml中定义的,要想替换默认动作类：在应用的struts.xml中，package中加入：</p>\n<p>method：动作类中的方法名称。默认是public String execute(){}</p>\n<pre><code>要求：\n    1.public的\n    2.返回值必须是String\n    3.没有参数\n</code></pre><p><em>struts.xml代码片段</em></p>\n<pre><code> &lt;!-- \n    action元素：是用于定义动作名称，动作类和动作方法的映射。以及当出现不同情况时前往指定的结果视图。\n    name属性：动作名称。和jsp中请求的url中的名称对应起来。注意：此处不能写 .action\n    class属性：指定的动作类。\n    method属性：动作类中的方法名称。默认是public String execute(){}\n              要求：\n                  1.public的\n                  2.返回值必须是String\n                  3.没有参数\n   --&gt;\n&lt;action name=&quot;action1&quot; class=&quot;cn.terry.web.action.DemoAction1&quot; method=&quot;saveUser&quot;&gt;\n</code></pre></li>\n<li><p>动作类</p>\n<p>a.方式一：动作类就是一个POJO（Plain Old Java Object 原始的java对象），非常简单的javabean。</p>\n<p>b.方式二：动作类实现com.opensymphony.xwork2.Action接口。</p>\n<p>常量：给动作方法返回值用的。用常量可以使你的应用规范和统一。</p>\n<table><br><tr><td>常量变量名</td><td>    对应的值</td><td>    说明</td></tr><br><tr><td>SUCCESS</td><td>    success</td><td>    动作方法执行一切OK</td></tr><br><tr><td>ERROR    </td><td>error</td><td>    动作方法执行时遇到了异常</td></tr><br><tr><td>INPUT</td><td>    input</td><td>    回显</td></tr><br><tr><td>LOGIN</td><td>    login</td><td>    一般转向登陆页面</td></tr><br><tr><td>NONE    </td><td>none</td><td>    不转向任何的视图</td></tr></table>\n\n<p>c.方式三：动作类继承com.opensymphony.xwork2.ActionSupport    推荐使用</p>\n</li>\n<li><p>动作的访问</p>\n<p>a.使用通配符：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/action11.png\" alt=\"\"></p>\n<p>升级版：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/action12.png\" alt=\"\">    </p>\n<p>优先级：绝对匹配优先。使用通配符的按照在配置文件中的先后顺序进行匹配的。</p>\n<p>b.动态方法调用</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/action13.png\" alt=\"\"></p>\n</li>\n</ol>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/action14.png\" alt=\"\"></p>\n<h2 id=\"result元素\"><a href=\"#result元素\" class=\"headerlink\" title=\"result元素\"></a>result元素</h2><ol>\n<li><p>属性：</p>\n<p> name：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 </p>\n<p> type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。</p>\n<p> <em>struts.xml</em></p>\n<pre><code>&lt;!--\n result元素：配置逻辑结果视图；\n name属性：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 \n type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。\n                      常用取值：\n         dispatcher：(默认值)\n          使用请求转发，转向一个页面。\n         redirect：\n          使用重定向，转向一个页面。\n  --&gt;\n&lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;\n</code></pre></li>\n<li><p>result元素中type的取值</p>\n<p>常用结果类型介绍：</p>\n<p>dispatcher：(默认值)使用请求转发，转向一个页面。</p>\n<p>redirect：使用重定向，转向一个页面。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/redirect.png\" alt=\"\"></p>\n<p>redirectAction：注意：使用的是重定向。</p>\n<p>a.重定向到另一个相同名称空间的动作。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/redirectAction1.png\" alt=\"\"></p>\n<p>b.重定向到不同名称空间的动作</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/redirectAction2.png\" alt=\"\"></p>\n<p>chain：注意： 使用的是请求转发。</p>\n<p>a.转发到另一个相同名称空间的动作。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/chain1.png\" alt=\"\">    </p>\n<p>b.请求转发到不同名称空间的动作    </p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/chain2.png\" alt=\"\"></p>\n</li>\n</ol>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<h1 id=\"Struts2简介\"><a href=\"#Struts2简介\" class=\"headerlink\" title=\"Struts2简介\"></a>Struts2简介</h1><h2 id=\"Struts2概述\"><a href=\"#Struts2概述\" class=\"headerlink\" title=\"Struts2概述\"></a>Struts2概述</h2><p>Struts2是Apache发行的MVC开源框架。注意：它只是表现层（MVC）框架。</p>\n<h2 id=\"Struts2的来历\"><a href=\"#Struts2的来历\" class=\"headerlink\" title=\"Struts2的来历\"></a>Struts2的来历</h2><p> <strong> Struts1：</strong> 也是apache开发的一套mvc的开源框架。在2005年之前非常流行。</p>\n<p> 弊端：Struts1的核心控制器就是一个Servlet。随着使用者的增多，弊端开始出现。</p>\n<p><strong> Struts2：</strong>在long long ago，有一个设计超前的框架XWork，后来推出了XWork1和WebWork2。Struts2就是apache和OpenSymphony组织合并开发出来。<em>里面包含了WebWork2的核心及Struts的一些特性和功能。除此之外，和Struts1没有任何关系了。</em></p></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"搭建Struts2开发环境\"><a href=\"#搭建Struts2开发环境\" class=\"headerlink\" title=\"搭建Struts2开发环境\"></a>搭建Struts2开发环境</h1><h2 id=\"下载Struts2开发包\"><a href=\"#下载Struts2开发包\" class=\"headerlink\" title=\"下载Struts2开发包\"></a>下载Struts2开发包</h2><p><a href=\"http://struts.apache.org\">官网：http://struts.apache.org</a></p>\n<p>由于国内网络比较好，所以说可能有时候打不开，可以百度一下，下载一份。</p>\n<h2 id=\"开发包目录结构\"><a href=\"#开发包目录结构\" class=\"headerlink\" title=\"开发包目录结构\"></a>开发包目录结构</h2><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%BC%80%E5%8F%91%E5%8C%85%E7%9B%AE%E5%BD%951.png\" alt=\"\"></p>\n<h2 id=\"搭建开发环境\"><a href=\"#搭建开发环境\" class=\"headerlink\" title=\"搭建开发环境\"></a>搭建开发环境</h2><h3 id=\"拷贝必要jar包到classpath中\"><a href=\"#拷贝必要jar包到classpath中\" class=\"headerlink\" title=\"拷贝必要jar包到classpath中\"></a>拷贝必要jar包到classpath中</h3><p>   <img src=\"http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6jar%E5%8C%851.png\" alt=\"\"></p>\n<p>   <strong>拷贝哪些jar包？</strong></p>\n<p>   找到Struts2自带的例子中，struts-blank的war包，在它的<code>\\WEB-INF\\lib</code>目录下的jar包全拷贝。</p>\n<h3 id=\"建立Struts2的配置文件\"><a href=\"#建立Struts2的配置文件\" class=\"headerlink\" title=\"建立Struts2的配置文件\"></a>建立Struts2的配置文件</h3><p>  at the top of classpath（在最顶层的构建路径）,建立一个默认名称为<code>struts.xml</code>的配置文件。</p>\n<p>  struts.xml </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE struts PUBLIC\n&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;\n &quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;\n&lt;struts&gt;\n\n&lt;/struts&gt;\n</code></pre><p>   <strong>注意：</strong></p>\n<ul>\n<li>文件名大小写。</li>\n<li>创建位置。</li>\n<li>该名称允许修改，但是我们一般不改。</li>\n</ul>\n<h3 id=\"配置控制器\"><a href=\"#配置控制器\" class=\"headerlink\" title=\"配置控制器\"></a>配置控制器</h3><p>a、配置位置：在web.xml中</p>\n<p>b、配置什么： struts2已经写好了的一个过滤器。</p>\n<p><strong>结论：</strong></p>\n<p>struts2比struts1优秀的一个体现就是，它用了更为强大的<code>过滤器</code>作为控制器了。</p>\n<pre><code>  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;3.0&quot;&gt;\n&lt;display-name&gt;Struts2Template&lt;/display-name&gt;\n &lt;!-- 配置Struts核心控制器，就是一个过滤器 --&gt;\n &lt;filter&gt;\n&lt;filter-name&gt;struts2&lt;/filter-name&gt;\n&lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;struts2&lt;/filter-name&gt;\n&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;welcome-file-list&gt;\n  &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;\n&lt;/welcome-file-list&gt;\n&lt;/web-app&gt;\n</code></pre><h3 id=\"验证是否成功\"><a href=\"#验证是否成功\" class=\"headerlink\" title=\"验证是否成功\"></a>验证是否成功</h3><p>部署应用，启动Tomcat，不报错表示搭建成功。</p>\n<h1 id=\"第一个Struts2案例\"><a href=\"#第一个Struts2案例\" class=\"headerlink\" title=\"第一个Struts2案例\"></a>第一个Struts2案例</h1><blockquote>\n<p>以下步骤是日后实际开发中经常重复的。</p>\n</blockquote>\n<h2 id=\"建立一个jsp文件\"><a href=\"#建立一个jsp文件\" class=\"headerlink\" title=\"建立一个jsp文件\"></a>建立一个jsp文件</h2><p><em>index.jsp</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;Struts入门案例&lt;/title&gt;\n  &lt;/head&gt; \n &lt;body&gt;\n&lt;a href=&quot;${pageContext.request.contextPath}/hello.action&quot;&gt;访问Struts的第一个入门案例&lt;/a&gt;\n&lt;a href=&quot;${pageContext.request.contextPath}/hello&quot;&gt;访问Struts的第一个入门案例&lt;/a&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"在struts-xml文件中配置\"><a href=\"#在struts-xml文件中配置\" class=\"headerlink\" title=\"在struts.xml文件中配置\"></a>在struts.xml文件中配置</h2><p><em>struts.xml</em></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE struts PUBLIC\n&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;\n&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;\n&lt;struts&gt;\n  &lt;package name=&quot;p1&quot; extends=&quot;struts-default&quot; &gt;\n  &lt;!-- \n    name:jsp对应的请求地址；\n    class:指定一个动作类，在这里也就是给hello指定一个动作类\n    method: 对应hello要执行的方法。\n   --&gt;\n &lt;action name=&quot;hello&quot; class=&quot;cn.terry.web.action.HelloAction&quot; method=&quot;sayHello&quot;&gt;\n    &lt;!-- 配置结果视图 --&gt;\n   &lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;\n &lt;/action&gt;\n  &lt;/package&gt;\n&lt;/struts&gt;\n</code></pre><h2 id=\"建立动作类和动作方法\"><a href=\"#建立动作类和动作方法\" class=\"headerlink\" title=\"建立动作类和动作方法\"></a>建立动作类和动作方法</h2><p><em>HelloAction.java</em></p>\n<pre><code> package cn.terry.web.action;\n\n public class HelloAction {//动作类\n\n/**\n * 在动作类中的指定的动作方法\n * 动作方法的书写要求：\n *         1、都是public的\n *         2、返回值必须是一个String\n *         3、必须没有参数\n * @return\n */\npublic String sayHello(){\n    System.out.println(&quot;HelloAction的sayHello方法执行了&quot;);\n    return &quot;success&quot;;//与配置文件中result的name取值相对应\n}\n}\n</code></pre><h2 id=\"结果视图页面\"><a href=\"#结果视图页面\" class=\"headerlink\" title=\"结果视图页面\"></a>结果视图页面</h2><p><em>success.jsp</em></p>\n<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;\n\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n&lt;title&gt;title&lt;/title&gt;\n\n&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;\n&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;\n&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;\n&lt;!--\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;\n --&gt;\n\n  &lt;/head&gt;\n\n  &lt;body&gt;\n操作成功\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h2><p>只要没有错误，这里就可以得到自己想要的结果。</p>\n<h2 id=\"关于struts-xml没有代码提示的问题\"><a href=\"#关于struts-xml没有代码提示的问题\" class=\"headerlink\" title=\"关于struts.xml没有代码提示的问题\"></a>关于struts.xml没有代码提示的问题</h2><p>分析原因：没有找到对应的dtd约束文件。</p>\n<p>解决办法：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/dtd1.png\" alt=\"\"></p>\n<p>在网上找到struts的.dtd包，放到如图目录中，这个包在网上找就可以。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/dtd2.png\" alt=\"\">    </p>\n<p>ok就可以了。                    </p>\n<h2 id=\"第一个案例的执行过程\"><a href=\"#第一个案例的执行过程\" class=\"headerlink\" title=\"第一个案例的执行过程\"></a>第一个案例的执行过程</h2><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B1.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B2.png\" alt=\"\"></p>\n<h1 id=\"Struts2的配置文件\"><a href=\"#Struts2的配置文件\" class=\"headerlink\" title=\"Struts2的配置文件\"></a>Struts2的配置文件</h1><h2 id=\"加载时机：\"><a href=\"#加载时机：\" class=\"headerlink\" title=\"加载时机：\"></a>加载时机：</h2><p>当应用被tomcat加载的时候，struts2的配置文件就已经被加载过了。</p>\n<h2 id=\"加载顺序\"><a href=\"#加载顺序\" class=\"headerlink\" title=\"加载顺序\"></a>加载顺序</h2><p><strong>加载顺序：</strong>default.properties——struts-default.xml——plugins配置——struts.xml——struts.properties——web.xml</p>\n<table><br><tr><td>顺序</td><td>配置文件名</td><td>所在位置</td><td>说明</td></tr><br><tr><td>1</td><td>default.properties</td><td>struts2-core-2.3.15.3.jar\\org\\apache\\struts2</td><td>    不能修改</td></tr><br><tr><td>2</td><td>struts-default.xml</td><td>struts2-core-2.3.15.3.jar</td><td>    不能修改</td></tr><br><tr><td>3</td><td>strtuts-plugin.xml</td><td>在struts2提供的插件jar包中</td><td>    不能修改</td></tr><br><tr><td>4</td><td>struts.xml</td><td>我们的应用中</td><td>    我们修改的：推荐</td></tr><br><tr><td>5</td><td>struts.properties</td><td>我们的应用中</td><td>    我们修改的</td></tr><br><tr><td>6</td><td>web.xml</td><td>我们的应用中</td><td>    我们修改的，可以给过滤器配置参数</td></tr><br></table>\n\n<p><strong>注意：</strong></p>\n<p>1、Struts2提供了两种配置的方式。一种是key=value的方式，即使用.properties文件。另一种是xml文件配置。<code>我们推荐使用xml文件（它能描述层级关系）。</code></p>\n<p>2、当多个配置文件中，有相同的参数，后面的会把前面的值给覆盖了。</p>\n<h1 id=\"Struts2框架提供的常量\"><a href=\"#Struts2框架提供的常量\" class=\"headerlink\" title=\"Struts2框架提供的常量\"></a>Struts2框架提供的常量</h1><h2 id=\"常用的常量\"><a href=\"#常用的常量\" class=\"headerlink\" title=\"常用的常量\"></a>常用的常量</h2><p>常量定义在了default.properties配置文件中，体现形式都是key=value。所有的struts2应用都会用到这些常量。</p>\n<p>常用的：</p>\n<table><br><tr><td>常量名</td><td>常量值</td><td>说明</td></tr><br><tr><td>struts.i18n.encoding</td><td>UTF-8</td><td>应用中使用的编码</td></tr><br><tr><td>struts.objectFactory.spring.autoWire</td><td>name</td><td>和spring框架整合有关</td></tr><br><tr><td>struts.multipart.parser    </td><td>jakarta</td><td>    指定文件上传用的组件</td></tr><br><tr><td>struts.multipart.maxSize</td><td>    2097152    </td><td>文件上传总文件大小限制：2M</td></tr><br><tr><td>struts.action.extension</td><td>    action</td><td>    能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td></tr><br><tr><td>struts.enable.DynamicMethodInvocation</td><td>    false</td><td>    是否允许动态方法调用</td></tr><br><tr><td>struts.devMode</td><td>    false</td><td>    是否是开发模式。开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。</td></tr><br><tr><td>struts.ui.theme</td><td>    xhtml</td><td>    页面展示用的主题</td></tr></table>\n\n<h2 id=\"在struts-xml中覆盖常量\"><a href=\"#在struts-xml中覆盖常量\" class=\"headerlink\" title=\"在struts.xml中覆盖常量\"></a>在struts.xml中覆盖常量</h2><p>使用<code>&lt;constant name=&quot;&quot; value=&quot;&quot;&gt;&lt;/constant&gt;</code>元素进行覆盖</p>\n<p>例如：</p>\n<pre><code>&lt;!-- 修改struts中默认的后缀名 --&gt;\n&lt;constant name=&quot;struts.action.extension&quot; value=&quot;do&quot;&gt;&lt;/constant&gt;\n</code></pre><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/struts%E8%A6%86%E7%9B%96.png\" alt=\"\"></p>\n<h2 id=\"创建struts-properties文件覆盖\"><a href=\"#创建struts-properties文件覆盖\" class=\"headerlink\" title=\"创建struts.properties文件覆盖\"></a>创建struts.properties文件覆盖</h2><p>在应用的构建路径中创建一个struts.properties的文件。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/pro%E8%A6%86%E7%9B%96.png\" alt=\"\"></p>\n<h1 id=\"struts-xml配置文件的主要元素\"><a href=\"#struts-xml配置文件的主要元素\" class=\"headerlink\" title=\"struts.xml配置文件的主要元素\"></a>struts.xml配置文件的主要元素</h1><h2 id=\"package元素\"><a href=\"#package元素\" class=\"headerlink\" title=\"package元素\"></a>package元素</h2><ol>\n<li><p>属性：</p>\n<p><strong>name：</strong>包的名称。必须写。且必须唯一。</p>\n<p><strong>extends：</strong>一般情况下需要继承struts-default包，但不是必须的。不过如果不继承的话，将无法使用struts2提供的核心功能。</p>\n<pre><code>struts-default.xml中定义着struts-default这个包。而struts-default.xml是在我们的struts.xml加载之前加载。\n</code></pre><p><strong>abstract：</strong>把包声明为抽象包，抽象包就是用来被继承的。只要是没有<action>元素的包，就可以声明为抽象包。</action></p>\n<p><strong>namespace：</strong>名称空间。</p>\n<pre><code>`名称空间    +    动作名称    =    访问路径`\n</code></pre><p><em>struts.xml代码片段</em>    </p>\n<pre><code>&lt;!-- \n  package元素：是定义一个struts的包，它是把配置文件按照面向对象的思想来管理。分模块开发。\n  name属性：包的名称。具有唯一性。\n  extends属性：指定当前包的父包。它是按照面向对象的思想管理的体现。\n  abstract属性：把包声明为一个抽象包。抽象包是用来被继承的。只有没有action元素的包才能被定义为抽象包。\n  namespace属性：名称空间。当指定了名称空间以后，访问路径就变成了：\n                                            访问路径 = 名称空间+动作名称。\n                                      当不指定该属性时，该属性有默认值，默认值是&quot;&quot;,不是&quot;/&quot;.                                 \n --&gt;\n&lt;package name=&quot;p1&quot; extends=&quot;struts-default&quot; namespace=&quot;/user&quot;&gt;                    \n</code></pre></li>\n<li><p>packege中的namespace详解</p>\n<p> namespace的默认值：</p>\n<pre><code>a.不写该属性\n\nb.写了该属性，取值是一个&quot;&quot;.注意：默认值不是/\n</code></pre></li>\n<li><p>动作类的搜索顺序：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E5%8A%A8%E4%BD%9C%E7%B1%BB%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"action元素\"><a href=\"#action元素\" class=\"headerlink\" title=\"action元素\"></a>action元素</h2><ol>\n<li><p>属性：</p>\n<p>name：动作名称</p>\n<p>class：动作类全名。默认的动作类是：com.opensymphony.xwork2.ActionSupport,是在struts-default.xml中定义的,要想替换默认动作类：在应用的struts.xml中，package中加入：</p>\n<p>method：动作类中的方法名称。默认是public String execute(){}</p>\n<pre><code>要求：\n    1.public的\n    2.返回值必须是String\n    3.没有参数\n</code></pre><p><em>struts.xml代码片段</em></p>\n<pre><code> &lt;!-- \n    action元素：是用于定义动作名称，动作类和动作方法的映射。以及当出现不同情况时前往指定的结果视图。\n    name属性：动作名称。和jsp中请求的url中的名称对应起来。注意：此处不能写 .action\n    class属性：指定的动作类。\n    method属性：动作类中的方法名称。默认是public String execute(){}\n              要求：\n                  1.public的\n                  2.返回值必须是String\n                  3.没有参数\n   --&gt;\n&lt;action name=&quot;action1&quot; class=&quot;cn.terry.web.action.DemoAction1&quot; method=&quot;saveUser&quot;&gt;\n</code></pre></li>\n<li><p>动作类</p>\n<p>a.方式一：动作类就是一个POJO（Plain Old Java Object 原始的java对象），非常简单的javabean。</p>\n<p>b.方式二：动作类实现com.opensymphony.xwork2.Action接口。</p>\n<p>常量：给动作方法返回值用的。用常量可以使你的应用规范和统一。</p>\n<table><br><tr><td>常量变量名</td><td>    对应的值</td><td>    说明</td></tr><br><tr><td>SUCCESS</td><td>    success</td><td>    动作方法执行一切OK</td></tr><br><tr><td>ERROR    </td><td>error</td><td>    动作方法执行时遇到了异常</td></tr><br><tr><td>INPUT</td><td>    input</td><td>    回显</td></tr><br><tr><td>LOGIN</td><td>    login</td><td>    一般转向登陆页面</td></tr><br><tr><td>NONE    </td><td>none</td><td>    不转向任何的视图</td></tr></table>\n\n<p>c.方式三：动作类继承com.opensymphony.xwork2.ActionSupport    推荐使用</p>\n</li>\n<li><p>动作的访问</p>\n<p>a.使用通配符：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/action11.png\" alt=\"\"></p>\n<p>升级版：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/action12.png\" alt=\"\">    </p>\n<p>优先级：绝对匹配优先。使用通配符的按照在配置文件中的先后顺序进行匹配的。</p>\n<p>b.动态方法调用</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/action13.png\" alt=\"\"></p>\n</li>\n</ol>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/action14.png\" alt=\"\"></p>\n<h2 id=\"result元素\"><a href=\"#result元素\" class=\"headerlink\" title=\"result元素\"></a>result元素</h2><ol>\n<li><p>属性：</p>\n<p> name：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 </p>\n<p> type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。</p>\n<p> <em>struts.xml</em></p>\n<pre><code>&lt;!--\n result元素：配置逻辑结果视图；\n name属性：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 \n type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。\n                      常用取值：\n         dispatcher：(默认值)\n          使用请求转发，转向一个页面。\n         redirect：\n          使用重定向，转向一个页面。\n  --&gt;\n&lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;\n</code></pre></li>\n<li><p>result元素中type的取值</p>\n<p>常用结果类型介绍：</p>\n<p>dispatcher：(默认值)使用请求转发，转向一个页面。</p>\n<p>redirect：使用重定向，转向一个页面。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/redirect.png\" alt=\"\"></p>\n<p>redirectAction：注意：使用的是重定向。</p>\n<p>a.重定向到另一个相同名称空间的动作。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/redirectAction1.png\" alt=\"\"></p>\n<p>b.重定向到不同名称空间的动作</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/redirectAction2.png\" alt=\"\"></p>\n<p>chain：注意： 使用的是请求转发。</p>\n<p>a.转发到另一个相同名称空间的动作。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/chain1.png\" alt=\"\">    </p>\n<p>b.请求转发到不同名称空间的动作    </p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/chain2.png\" alt=\"\"></p>\n</li>\n</ol></The>"},{"title":"JAVA学习之常用的数据源配置","date":"2017-04-02T12:39:01.000Z","_content":"<Excerpt in index | 首页摘要>\n\n**常用的数据源配置：**\n\n- DBCP\n- C3P0\n- 用JavaWeb服务器管理数据源：Tomcat\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# DBCP #\n\n> DBCP：Apache推出的Database Connection Pool\n\n**使用步骤：**\n\n1. 添加jar包:\n\n     commons-dbcp-1.4.jar  \n     commons-pool-1.5.6.jar\n\n    (这两个jar包网上一搜有很多，如果找不到合适的，读者可以email我，我发给大家！)\n2. 添加属性资源文件\n3. 编写数据源工具类\n\n简例架构：\n\n![](http://olg3gwtbm.bkt.clouddn.com/DBCP.png)\n\n添加属性资源文件：\n\ndbcpconfig.properties\n\n注：这个文件也是去网上搜索，拿来直接用就可以了。\n\n*dbcpconfig.properties*\n\n    连接设置\n    driverClassName=com.mysql.jdbc.Driver\n    url=jdbc:mysql://localhost:3306/day16\n    username=root\n    password=\n\n    <!-- 初始化连接 -->\n    initialSize=10\n\n    最大连接数量\n    maxActive=50\n\n    <!-- 最大空闲连接 -->\n    maxIdle=20\n\n    <!-- 最小空闲连接 -->\n    minIdle=5\n\n    <!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->\n    maxWait=60000\n\n    JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] \n    注意：\"user\" 与 \"password\" 两个属性会被明确地传递，因此这里不需要包含他们。\n    connectionProperties=useUnicode=true;characterEncoding=utf8\n\n    指定由连接池所创建的连接的自动提交（auto-commit）状态。\n    defaultAutoCommit=true\n\n    driver default 指定由连接池所创建的连接的只读（read-only）状态。\n    如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）\n    defaultReadOnly=\n\n    driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。\n    可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE\n    defaultTransactionIsolation=REPEATABLE_READ\n\n编写数据源工具类\n\n*DBCPUtil.java*\n\n    package cn.terry.utils;\n\n    import java.io.IOException;\n    import java.security.spec.DSAGenParameterSpec;\n    import java.sql.Connection;\n    import java.sql.ResultSet;\n    import java.sql.SQLException;\n    import java.sql.Statement;\n    import java.util.Properties;\n\n    import javax.sql.DataSource;\n\n    import org.apache.commons.dbcp.BasicDataSourceFactory;\n\n    public class DBCPUtil {\n\n\tprivate static DataSource ds = null;\n\t\n\tstatic{\n\t\tProperties prop = new Properties();\n\t\t//根据DBCPUtil的classes的路径，加载配置文件\n\t\ttry {\n\t\t\tprop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(\"dbcpconfig.properties\"));\n\t\t\tds = BasicDataSourceFactory.createDataSource(prop);//得到一个数据源\n\t\t} catch (Exception e) {\n\t\t\tthrow new ExceptionInInitializerError(\"初始化错误，请检查配置文件\");\n\t\t}\t\t\n\t}\n\t\n\tpublic static Connection getConnection() {\n\t\ttry {\n\t\t\treturn ds.getConnection();\n\t\t} catch (SQLException e) {\n\t\t\tthrow new RuntimeException(\"服务器忙。。。\");\n\t\t}\n\t\t}\n\tpublic static void release(Connection conn,Statement stmt,ResultSet rs){\n\t\t//关闭资源\n\t\t\t\tif(rs!=null){\n\t\t\t\t\ttry {\n\t\t\t\t\t\trs.close();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\trs = null;\n\t\t\t\t}\n\t\t\t\tif(stmt!=null){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstmt.close();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tstmt = null;\n\t\t\t\t}\n\t\t\t\tif(conn!=null){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconn.close();//关闭\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tconn = null;\n\t\t\t\t}\n\t}\n\t\n    }\n\ntestJDBC.java\n\n    package cn.terry.test;\n\n    import java.sql.Connection;\n    import java.sql.PreparedStatement;\n    import java.sql.SQLException;\n\n    import org.junit.Test;\n\n\n    import cn.terry.utils.DBCPUtil;\n\n    public class testJDBC {\n\n\t@Test\n\tpublic void test1() {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconn = DBCPUtil.getConnection();\n\t\t\tps = conn.prepareStatement(\"..\");\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}finally {\n\t\t\tDBCPUtil.release(conn, ps, null);\n\t\t}\n\t\t\n\t}\n\n    }\n\n\n# C3P0 #\n\n这个是建立的java项目。\n\n** 简例结构图：**\n\n![](http://olg3gwtbm.bkt.clouddn.com/C3P0.png)\n\n** 使用步骤：**\n\n1、添加jar包 \n   \n   jar包也是去网上搜。\n\n2、编写配置文件\n\nc3p0-config.xml，放在classpath中，或classes目录中\n\n*c3p0-config.xml*\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <c3p0-config>\n      <default-config>\n\t<property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n\t<property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/mytest</property>\n\t<property name=\"user\">root</property>\n\t<property name=\"password\">root</property>\n    <property name=\"initialPoolSize\">10</property>\n    <property name=\"maxIdleTime\">30</property>\n    <property name=\"maxPoolSize\">100</property>\n    <property name=\"minPoolSize\">10</property>\n\n      </default-config>\n\n    </c3p0-config>\n\n3、编写工具类：\n\n*C3P0Util.java*\n\n    package cn.terry.utils;\n\n    import java.sql.Connection;\n    import java.sql.ResultSet;\n    import java.sql.SQLException;\n    import java.sql.Statement;\n\n    import javax.sql.DataSource;\n\n    import com.mchange.v2.c3p0.ComboPooledDataSource;\n\n    public class C3P0Util {\n\n\t//得到一个数据源\n\t\tprivate static DataSource dataSource = new ComboPooledDataSource();\n\t\t\n\t\t//从数据源中得到一个连接对象\n\t\tpublic static Connection getConnection(){\n\t\t\ttry {\n\t\t\t\treturn dataSource.getConnection();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new RuntimeException(\"服务器错误\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void release(Connection conn,Statement stmt,ResultSet rs){\n\t\t\t//关闭资源\n\t\t\t\t\tif(rs!=null){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\trs.close();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\trs = null;\n\t\t\t\t\t}\n\t\t\t\t\tif(stmt!=null){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tstmt.close();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstmt = null;\n\t\t\t\t\t}\n\t\t\t\t\tif(conn!=null){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconn.close();//关闭\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconn = null;\n\t\t\t\t\t}\n\t\t}\n    }\n\n*TestCRUD.java*\n\n    package cn.terry.utils;\n\n    import java.sql.Connection;\n    import java.sql.PreparedStatement;\n\n    import org.junit.Test;\n\n    public class TestCRUD {\n\t@Test\n\tpublic void testInsert(){\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\ttry {\n\t\t\tconn = C3P0Util.getConnection();\n\t\t\tps = conn.prepareStatement(\"insert into account(name,money) values('ggg',2000)\");\n\t\t\tps.executeUpdate();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tC3P0Util.release(conn, ps, null);\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tSystem.out.println(conn.getClass().getName());\n\t}\n\n    }\n\n\n# 用JavaWeb服务器管理数据源：Tomcat #\n\n开发JavaWeb应用，必须使用一个JavaWeb服务器，JavaWeb服务器都内置数据源。\n\nTomcat：（DBCP）\n\n数据源只需要配置服务器即可。\n\n 配置数据源的步骤：\n\n 1、拷贝数据库连接的jar到tomcatlib目录下\n\n 2、配置数据源XML文件\n\n- (**全局配置**)如果把配置信息写在tomcat下的conf目录的context.xml中，那么所有应用都能使用此数据源。\n\n  1）在tomcat的conf文件夹下的context.xml配置文件中加入：\n\n           <Resource name=\"jndi/mybatis\"   \n            auth=\"Container\"   \n            type=\"javax.sql.DataSource\"   \n            driverClassName=\"com.mysql.jdbc.Driver\"   \n            url=\"jdbc:mysql://localhost:3306/appdb\"   \n            username=\"root\"   \n            password=\"123456\"   \n            maxActive=\"20\"   \n            maxIdle=\"10\"   \n            maxWait=\"10000\"/>      \n\n  2)在项目的web.xml中加入资源引用：\n\n         <resource-ref>  \n         <description>JNDI DataSource</description>  \n         <res-ref-name>jndi/mybatis</res-ref-name>  \n         <res-ref-type>javax.sql.DataSource</res-ref-type>  \n         <res-auth>Container</res-auth>  \n         </resource-ref>  \n\n  *其中res-ref-name值要和context.xml的name值一致。*\n \n 3）jndi测试方法：\n\n           public void testJNDI() throws NamingException, SQLException{  \n              Context ctx = new InitialContext();  \n              DataSource ds = (DataSource) ctx.lookup(\"java:comp/env/jndi/mybatis\");  \n              Connection conn = ds.getConnection();  \n              System.out.println(conn.isClosed());  \n              }  \n\n 4）在jsp中调用加载jndi方式，不可以直接用main方法测试，必须通过启动容器从jsp中调用：\n\n                 TestPageAccessURL test = new TestPageAccessURL();  \n                 test.testJNDI();  \n\n\n- （**局部配置1**）如果是在当前应用的META-INF中创建context.xml, 编写数据源，那么只有当前应用可以使用。\n\n 1）在项目的META-INFO下面新建context.xml。加入：\n\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n                 <Context>  \n                  <Resource name=\"jndi/mybatis\"   \n                auth=\"Container\"   \n                type=\"javax.sql.DataSource\"   \n                driverClassName=\"com.mysql.jdbc.Driver\"   \n                url=\"jdbc:mysql://localhost:3306/appdb\"   \n                username=\"root\"   \n                password=\"123456\"   \n                maxActive=\"20\"   \n                maxIdle=\"10\"   \n                maxWait=\"10000\"/>      \n               </Context>  \n\n 其他配置同第一种方式。\n\n**局部配置2**（不推荐）。\n\n1）在tomcat的server.xml的<host>标签内，添加：\n\n             <Context path=\"/demo_jndi\" docBase=\"/demo_jndi\">  \n             <Resource  \n              name=\"jndi/mybatis\"  \n              type=\"javax.sql.DataSource\"  \n              driverClassName=\"com.mysql.jdbc.Driver\"  \n              maxIdle=\"2\"  \n              maxWait=\"5000\"  \n              username=\"root\"  \n              password=\"123456\"  \n              url=\"jdbc:mysql://localhost:3306/appdb\"  \n              maxActive=\"4\"/>  \n              </Context>  \n\n其他配置同第一种方式。\n","source":"_posts/JAVA学习之常用的数据源配置.md","raw":"---\ntitle: JAVA学习之常用的数据源配置\ndate: 2017-04-02 20:39:01\ncategories: JAVA #文章文类\ntags: [JAVA,连接池]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n<Excerpt in index | 首页摘要>\n\n**常用的数据源配置：**\n\n- DBCP\n- C3P0\n- 用JavaWeb服务器管理数据源：Tomcat\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# DBCP #\n\n> DBCP：Apache推出的Database Connection Pool\n\n**使用步骤：**\n\n1. 添加jar包:\n\n     commons-dbcp-1.4.jar  \n     commons-pool-1.5.6.jar\n\n    (这两个jar包网上一搜有很多，如果找不到合适的，读者可以email我，我发给大家！)\n2. 添加属性资源文件\n3. 编写数据源工具类\n\n简例架构：\n\n![](http://olg3gwtbm.bkt.clouddn.com/DBCP.png)\n\n添加属性资源文件：\n\ndbcpconfig.properties\n\n注：这个文件也是去网上搜索，拿来直接用就可以了。\n\n*dbcpconfig.properties*\n\n    连接设置\n    driverClassName=com.mysql.jdbc.Driver\n    url=jdbc:mysql://localhost:3306/day16\n    username=root\n    password=\n\n    <!-- 初始化连接 -->\n    initialSize=10\n\n    最大连接数量\n    maxActive=50\n\n    <!-- 最大空闲连接 -->\n    maxIdle=20\n\n    <!-- 最小空闲连接 -->\n    minIdle=5\n\n    <!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->\n    maxWait=60000\n\n    JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] \n    注意：\"user\" 与 \"password\" 两个属性会被明确地传递，因此这里不需要包含他们。\n    connectionProperties=useUnicode=true;characterEncoding=utf8\n\n    指定由连接池所创建的连接的自动提交（auto-commit）状态。\n    defaultAutoCommit=true\n\n    driver default 指定由连接池所创建的连接的只读（read-only）状态。\n    如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）\n    defaultReadOnly=\n\n    driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。\n    可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE\n    defaultTransactionIsolation=REPEATABLE_READ\n\n编写数据源工具类\n\n*DBCPUtil.java*\n\n    package cn.terry.utils;\n\n    import java.io.IOException;\n    import java.security.spec.DSAGenParameterSpec;\n    import java.sql.Connection;\n    import java.sql.ResultSet;\n    import java.sql.SQLException;\n    import java.sql.Statement;\n    import java.util.Properties;\n\n    import javax.sql.DataSource;\n\n    import org.apache.commons.dbcp.BasicDataSourceFactory;\n\n    public class DBCPUtil {\n\n\tprivate static DataSource ds = null;\n\t\n\tstatic{\n\t\tProperties prop = new Properties();\n\t\t//根据DBCPUtil的classes的路径，加载配置文件\n\t\ttry {\n\t\t\tprop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(\"dbcpconfig.properties\"));\n\t\t\tds = BasicDataSourceFactory.createDataSource(prop);//得到一个数据源\n\t\t} catch (Exception e) {\n\t\t\tthrow new ExceptionInInitializerError(\"初始化错误，请检查配置文件\");\n\t\t}\t\t\n\t}\n\t\n\tpublic static Connection getConnection() {\n\t\ttry {\n\t\t\treturn ds.getConnection();\n\t\t} catch (SQLException e) {\n\t\t\tthrow new RuntimeException(\"服务器忙。。。\");\n\t\t}\n\t\t}\n\tpublic static void release(Connection conn,Statement stmt,ResultSet rs){\n\t\t//关闭资源\n\t\t\t\tif(rs!=null){\n\t\t\t\t\ttry {\n\t\t\t\t\t\trs.close();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\trs = null;\n\t\t\t\t}\n\t\t\t\tif(stmt!=null){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstmt.close();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tstmt = null;\n\t\t\t\t}\n\t\t\t\tif(conn!=null){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconn.close();//关闭\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tconn = null;\n\t\t\t\t}\n\t}\n\t\n    }\n\ntestJDBC.java\n\n    package cn.terry.test;\n\n    import java.sql.Connection;\n    import java.sql.PreparedStatement;\n    import java.sql.SQLException;\n\n    import org.junit.Test;\n\n\n    import cn.terry.utils.DBCPUtil;\n\n    public class testJDBC {\n\n\t@Test\n\tpublic void test1() {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\tconn = DBCPUtil.getConnection();\n\t\t\tps = conn.prepareStatement(\"..\");\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}finally {\n\t\t\tDBCPUtil.release(conn, ps, null);\n\t\t}\n\t\t\n\t}\n\n    }\n\n\n# C3P0 #\n\n这个是建立的java项目。\n\n** 简例结构图：**\n\n![](http://olg3gwtbm.bkt.clouddn.com/C3P0.png)\n\n** 使用步骤：**\n\n1、添加jar包 \n   \n   jar包也是去网上搜。\n\n2、编写配置文件\n\nc3p0-config.xml，放在classpath中，或classes目录中\n\n*c3p0-config.xml*\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <c3p0-config>\n      <default-config>\n\t<property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n\t<property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/mytest</property>\n\t<property name=\"user\">root</property>\n\t<property name=\"password\">root</property>\n    <property name=\"initialPoolSize\">10</property>\n    <property name=\"maxIdleTime\">30</property>\n    <property name=\"maxPoolSize\">100</property>\n    <property name=\"minPoolSize\">10</property>\n\n      </default-config>\n\n    </c3p0-config>\n\n3、编写工具类：\n\n*C3P0Util.java*\n\n    package cn.terry.utils;\n\n    import java.sql.Connection;\n    import java.sql.ResultSet;\n    import java.sql.SQLException;\n    import java.sql.Statement;\n\n    import javax.sql.DataSource;\n\n    import com.mchange.v2.c3p0.ComboPooledDataSource;\n\n    public class C3P0Util {\n\n\t//得到一个数据源\n\t\tprivate static DataSource dataSource = new ComboPooledDataSource();\n\t\t\n\t\t//从数据源中得到一个连接对象\n\t\tpublic static Connection getConnection(){\n\t\t\ttry {\n\t\t\t\treturn dataSource.getConnection();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new RuntimeException(\"服务器错误\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic static void release(Connection conn,Statement stmt,ResultSet rs){\n\t\t\t//关闭资源\n\t\t\t\t\tif(rs!=null){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\trs.close();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\trs = null;\n\t\t\t\t\t}\n\t\t\t\t\tif(stmt!=null){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tstmt.close();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstmt = null;\n\t\t\t\t\t}\n\t\t\t\t\tif(conn!=null){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconn.close();//关闭\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconn = null;\n\t\t\t\t\t}\n\t\t}\n    }\n\n*TestCRUD.java*\n\n    package cn.terry.utils;\n\n    import java.sql.Connection;\n    import java.sql.PreparedStatement;\n\n    import org.junit.Test;\n\n    public class TestCRUD {\n\t@Test\n\tpublic void testInsert(){\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\t\n\t\ttry {\n\t\t\tconn = C3P0Util.getConnection();\n\t\t\tps = conn.prepareStatement(\"insert into account(name,money) values('ggg',2000)\");\n\t\t\tps.executeUpdate();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tC3P0Util.release(conn, ps, null);\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tSystem.out.println(conn.getClass().getName());\n\t}\n\n    }\n\n\n# 用JavaWeb服务器管理数据源：Tomcat #\n\n开发JavaWeb应用，必须使用一个JavaWeb服务器，JavaWeb服务器都内置数据源。\n\nTomcat：（DBCP）\n\n数据源只需要配置服务器即可。\n\n 配置数据源的步骤：\n\n 1、拷贝数据库连接的jar到tomcatlib目录下\n\n 2、配置数据源XML文件\n\n- (**全局配置**)如果把配置信息写在tomcat下的conf目录的context.xml中，那么所有应用都能使用此数据源。\n\n  1）在tomcat的conf文件夹下的context.xml配置文件中加入：\n\n           <Resource name=\"jndi/mybatis\"   \n            auth=\"Container\"   \n            type=\"javax.sql.DataSource\"   \n            driverClassName=\"com.mysql.jdbc.Driver\"   \n            url=\"jdbc:mysql://localhost:3306/appdb\"   \n            username=\"root\"   \n            password=\"123456\"   \n            maxActive=\"20\"   \n            maxIdle=\"10\"   \n            maxWait=\"10000\"/>      \n\n  2)在项目的web.xml中加入资源引用：\n\n         <resource-ref>  \n         <description>JNDI DataSource</description>  \n         <res-ref-name>jndi/mybatis</res-ref-name>  \n         <res-ref-type>javax.sql.DataSource</res-ref-type>  \n         <res-auth>Container</res-auth>  \n         </resource-ref>  \n\n  *其中res-ref-name值要和context.xml的name值一致。*\n \n 3）jndi测试方法：\n\n           public void testJNDI() throws NamingException, SQLException{  \n              Context ctx = new InitialContext();  \n              DataSource ds = (DataSource) ctx.lookup(\"java:comp/env/jndi/mybatis\");  \n              Connection conn = ds.getConnection();  \n              System.out.println(conn.isClosed());  \n              }  \n\n 4）在jsp中调用加载jndi方式，不可以直接用main方法测试，必须通过启动容器从jsp中调用：\n\n                 TestPageAccessURL test = new TestPageAccessURL();  \n                 test.testJNDI();  \n\n\n- （**局部配置1**）如果是在当前应用的META-INF中创建context.xml, 编写数据源，那么只有当前应用可以使用。\n\n 1）在项目的META-INFO下面新建context.xml。加入：\n\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n                 <Context>  \n                  <Resource name=\"jndi/mybatis\"   \n                auth=\"Container\"   \n                type=\"javax.sql.DataSource\"   \n                driverClassName=\"com.mysql.jdbc.Driver\"   \n                url=\"jdbc:mysql://localhost:3306/appdb\"   \n                username=\"root\"   \n                password=\"123456\"   \n                maxActive=\"20\"   \n                maxIdle=\"10\"   \n                maxWait=\"10000\"/>      \n               </Context>  \n\n 其他配置同第一种方式。\n\n**局部配置2**（不推荐）。\n\n1）在tomcat的server.xml的<host>标签内，添加：\n\n             <Context path=\"/demo_jndi\" docBase=\"/demo_jndi\">  \n             <Resource  \n              name=\"jndi/mybatis\"  \n              type=\"javax.sql.DataSource\"  \n              driverClassName=\"com.mysql.jdbc.Driver\"  \n              maxIdle=\"2\"  \n              maxWait=\"5000\"  \n              username=\"root\"  \n              password=\"123456\"  \n              url=\"jdbc:mysql://localhost:3306/appdb\"  \n              maxActive=\"4\"/>  \n              </Context>  \n\n其他配置同第一种方式。\n","slug":"JAVA学习之常用的数据源配置","published":1,"updated":"2017-04-15T09:43:46.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6vj001164xt6jzb658r","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<p><strong>常用的数据源配置：</strong></p>\n<ul>\n<li>DBCP</li>\n<li>C3P0</li>\n<li>用JavaWeb服务器管理数据源：Tomcat</li>\n</ul>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"DBCP\"><a href=\"#DBCP\" class=\"headerlink\" title=\"DBCP\"></a>DBCP</h1><blockquote>\n<p>DBCP：Apache推出的Database Connection Pool</p>\n</blockquote>\n<p><strong>使用步骤：</strong></p>\n<ol>\n<li><p>添加jar包:</p>\n<p>  commons-dbcp-1.4.jar<br>  commons-pool-1.5.6.jar</p>\n<p> (这两个jar包网上一搜有很多，如果找不到合适的，读者可以email我，我发给大家！)</p>\n</li>\n<li>添加属性资源文件</li>\n<li>编写数据源工具类</li>\n</ol>\n<p>简例架构：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/DBCP.png\" alt=\"\"></p>\n<p>添加属性资源文件：</p>\n<p>dbcpconfig.properties</p>\n<p>注：这个文件也是去网上搜索，拿来直接用就可以了。</p>\n<p><em>dbcpconfig.properties</em></p>\n<pre><code>连接设置\ndriverClassName=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/day16\nusername=root\npassword=\n\n&lt;!-- 初始化连接 --&gt;\ninitialSize=10\n\n最大连接数量\nmaxActive=50\n\n&lt;!-- 最大空闲连接 --&gt;\nmaxIdle=20\n\n&lt;!-- 最小空闲连接 --&gt;\nminIdle=5\n\n&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;\nmaxWait=60000\n\nJDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] \n注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。\nconnectionProperties=useUnicode=true;characterEncoding=utf8\n\n指定由连接池所创建的连接的自动提交（auto-commit）状态。\ndefaultAutoCommit=true\n\ndriver default 指定由连接池所创建的连接的只读（read-only）状态。\n如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）\ndefaultReadOnly=\n\ndriver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。\n可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE\ndefaultTransactionIsolation=REPEATABLE_READ\n</code></pre><p>编写数据源工具类</p>\n<p><em>DBCPUtil.java</em></p>\n<pre><code>package cn.terry.utils;\n\nimport java.io.IOException;\nimport java.security.spec.DSAGenParameterSpec;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\n\nimport javax.sql.DataSource;\n\nimport org.apache.commons.dbcp.BasicDataSourceFactory;\n\npublic class DBCPUtil {\n\nprivate static DataSource ds = null;\n\nstatic{\n    Properties prop = new Properties();\n    //根据DBCPUtil的classes的路径，加载配置文件\n    try {\n        prop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;));\n        ds = BasicDataSourceFactory.createDataSource(prop);//得到一个数据源\n    } catch (Exception e) {\n        throw new ExceptionInInitializerError(&quot;初始化错误，请检查配置文件&quot;);\n    }        \n}\n\npublic static Connection getConnection() {\n    try {\n        return ds.getConnection();\n    } catch (SQLException e) {\n        throw new RuntimeException(&quot;服务器忙。。。&quot;);\n    }\n    }\npublic static void release(Connection conn,Statement stmt,ResultSet rs){\n    //关闭资源\n            if(rs!=null){\n                try {\n                    rs.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                rs = null;\n            }\n            if(stmt!=null){\n                try {\n                    stmt.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                stmt = null;\n            }\n            if(conn!=null){\n                try {\n                    conn.close();//关闭\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                conn = null;\n            }\n}\n\n}\n</code></pre><p>testJDBC.java</p>\n<pre><code>package cn.terry.test;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\nimport org.junit.Test;\n\n\nimport cn.terry.utils.DBCPUtil;\n\npublic class testJDBC {\n\n@Test\npublic void test1() {\n    Connection conn = null;\n    PreparedStatement ps = null;\n\n\n    try {\n        conn = DBCPUtil.getConnection();\n        ps = conn.prepareStatement(&quot;..&quot;);\n    } catch (SQLException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }finally {\n        DBCPUtil.release(conn, ps, null);\n    }\n\n}\n\n}\n</code></pre><h1 id=\"C3P0\"><a href=\"#C3P0\" class=\"headerlink\" title=\"C3P0\"></a>C3P0</h1><p>这个是建立的java项目。</p>\n<p><strong> 简例结构图：</strong></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/C3P0.png\" alt=\"\"></p>\n<p><strong> 使用步骤：</strong></p>\n<p>1、添加jar包 </p>\n<p>   jar包也是去网上搜。</p>\n<p>2、编写配置文件</p>\n<p>c3p0-config.xml，放在classpath中，或classes目录中</p>\n<p><em>c3p0-config.xml</em></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;c3p0-config&gt;\n  &lt;default-config&gt;\n&lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;\n&lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/mytest&lt;/property&gt;\n&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;\n&lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;\n&lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;\n&lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;\n&lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;\n&lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;\n\n  &lt;/default-config&gt;\n\n&lt;/c3p0-config&gt;\n</code></pre><p>3、编写工具类：</p>\n<p><em>C3P0Util.java</em></p>\n<pre><code>package cn.terry.utils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport javax.sql.DataSource;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\npublic class C3P0Util {\n\n//得到一个数据源\n    private static DataSource dataSource = new ComboPooledDataSource();\n\n    //从数据源中得到一个连接对象\n    public static Connection getConnection(){\n        try {\n            return dataSource.getConnection();\n        } catch (SQLException e) {\n            throw new RuntimeException(&quot;服务器错误&quot;);\n        }\n    }\n\n    public static void release(Connection conn,Statement stmt,ResultSet rs){\n        //关闭资源\n                if(rs!=null){\n                    try {\n                        rs.close();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    rs = null;\n                }\n                if(stmt!=null){\n                    try {\n                        stmt.close();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    stmt = null;\n                }\n                if(conn!=null){\n                    try {\n                        conn.close();//关闭\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    conn = null;\n                }\n    }\n}\n</code></pre><p><em>TestCRUD.java</em></p>\n<pre><code>package cn.terry.utils;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\n\nimport org.junit.Test;\n\npublic class TestCRUD {\n@Test\npublic void testInsert(){\n    Connection conn = null;\n    PreparedStatement ps = null;\n\n    try {\n        conn = C3P0Util.getConnection();\n        ps = conn.prepareStatement(&quot;insert into account(name,money) values(&apos;ggg&apos;,2000)&quot;);\n        ps.executeUpdate();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }finally{\n        C3P0Util.release(conn, ps, null);\n\n    }\n\n\n    System.out.println(conn.getClass().getName());\n}\n\n}\n</code></pre><h1 id=\"用JavaWeb服务器管理数据源：Tomcat\"><a href=\"#用JavaWeb服务器管理数据源：Tomcat\" class=\"headerlink\" title=\"用JavaWeb服务器管理数据源：Tomcat\"></a>用JavaWeb服务器管理数据源：Tomcat</h1><p>开发JavaWeb应用，必须使用一个JavaWeb服务器，JavaWeb服务器都内置数据源。</p>\n<p>Tomcat：（DBCP）</p>\n<p>数据源只需要配置服务器即可。</p>\n<p> 配置数据源的步骤：</p>\n<p> 1、拷贝数据库连接的jar到tomcatlib目录下</p>\n<p> 2、配置数据源XML文件</p>\n<ul>\n<li><p>(<strong>全局配置</strong>)如果把配置信息写在tomcat下的conf目录的context.xml中，那么所有应用都能使用此数据源。</p>\n<p>1）在tomcat的conf文件夹下的context.xml配置文件中加入：</p>\n<pre><code>&lt;Resource name=&quot;jndi/mybatis&quot;   \n auth=&quot;Container&quot;   \n type=&quot;javax.sql.DataSource&quot;   \n driverClassName=&quot;com.mysql.jdbc.Driver&quot;   \n url=&quot;jdbc:mysql://localhost:3306/appdb&quot;   \n username=&quot;root&quot;   \n password=&quot;123456&quot;   \n maxActive=&quot;20&quot;   \n maxIdle=&quot;10&quot;   \n maxWait=&quot;10000&quot;/&gt;      \n</code></pre><p>2)在项目的web.xml中加入资源引用：</p>\n<pre><code>&lt;resource-ref&gt;  \n&lt;description&gt;JNDI DataSource&lt;/description&gt;  \n&lt;res-ref-name&gt;jndi/mybatis&lt;/res-ref-name&gt;  \n&lt;res-ref-type&gt;javax.sql.DataSource&lt;/res-ref-type&gt;  \n&lt;res-auth&gt;Container&lt;/res-auth&gt;  \n&lt;/resource-ref&gt;  \n</code></pre><p><em>其中res-ref-name值要和context.xml的name值一致。</em></p>\n<p>3）jndi测试方法：</p>\n<pre><code>public void testJNDI() throws NamingException, SQLException{  \n   Context ctx = new InitialContext();  \n   DataSource ds = (DataSource) ctx.lookup(&quot;java:comp/env/jndi/mybatis&quot;);  \n   Connection conn = ds.getConnection();  \n   System.out.println(conn.isClosed());  \n   }  \n</code></pre><p>4）在jsp中调用加载jndi方式，不可以直接用main方法测试，必须通过启动容器从jsp中调用：</p>\n<pre><code>TestPageAccessURL test = new TestPageAccessURL();  \ntest.testJNDI();  \n</code></pre></li>\n</ul>\n<ul>\n<li><p>（<strong>局部配置1</strong>）如果是在当前应用的META-INF中创建context.xml, 编写数据源，那么只有当前应用可以使用。</p>\n<p>1）在项目的META-INFO下面新建context.xml。加入：</p>\n<pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  \n  &lt;Context&gt;  \n   &lt;Resource name=&quot;jndi/mybatis&quot;   \n auth=&quot;Container&quot;   \n type=&quot;javax.sql.DataSource&quot;   \n driverClassName=&quot;com.mysql.jdbc.Driver&quot;   \n url=&quot;jdbc:mysql://localhost:3306/appdb&quot;   \n username=&quot;root&quot;   \n password=&quot;123456&quot;   \n maxActive=&quot;20&quot;   \n maxIdle=&quot;10&quot;   \n maxWait=&quot;10000&quot;/&gt;      \n&lt;/Context&gt;  \n</code></pre><p>其他配置同第一种方式。</p>\n</li>\n</ul>\n<p><strong>局部配置2</strong>（不推荐）。</p>\n<p>1）在tomcat的server.xml的<host>标签内，添加：</host></p>\n<pre><code>&lt;Context path=&quot;/demo_jndi&quot; docBase=&quot;/demo_jndi&quot;&gt;  \n&lt;Resource  \n name=&quot;jndi/mybatis&quot;  \n type=&quot;javax.sql.DataSource&quot;  \n driverClassName=&quot;com.mysql.jdbc.Driver&quot;  \n maxIdle=&quot;2&quot;  \n maxWait=&quot;5000&quot;  \n username=&quot;root&quot;  \n password=&quot;123456&quot;  \n url=&quot;jdbc:mysql://localhost:3306/appdb&quot;  \n maxActive=&quot;4&quot;/&gt;  \n &lt;/Context&gt;  \n</code></pre><p>其他配置同第一种方式。</p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<p><strong>常用的数据源配置：</strong></p>\n<ul>\n<li>DBCP</li>\n<li>C3P0</li>\n<li>用JavaWeb服务器管理数据源：Tomcat</li>\n</ul></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"DBCP\"><a href=\"#DBCP\" class=\"headerlink\" title=\"DBCP\"></a>DBCP</h1><blockquote>\n<p>DBCP：Apache推出的Database Connection Pool</p>\n</blockquote>\n<p><strong>使用步骤：</strong></p>\n<ol>\n<li><p>添加jar包:</p>\n<p>  commons-dbcp-1.4.jar<br>  commons-pool-1.5.6.jar</p>\n<p> (这两个jar包网上一搜有很多，如果找不到合适的，读者可以email我，我发给大家！)</p>\n</li>\n<li>添加属性资源文件</li>\n<li>编写数据源工具类</li>\n</ol>\n<p>简例架构：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/DBCP.png\" alt=\"\"></p>\n<p>添加属性资源文件：</p>\n<p>dbcpconfig.properties</p>\n<p>注：这个文件也是去网上搜索，拿来直接用就可以了。</p>\n<p><em>dbcpconfig.properties</em></p>\n<pre><code>连接设置\ndriverClassName=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/day16\nusername=root\npassword=\n\n&lt;!-- 初始化连接 --&gt;\ninitialSize=10\n\n最大连接数量\nmaxActive=50\n\n&lt;!-- 最大空闲连接 --&gt;\nmaxIdle=20\n\n&lt;!-- 最小空闲连接 --&gt;\nminIdle=5\n\n&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;\nmaxWait=60000\n\nJDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] \n注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。\nconnectionProperties=useUnicode=true;characterEncoding=utf8\n\n指定由连接池所创建的连接的自动提交（auto-commit）状态。\ndefaultAutoCommit=true\n\ndriver default 指定由连接池所创建的连接的只读（read-only）状态。\n如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）\ndefaultReadOnly=\n\ndriver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。\n可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE\ndefaultTransactionIsolation=REPEATABLE_READ\n</code></pre><p>编写数据源工具类</p>\n<p><em>DBCPUtil.java</em></p>\n<pre><code>package cn.terry.utils;\n\nimport java.io.IOException;\nimport java.security.spec.DSAGenParameterSpec;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\n\nimport javax.sql.DataSource;\n\nimport org.apache.commons.dbcp.BasicDataSourceFactory;\n\npublic class DBCPUtil {\n\nprivate static DataSource ds = null;\n\nstatic{\n    Properties prop = new Properties();\n    //根据DBCPUtil的classes的路径，加载配置文件\n    try {\n        prop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;));\n        ds = BasicDataSourceFactory.createDataSource(prop);//得到一个数据源\n    } catch (Exception e) {\n        throw new ExceptionInInitializerError(&quot;初始化错误，请检查配置文件&quot;);\n    }        \n}\n\npublic static Connection getConnection() {\n    try {\n        return ds.getConnection();\n    } catch (SQLException e) {\n        throw new RuntimeException(&quot;服务器忙。。。&quot;);\n    }\n    }\npublic static void release(Connection conn,Statement stmt,ResultSet rs){\n    //关闭资源\n            if(rs!=null){\n                try {\n                    rs.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                rs = null;\n            }\n            if(stmt!=null){\n                try {\n                    stmt.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                stmt = null;\n            }\n            if(conn!=null){\n                try {\n                    conn.close();//关闭\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                conn = null;\n            }\n}\n\n}\n</code></pre><p>testJDBC.java</p>\n<pre><code>package cn.terry.test;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\nimport org.junit.Test;\n\n\nimport cn.terry.utils.DBCPUtil;\n\npublic class testJDBC {\n\n@Test\npublic void test1() {\n    Connection conn = null;\n    PreparedStatement ps = null;\n\n\n    try {\n        conn = DBCPUtil.getConnection();\n        ps = conn.prepareStatement(&quot;..&quot;);\n    } catch (SQLException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }finally {\n        DBCPUtil.release(conn, ps, null);\n    }\n\n}\n\n}\n</code></pre><h1 id=\"C3P0\"><a href=\"#C3P0\" class=\"headerlink\" title=\"C3P0\"></a>C3P0</h1><p>这个是建立的java项目。</p>\n<p><strong> 简例结构图：</strong></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/C3P0.png\" alt=\"\"></p>\n<p><strong> 使用步骤：</strong></p>\n<p>1、添加jar包 </p>\n<p>   jar包也是去网上搜。</p>\n<p>2、编写配置文件</p>\n<p>c3p0-config.xml，放在classpath中，或classes目录中</p>\n<p><em>c3p0-config.xml</em></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;c3p0-config&gt;\n  &lt;default-config&gt;\n&lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;\n&lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/mytest&lt;/property&gt;\n&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;\n&lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;\n&lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;\n&lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;\n&lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;\n&lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;\n\n  &lt;/default-config&gt;\n\n&lt;/c3p0-config&gt;\n</code></pre><p>3、编写工具类：</p>\n<p><em>C3P0Util.java</em></p>\n<pre><code>package cn.terry.utils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport javax.sql.DataSource;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\npublic class C3P0Util {\n\n//得到一个数据源\n    private static DataSource dataSource = new ComboPooledDataSource();\n\n    //从数据源中得到一个连接对象\n    public static Connection getConnection(){\n        try {\n            return dataSource.getConnection();\n        } catch (SQLException e) {\n            throw new RuntimeException(&quot;服务器错误&quot;);\n        }\n    }\n\n    public static void release(Connection conn,Statement stmt,ResultSet rs){\n        //关闭资源\n                if(rs!=null){\n                    try {\n                        rs.close();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    rs = null;\n                }\n                if(stmt!=null){\n                    try {\n                        stmt.close();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    stmt = null;\n                }\n                if(conn!=null){\n                    try {\n                        conn.close();//关闭\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    conn = null;\n                }\n    }\n}\n</code></pre><p><em>TestCRUD.java</em></p>\n<pre><code>package cn.terry.utils;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\n\nimport org.junit.Test;\n\npublic class TestCRUD {\n@Test\npublic void testInsert(){\n    Connection conn = null;\n    PreparedStatement ps = null;\n\n    try {\n        conn = C3P0Util.getConnection();\n        ps = conn.prepareStatement(&quot;insert into account(name,money) values(&apos;ggg&apos;,2000)&quot;);\n        ps.executeUpdate();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }finally{\n        C3P0Util.release(conn, ps, null);\n\n    }\n\n\n    System.out.println(conn.getClass().getName());\n}\n\n}\n</code></pre><h1 id=\"用JavaWeb服务器管理数据源：Tomcat\"><a href=\"#用JavaWeb服务器管理数据源：Tomcat\" class=\"headerlink\" title=\"用JavaWeb服务器管理数据源：Tomcat\"></a>用JavaWeb服务器管理数据源：Tomcat</h1><p>开发JavaWeb应用，必须使用一个JavaWeb服务器，JavaWeb服务器都内置数据源。</p>\n<p>Tomcat：（DBCP）</p>\n<p>数据源只需要配置服务器即可。</p>\n<p> 配置数据源的步骤：</p>\n<p> 1、拷贝数据库连接的jar到tomcatlib目录下</p>\n<p> 2、配置数据源XML文件</p>\n<ul>\n<li><p>(<strong>全局配置</strong>)如果把配置信息写在tomcat下的conf目录的context.xml中，那么所有应用都能使用此数据源。</p>\n<p>1）在tomcat的conf文件夹下的context.xml配置文件中加入：</p>\n<pre><code>&lt;Resource name=&quot;jndi/mybatis&quot;   \n auth=&quot;Container&quot;   \n type=&quot;javax.sql.DataSource&quot;   \n driverClassName=&quot;com.mysql.jdbc.Driver&quot;   \n url=&quot;jdbc:mysql://localhost:3306/appdb&quot;   \n username=&quot;root&quot;   \n password=&quot;123456&quot;   \n maxActive=&quot;20&quot;   \n maxIdle=&quot;10&quot;   \n maxWait=&quot;10000&quot;/&gt;      \n</code></pre><p>2)在项目的web.xml中加入资源引用：</p>\n<pre><code>&lt;resource-ref&gt;  \n&lt;description&gt;JNDI DataSource&lt;/description&gt;  \n&lt;res-ref-name&gt;jndi/mybatis&lt;/res-ref-name&gt;  \n&lt;res-ref-type&gt;javax.sql.DataSource&lt;/res-ref-type&gt;  \n&lt;res-auth&gt;Container&lt;/res-auth&gt;  \n&lt;/resource-ref&gt;  \n</code></pre><p><em>其中res-ref-name值要和context.xml的name值一致。</em></p>\n<p>3）jndi测试方法：</p>\n<pre><code>public void testJNDI() throws NamingException, SQLException{  \n   Context ctx = new InitialContext();  \n   DataSource ds = (DataSource) ctx.lookup(&quot;java:comp/env/jndi/mybatis&quot;);  \n   Connection conn = ds.getConnection();  \n   System.out.println(conn.isClosed());  \n   }  \n</code></pre><p>4）在jsp中调用加载jndi方式，不可以直接用main方法测试，必须通过启动容器从jsp中调用：</p>\n<pre><code>TestPageAccessURL test = new TestPageAccessURL();  \ntest.testJNDI();  \n</code></pre></li>\n</ul>\n<ul>\n<li><p>（<strong>局部配置1</strong>）如果是在当前应用的META-INF中创建context.xml, 编写数据源，那么只有当前应用可以使用。</p>\n<p>1）在项目的META-INFO下面新建context.xml。加入：</p>\n<pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  \n  &lt;Context&gt;  \n   &lt;Resource name=&quot;jndi/mybatis&quot;   \n auth=&quot;Container&quot;   \n type=&quot;javax.sql.DataSource&quot;   \n driverClassName=&quot;com.mysql.jdbc.Driver&quot;   \n url=&quot;jdbc:mysql://localhost:3306/appdb&quot;   \n username=&quot;root&quot;   \n password=&quot;123456&quot;   \n maxActive=&quot;20&quot;   \n maxIdle=&quot;10&quot;   \n maxWait=&quot;10000&quot;/&gt;      \n&lt;/Context&gt;  \n</code></pre><p>其他配置同第一种方式。</p>\n</li>\n</ul>\n<p><strong>局部配置2</strong>（不推荐）。</p>\n<p>1）在tomcat的server.xml的<host>标签内，添加：</host></p>\n<pre><code>&lt;Context path=&quot;/demo_jndi&quot; docBase=&quot;/demo_jndi&quot;&gt;  \n&lt;Resource  \n name=&quot;jndi/mybatis&quot;  \n type=&quot;javax.sql.DataSource&quot;  \n driverClassName=&quot;com.mysql.jdbc.Driver&quot;  \n maxIdle=&quot;2&quot;  \n maxWait=&quot;5000&quot;  \n username=&quot;root&quot;  \n password=&quot;123456&quot;  \n url=&quot;jdbc:mysql://localhost:3306/appdb&quot;  \n maxActive=&quot;4&quot;/&gt;  \n &lt;/Context&gt;  \n</code></pre><p>其他配置同第一种方式。</p></The>"},{"title":"JAVA学习之框架前述","date":"2017-04-15T09:50:03.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n> 本篇文章是对学习框架前的开题篇。\n\n内容为：\n\n - 框架概述\n - 三层架构\n - 控制器：MVC中的控制器\n - 案例中的问题\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 框架概述 #\n\n**框架的意义与作用：**\n\n  所谓`框架`，就是**把一些繁琐的重复性代码封装起来**，使程序员在编码中把更多的经历放到业务需求的分析和理解上面。\n  特点：封装了很多细节，程序员在使用的时候会非常简单。\n\n# 三层架构 #\n\n![](http://olg3gwtbm.bkt.clouddn.com/01Struts2.png)\n\n    表现层：M model V view C control\n\t业务层：service\n\t持久层：dao  data access object\n\tStruts2在三层架构中的位置是处于表现层。Struts2只是一个表现层框架。\n\n# 控制器：MVC中的控制器 #\n\n## MVC回顾 ##\n\n\t\tM：Model 模型，封装数据。javabean\n\t\tV：view\t视图，展示界面。jsp\n\t\tC：Controller 控制器，控制程序流程。Servlet\n\n## Servlet和Filter ##\n\n**Servlet:**\n\n![](http://olg3gwtbm.bkt.clouddn.com/servlet.png)\n\t\t\t\n**Filter：**\n\t\n![](http://olg3gwtbm.bkt.clouddn.com/filter.png)\n\t\t\n**总结：**\n\nServlet能做的事情，过滤器也可以做到。并且过滤器比Servlet还多了一个放行的功能，因此过滤器比Servlet功能更为强大。\n结论就是：过滤器同样也适合做控制器。\n\n# 案例中的问题 #\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B1.png)\n\n**规律：**\n\n\t1. 获取请求正文，用户要做什么事情\n\t2. 根据不同的请求，做出不同的判断\n\t3. 执行具体的方法代码（*动作*）\n\t4. 转向页面，展示给用户\n\t \n**缺陷：**\n\n\t1. 重复性劳动太多，具体的执行代码也有冗余代码。\n\t2. 到底要做什么全是硬编码，像用户要做什么事情，对应执行什么代码，可以写在配置文件中。\n\t3. 具体的代码方法放到了控制器中，过于臃肿。","source":"_posts/JAVA学习之框架前述.md","raw":"---\ntitle: JAVA学习之框架前述\ndate: 2017-04-15 17:50:03\ncategories: JAVA #文章文类\ntags: [JAVA,框架]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n> 本篇文章是对学习框架前的开题篇。\n\n内容为：\n\n - 框架概述\n - 三层架构\n - 控制器：MVC中的控制器\n - 案例中的问题\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 框架概述 #\n\n**框架的意义与作用：**\n\n  所谓`框架`，就是**把一些繁琐的重复性代码封装起来**，使程序员在编码中把更多的经历放到业务需求的分析和理解上面。\n  特点：封装了很多细节，程序员在使用的时候会非常简单。\n\n# 三层架构 #\n\n![](http://olg3gwtbm.bkt.clouddn.com/01Struts2.png)\n\n    表现层：M model V view C control\n\t业务层：service\n\t持久层：dao  data access object\n\tStruts2在三层架构中的位置是处于表现层。Struts2只是一个表现层框架。\n\n# 控制器：MVC中的控制器 #\n\n## MVC回顾 ##\n\n\t\tM：Model 模型，封装数据。javabean\n\t\tV：view\t视图，展示界面。jsp\n\t\tC：Controller 控制器，控制程序流程。Servlet\n\n## Servlet和Filter ##\n\n**Servlet:**\n\n![](http://olg3gwtbm.bkt.clouddn.com/servlet.png)\n\t\t\t\n**Filter：**\n\t\n![](http://olg3gwtbm.bkt.clouddn.com/filter.png)\n\t\t\n**总结：**\n\nServlet能做的事情，过滤器也可以做到。并且过滤器比Servlet还多了一个放行的功能，因此过滤器比Servlet功能更为强大。\n结论就是：过滤器同样也适合做控制器。\n\n# 案例中的问题 #\n\n![](http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B1.png)\n\n**规律：**\n\n\t1. 获取请求正文，用户要做什么事情\n\t2. 根据不同的请求，做出不同的判断\n\t3. 执行具体的方法代码（*动作*）\n\t4. 转向页面，展示给用户\n\t \n**缺陷：**\n\n\t1. 重复性劳动太多，具体的执行代码也有冗余代码。\n\t2. 到底要做什么全是硬编码，像用户要做什么事情，对应执行什么代码，可以写在配置文件中。\n\t3. 具体的代码方法放到了控制器中，过于臃肿。","slug":"JAVA学习之框架前述","published":1,"updated":"2017-04-15T10:11:31.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6vn001364xtynalxtmb","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>本篇文章是对学习框架前的开题篇。</p>\n</blockquote>\n<p>内容为：</p>\n<ul>\n<li>框架概述</li>\n<li>三层架构</li>\n<li>控制器：MVC中的控制器</li>\n<li>案例中的问题</li>\n</ul>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"框架概述\"><a href=\"#框架概述\" class=\"headerlink\" title=\"框架概述\"></a>框架概述</h1><p><strong>框架的意义与作用：</strong></p>\n<p>  所谓<code>框架</code>，就是<strong>把一些繁琐的重复性代码封装起来</strong>，使程序员在编码中把更多的经历放到业务需求的分析和理解上面。<br>  特点：封装了很多细节，程序员在使用的时候会非常简单。</p>\n<h1 id=\"三层架构\"><a href=\"#三层架构\" class=\"headerlink\" title=\"三层架构\"></a>三层架构</h1><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/01Struts2.png\" alt=\"\"></p>\n<pre><code>表现层：M model V view C control\n业务层：service\n持久层：dao  data access object\nStruts2在三层架构中的位置是处于表现层。Struts2只是一个表现层框架。\n</code></pre><h1 id=\"控制器：MVC中的控制器\"><a href=\"#控制器：MVC中的控制器\" class=\"headerlink\" title=\"控制器：MVC中的控制器\"></a>控制器：MVC中的控制器</h1><h2 id=\"MVC回顾\"><a href=\"#MVC回顾\" class=\"headerlink\" title=\"MVC回顾\"></a>MVC回顾</h2><pre><code>M：Model 模型，封装数据。javabean\nV：view    视图，展示界面。jsp\nC：Controller 控制器，控制程序流程。Servlet\n</code></pre><h2 id=\"Servlet和Filter\"><a href=\"#Servlet和Filter\" class=\"headerlink\" title=\"Servlet和Filter\"></a>Servlet和Filter</h2><p><strong>Servlet:</strong></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/servlet.png\" alt=\"\"></p>\n<p><strong>Filter：</strong></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/filter.png\" alt=\"\"></p>\n<p><strong>总结：</strong></p>\n<p>Servlet能做的事情，过滤器也可以做到。并且过滤器比Servlet还多了一个放行的功能，因此过滤器比Servlet功能更为强大。<br>结论就是：过滤器同样也适合做控制器。</p>\n<h1 id=\"案例中的问题\"><a href=\"#案例中的问题\" class=\"headerlink\" title=\"案例中的问题\"></a>案例中的问题</h1><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B1.png\" alt=\"\"></p>\n<p><strong>规律：</strong></p>\n<pre><code>1. 获取请求正文，用户要做什么事情\n2. 根据不同的请求，做出不同的判断\n3. 执行具体的方法代码（*动作*）\n4. 转向页面，展示给用户\n</code></pre><p><strong>缺陷：</strong></p>\n<pre><code>1. 重复性劳动太多，具体的执行代码也有冗余代码。\n2. 到底要做什么全是硬编码，像用户要做什么事情，对应执行什么代码，可以写在配置文件中。\n3. 具体的代码方法放到了控制器中，过于臃肿。\n</code></pre></the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>本篇文章是对学习框架前的开题篇。</p>\n</blockquote>\n<p>内容为：</p>\n<ul>\n<li>框架概述</li>\n<li>三层架构</li>\n<li>控制器：MVC中的控制器</li>\n<li>案例中的问题</li>\n</ul></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"框架概述\"><a href=\"#框架概述\" class=\"headerlink\" title=\"框架概述\"></a>框架概述</h1><p><strong>框架的意义与作用：</strong></p>\n<p>  所谓<code>框架</code>，就是<strong>把一些繁琐的重复性代码封装起来</strong>，使程序员在编码中把更多的经历放到业务需求的分析和理解上面。<br>  特点：封装了很多细节，程序员在使用的时候会非常简单。</p>\n<h1 id=\"三层架构\"><a href=\"#三层架构\" class=\"headerlink\" title=\"三层架构\"></a>三层架构</h1><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/01Struts2.png\" alt=\"\"></p>\n<pre><code>表现层：M model V view C control\n业务层：service\n持久层：dao  data access object\nStruts2在三层架构中的位置是处于表现层。Struts2只是一个表现层框架。\n</code></pre><h1 id=\"控制器：MVC中的控制器\"><a href=\"#控制器：MVC中的控制器\" class=\"headerlink\" title=\"控制器：MVC中的控制器\"></a>控制器：MVC中的控制器</h1><h2 id=\"MVC回顾\"><a href=\"#MVC回顾\" class=\"headerlink\" title=\"MVC回顾\"></a>MVC回顾</h2><pre><code>M：Model 模型，封装数据。javabean\nV：view    视图，展示界面。jsp\nC：Controller 控制器，控制程序流程。Servlet\n</code></pre><h2 id=\"Servlet和Filter\"><a href=\"#Servlet和Filter\" class=\"headerlink\" title=\"Servlet和Filter\"></a>Servlet和Filter</h2><p><strong>Servlet:</strong></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/servlet.png\" alt=\"\"></p>\n<p><strong>Filter：</strong></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/filter.png\" alt=\"\"></p>\n<p><strong>总结：</strong></p>\n<p>Servlet能做的事情，过滤器也可以做到。并且过滤器比Servlet还多了一个放行的功能，因此过滤器比Servlet功能更为强大。<br>结论就是：过滤器同样也适合做控制器。</p>\n<h1 id=\"案例中的问题\"><a href=\"#案例中的问题\" class=\"headerlink\" title=\"案例中的问题\"></a>案例中的问题</h1><p><img src=\"http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B1.png\" alt=\"\"></p>\n<p><strong>规律：</strong></p>\n<pre><code>1. 获取请求正文，用户要做什么事情\n2. 根据不同的请求，做出不同的判断\n3. 执行具体的方法代码（*动作*）\n4. 转向页面，展示给用户\n</code></pre><p><strong>缺陷：</strong></p>\n<pre><code>1. 重复性劳动太多，具体的执行代码也有冗余代码。\n2. 到底要做什么全是硬编码，像用户要做什么事情，对应执行什么代码，可以写在配置文件中。\n3. 具体的代码方法放到了控制器中，过于臃肿。\n</code></pre></The>"},{"title":"Java单例模式的5种实现方法","date":"2020-08-17T11:44:07.000Z","_content":"\n<Excerpt in index | 首页摘要>\n**Java单例模式的5种实现方法**\n1. 饿汉\n2. 懒汉-（线程安全）\n3. 双重校验锁\n4. 静态内部类\n5. 枚举\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n\n\n# Java单例模式的5种实现方法\n\n### 饿汉\n类加载的时候就创建了实例\n- 优点：类加载的时候创建一次实例，避免了多线程同步问题\n- 缺点：即使单例没被用到也会创建，浪费内存\n\n```\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton() { }\n    public static Singleton getInstance() {\n        return instance; \n    }\n}\n```\n### 懒汉-（线程安全）\n- 缺点：性能问题，添加了synchronized的函数比一般方法慢得多，若多次调用getInstance，则累积的性能损耗特别大。\n\n```\npublic class Singleton {\n    private static Singleton instance = null;\n    private Singleton() { }\n    public static Synchronized Singleton getInstance() {\n          if (instance == null) {\n                instance = new Singleton();\n          }\n        return instance;\n    }\n}\n```\n### 双重校验锁\n\n```\npublic class Singleton {\n    private static volatile Singleton instance = null;\n    private Singleton() { }\n    public static Singleton getInstance() {\n        if (instance == null) {\n            synchronized(Singleton.class) {\n                if (instance == null){\n                    instance = new Singleton();\n                }\n            }\n        }\n       return instance; \n    }\n}\n```\n### 静态内部类\n```\npublic class StaticSingleton {\n    private StaticSingleton() {}\n    private static class SingletonHolder {\n        private static StaticSingleton INSTANCE = new StaticSingleton();\n    }\n    \n    public static getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n```\n### 枚举\n- 调用方式：Singleton.INSTANCE.getInstance()\n\n```\nclass Resource{\n}\n \npublic enum Singleton {\n    INSTANCE;\n    private Resource instance;\n    Singleton() {\n        instance = new Resource();\n    }\n    public Resource getInstance() {\n        return instance;\n    }\n}\n```\n","source":"_posts/Java单例模式的5种实现方法.md","raw":"---\ntitle: Java单例模式的5种实现方法 #可以改成中文的，如“新文章”\ndate: 2020-08-17 19:44:07  #发表日期，一般不改动\ncategories: 设计模式 #文章文类\ntags: 单例模式  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n**Java单例模式的5种实现方法**\n1. 饿汉\n2. 懒汉-（线程安全）\n3. 双重校验锁\n4. 静态内部类\n5. 枚举\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n\n\n# Java单例模式的5种实现方法\n\n### 饿汉\n类加载的时候就创建了实例\n- 优点：类加载的时候创建一次实例，避免了多线程同步问题\n- 缺点：即使单例没被用到也会创建，浪费内存\n\n```\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton() { }\n    public static Singleton getInstance() {\n        return instance; \n    }\n}\n```\n### 懒汉-（线程安全）\n- 缺点：性能问题，添加了synchronized的函数比一般方法慢得多，若多次调用getInstance，则累积的性能损耗特别大。\n\n```\npublic class Singleton {\n    private static Singleton instance = null;\n    private Singleton() { }\n    public static Synchronized Singleton getInstance() {\n          if (instance == null) {\n                instance = new Singleton();\n          }\n        return instance;\n    }\n}\n```\n### 双重校验锁\n\n```\npublic class Singleton {\n    private static volatile Singleton instance = null;\n    private Singleton() { }\n    public static Singleton getInstance() {\n        if (instance == null) {\n            synchronized(Singleton.class) {\n                if (instance == null){\n                    instance = new Singleton();\n                }\n            }\n        }\n       return instance; \n    }\n}\n```\n### 静态内部类\n```\npublic class StaticSingleton {\n    private StaticSingleton() {}\n    private static class SingletonHolder {\n        private static StaticSingleton INSTANCE = new StaticSingleton();\n    }\n    \n    public static getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n```\n### 枚举\n- 调用方式：Singleton.INSTANCE.getInstance()\n\n```\nclass Resource{\n}\n \npublic enum Singleton {\n    INSTANCE;\n    private Resource instance;\n    Singleton() {\n        instance = new Resource();\n    }\n    public Resource getInstance() {\n        return instance;\n    }\n}\n```\n","slug":"Java单例模式的5种实现方法","published":1,"updated":"2020-08-17T15:24:57.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6vt001764xtjyz3kyun","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br><strong>Java单例模式的5种实现方法</strong></excerpt></p>\n<ol>\n<li>饿汉</li>\n<li>懒汉-（线程安全）</li>\n<li>双重校验锁</li>\n<li>静态内部类</li>\n<li>枚举</li>\n</ol>\n<a id=\"more\"></a> \n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<p>#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>\n<h1 id=\"Java单例模式的5种实现方法\"><a href=\"#Java单例模式的5种实现方法\" class=\"headerlink\" title=\"Java单例模式的5种实现方法\"></a>Java单例模式的5种实现方法</h1><h3 id=\"饿汉\"><a href=\"#饿汉\" class=\"headerlink\" title=\"饿汉\"></a>饿汉</h3><p>类加载的时候就创建了实例</p>\n<ul>\n<li>优点：类加载的时候创建一次实例，避免了多线程同步问题</li>\n<li>缺点：即使单例没被用到也会创建，浪费内存</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Singleton &#123;</div><div class=\"line\">    private static Singleton instance = new Singleton();</div><div class=\"line\">    private Singleton() &#123; &#125;</div><div class=\"line\">    public static Singleton getInstance() &#123;</div><div class=\"line\">        return instance; </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"懒汉-（线程安全）\"><a href=\"#懒汉-（线程安全）\" class=\"headerlink\" title=\"懒汉-（线程安全）\"></a>懒汉-（线程安全）</h3><ul>\n<li>缺点：性能问题，添加了synchronized的函数比一般方法慢得多，若多次调用getInstance，则累积的性能损耗特别大。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Singleton &#123;</div><div class=\"line\">    private static Singleton instance = null;</div><div class=\"line\">    private Singleton() &#123; &#125;</div><div class=\"line\">    public static Synchronized Singleton getInstance() &#123;</div><div class=\"line\">          if (instance == null) &#123;</div><div class=\"line\">                instance = new Singleton();</div><div class=\"line\">          &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"双重校验锁\"><a href=\"#双重校验锁\" class=\"headerlink\" title=\"双重校验锁\"></a>双重校验锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Singleton &#123;</div><div class=\"line\">    private static volatile Singleton instance = null;</div><div class=\"line\">    private Singleton() &#123; &#125;</div><div class=\"line\">    public static Singleton getInstance() &#123;</div><div class=\"line\">        if (instance == null) &#123;</div><div class=\"line\">            synchronized(Singleton.class) &#123;</div><div class=\"line\">                if (instance == null)&#123;</div><div class=\"line\">                    instance = new Singleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">       return instance; </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class StaticSingleton &#123;</div><div class=\"line\">    private StaticSingleton() &#123;&#125;</div><div class=\"line\">    private static class SingletonHolder &#123;</div><div class=\"line\">        private static StaticSingleton INSTANCE = new StaticSingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public static getInstance() &#123;</div><div class=\"line\">        return SingletonHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><ul>\n<li>调用方式：Singleton.INSTANCE.getInstance()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Resource&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">public enum Singleton &#123;</div><div class=\"line\">    INSTANCE;</div><div class=\"line\">    private Resource instance;</div><div class=\"line\">    Singleton() &#123;</div><div class=\"line\">        instance = new Resource();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public Resource getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p><Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br><strong>Java单例模式的5种实现方法</strong></Excerpt></p>\n<ol>\n<li>饿汉</li>\n<li>懒汉-（线程安全）</li>\n<li>双重校验锁</li>\n<li>静态内部类</li>\n<li>枚举</li>\n</ol>","more":"<p><The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></The></p>\n<p>#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>\n<h1 id=\"Java单例模式的5种实现方法\"><a href=\"#Java单例模式的5种实现方法\" class=\"headerlink\" title=\"Java单例模式的5种实现方法\"></a>Java单例模式的5种实现方法</h1><h3 id=\"饿汉\"><a href=\"#饿汉\" class=\"headerlink\" title=\"饿汉\"></a>饿汉</h3><p>类加载的时候就创建了实例</p>\n<ul>\n<li>优点：类加载的时候创建一次实例，避免了多线程同步问题</li>\n<li>缺点：即使单例没被用到也会创建，浪费内存</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Singleton &#123;</div><div class=\"line\">    private static Singleton instance = new Singleton();</div><div class=\"line\">    private Singleton() &#123; &#125;</div><div class=\"line\">    public static Singleton getInstance() &#123;</div><div class=\"line\">        return instance; </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"懒汉-（线程安全）\"><a href=\"#懒汉-（线程安全）\" class=\"headerlink\" title=\"懒汉-（线程安全）\"></a>懒汉-（线程安全）</h3><ul>\n<li>缺点：性能问题，添加了synchronized的函数比一般方法慢得多，若多次调用getInstance，则累积的性能损耗特别大。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Singleton &#123;</div><div class=\"line\">    private static Singleton instance = null;</div><div class=\"line\">    private Singleton() &#123; &#125;</div><div class=\"line\">    public static Synchronized Singleton getInstance() &#123;</div><div class=\"line\">          if (instance == null) &#123;</div><div class=\"line\">                instance = new Singleton();</div><div class=\"line\">          &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"双重校验锁\"><a href=\"#双重校验锁\" class=\"headerlink\" title=\"双重校验锁\"></a>双重校验锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Singleton &#123;</div><div class=\"line\">    private static volatile Singleton instance = null;</div><div class=\"line\">    private Singleton() &#123; &#125;</div><div class=\"line\">    public static Singleton getInstance() &#123;</div><div class=\"line\">        if (instance == null) &#123;</div><div class=\"line\">            synchronized(Singleton.class) &#123;</div><div class=\"line\">                if (instance == null)&#123;</div><div class=\"line\">                    instance = new Singleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">       return instance; </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class StaticSingleton &#123;</div><div class=\"line\">    private StaticSingleton() &#123;&#125;</div><div class=\"line\">    private static class SingletonHolder &#123;</div><div class=\"line\">        private static StaticSingleton INSTANCE = new StaticSingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public static getInstance() &#123;</div><div class=\"line\">        return SingletonHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><ul>\n<li>调用方式：Singleton.INSTANCE.getInstance()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Resource&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">public enum Singleton &#123;</div><div class=\"line\">    INSTANCE;</div><div class=\"line\">    private Resource instance;</div><div class=\"line\">    Singleton() &#123;</div><div class=\"line\">        instance = new Resource();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public Resource getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"RecyclerView的万能分割线","date":"2017-05-09T13:27:55.000Z","_content":"<Excerpt in index | 首页摘要>\n\n**使用方法步骤：**\n\n1. 添加默认分割线：高度为2px，颜色为灰色\n2. 添加自定义分割线：可自定义分割线drawable\n3. 添加自定义分割线：可自定义分割线高度和颜色\n4. 万能分割线登场\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 使用方法： #\n\n## 添加默认分割线：高度为2px，颜色为灰色 ##\n\n    mRecyclerView.addItemDecoration(new RecycleViewDivider(mContext, LinearLayoutManager.VERTICAL));\n\n## 添加自定义分割线：可自定义分割线drawable ##\n\n    mRecyclerView.addItemDecoration(new RecycleViewDivider(\n    mContext, LinearLayoutManager.VERTICAL, R.drawable.divider_mileage));\n\n## 添加自定义分割线：可自定义分割线高度和颜色 ##\n\n    mRecyclerView.addItemDecoration(new RecycleViewDivider(\n    mContext, LinearLayoutManager.VERTICAL, 10, getResources().getColor(R.color.divide_gray_color)));\n\n## 万能分割线登场： ##\n\n    public class RecycleViewDivider extends RecyclerView.ItemDecoration {\n\n    private Paint mPaint;\n    private Drawable mDivider;\n    private int mDividerHeight = 2;//分割线高度，默认为1px\n    private int mOrientation;//列表的方向：LinearLayoutManager.VERTICAL或LinearLayoutManager.HORIZONTAL\n    private static final int[] ATTRS = new int[]{android.R.attr.listDivider};\n\n    /**\n     * 默认分割线：高度为2px，颜色为灰色\n     *\n     * @param context\n     * @param orientation 列表方向\n     */\n    public RecycleViewDivider(Context context, int orientation) {\n        if (orientation != LinearLayoutManager.VERTICAL && orientation != LinearLayoutManager.HORIZONTAL) {\n            throw new IllegalArgumentException(\"请输入正确的参数！\");\n        }\n        mOrientation = orientation;\n\n        final TypedArray a = context.obtainStyledAttributes(ATTRS);\n        mDivider = a.getDrawable(0);\n        a.recycle();\n    }\n\n    /**\n     * 自定义分割线\n     *\n     * @param context\n     * @param orientation 列表方向\n     * @param drawableId  分割线图片\n     */\n    public RecycleViewDivider(Context context, int orientation, int drawableId) {\n        this(context, orientation);\n        mDivider = ContextCompat.getDrawable(context, drawableId);\n        mDividerHeight = mDivider.getIntrinsicHeight();\n    }\n\n    /**\n     * 自定义分割线\n     *\n     * @param context\n     * @param orientation   列表方向\n     * @param dividerHeight 分割线高度\n     * @param dividerColor  分割线颜色\n     */\n    public RecycleViewDivider(Context context, int orientation, int dividerHeight, int dividerColor) {\n        this(context, orientation);\n        mDividerHeight = dividerHeight;\n        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint.setColor(dividerColor);\n        mPaint.setStyle(Paint.Style.FILL);\n    }\n\n\n    //获取分割线尺寸\n    @Override\n    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {\n        super.getItemOffsets(outRect, view, parent, state);\n        outRect.set(0, 0, 0, mDividerHeight);\n    }\n\n    //绘制分割线\n    @Override\n    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {\n        super.onDraw(c, parent, state);\n        if (mOrientation == LinearLayoutManager.VERTICAL) {\n            drawVertical(c, parent);\n        } else {\n            drawHorizontal(c, parent);\n        }\n    }\n\n    //绘制横向 item 分割线\n    private void drawHorizontal(Canvas canvas, RecyclerView parent) {\n        final int left = parent.getPaddingLeft();\n        final int right = parent.getMeasuredWidth() - parent.getPaddingRight();\n        final int childSize = parent.getChildCount();\n        for (int i = 0; i < childSize; i++) {\n            final View child = parent.getChildAt(i);\n            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n            final int top = child.getBottom() + layoutParams.bottomMargin;\n            final int bottom = top + mDividerHeight;\n            if (mDivider != null) {\n                mDivider.setBounds(left, top, right, bottom);\n                mDivider.draw(canvas);\n            }\n            if (mPaint != null) {\n                canvas.drawRect(left, top, right, bottom, mPaint);\n            }\n        }\n    }\n\n    //绘制纵向 item 分割线\n    private void drawVertical(Canvas canvas, RecyclerView parent) {\n        final int top = parent.getPaddingTop();\n        final int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();\n        final int childSize = parent.getChildCount();\n        for (int i = 0; i < childSize; i++) {\n            final View child = parent.getChildAt(i);\n            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n            final int left = child.getRight() + layoutParams.rightMargin;\n            final int right = left + mDividerHeight;\n            if (mDivider != null) {\n                mDivider.setBounds(left, top, right, bottom);\n                mDivider.draw(canvas);\n            }\n            if (mPaint != null) {\n                canvas.drawRect(left, top, right, bottom, mPaint);\n            }\n        }\n    }\n    }\n\n## 附：自定的drawable文件一份 ##\n\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"rectangle\">\n    <size android:height=\"20dp\" />\n    <solid android:color=\"#ff992900\" />\n    </shape>\n\n参考：\n\n1. [RecyclerView的万能分割线](http://blog.csdn.net/pengkv/article/details/50538121)","source":"_posts/RecyclerView的万能分割线.md","raw":"---\ntitle: RecyclerView的万能分割线\ndate: 2017-05-09 21:27:55\ncategories: Android #文章文类\ntags: [Android,Recycle]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n<Excerpt in index | 首页摘要>\n\n**使用方法步骤：**\n\n1. 添加默认分割线：高度为2px，颜色为灰色\n2. 添加自定义分割线：可自定义分割线drawable\n3. 添加自定义分割线：可自定义分割线高度和颜色\n4. 万能分割线登场\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 使用方法： #\n\n## 添加默认分割线：高度为2px，颜色为灰色 ##\n\n    mRecyclerView.addItemDecoration(new RecycleViewDivider(mContext, LinearLayoutManager.VERTICAL));\n\n## 添加自定义分割线：可自定义分割线drawable ##\n\n    mRecyclerView.addItemDecoration(new RecycleViewDivider(\n    mContext, LinearLayoutManager.VERTICAL, R.drawable.divider_mileage));\n\n## 添加自定义分割线：可自定义分割线高度和颜色 ##\n\n    mRecyclerView.addItemDecoration(new RecycleViewDivider(\n    mContext, LinearLayoutManager.VERTICAL, 10, getResources().getColor(R.color.divide_gray_color)));\n\n## 万能分割线登场： ##\n\n    public class RecycleViewDivider extends RecyclerView.ItemDecoration {\n\n    private Paint mPaint;\n    private Drawable mDivider;\n    private int mDividerHeight = 2;//分割线高度，默认为1px\n    private int mOrientation;//列表的方向：LinearLayoutManager.VERTICAL或LinearLayoutManager.HORIZONTAL\n    private static final int[] ATTRS = new int[]{android.R.attr.listDivider};\n\n    /**\n     * 默认分割线：高度为2px，颜色为灰色\n     *\n     * @param context\n     * @param orientation 列表方向\n     */\n    public RecycleViewDivider(Context context, int orientation) {\n        if (orientation != LinearLayoutManager.VERTICAL && orientation != LinearLayoutManager.HORIZONTAL) {\n            throw new IllegalArgumentException(\"请输入正确的参数！\");\n        }\n        mOrientation = orientation;\n\n        final TypedArray a = context.obtainStyledAttributes(ATTRS);\n        mDivider = a.getDrawable(0);\n        a.recycle();\n    }\n\n    /**\n     * 自定义分割线\n     *\n     * @param context\n     * @param orientation 列表方向\n     * @param drawableId  分割线图片\n     */\n    public RecycleViewDivider(Context context, int orientation, int drawableId) {\n        this(context, orientation);\n        mDivider = ContextCompat.getDrawable(context, drawableId);\n        mDividerHeight = mDivider.getIntrinsicHeight();\n    }\n\n    /**\n     * 自定义分割线\n     *\n     * @param context\n     * @param orientation   列表方向\n     * @param dividerHeight 分割线高度\n     * @param dividerColor  分割线颜色\n     */\n    public RecycleViewDivider(Context context, int orientation, int dividerHeight, int dividerColor) {\n        this(context, orientation);\n        mDividerHeight = dividerHeight;\n        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint.setColor(dividerColor);\n        mPaint.setStyle(Paint.Style.FILL);\n    }\n\n\n    //获取分割线尺寸\n    @Override\n    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {\n        super.getItemOffsets(outRect, view, parent, state);\n        outRect.set(0, 0, 0, mDividerHeight);\n    }\n\n    //绘制分割线\n    @Override\n    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {\n        super.onDraw(c, parent, state);\n        if (mOrientation == LinearLayoutManager.VERTICAL) {\n            drawVertical(c, parent);\n        } else {\n            drawHorizontal(c, parent);\n        }\n    }\n\n    //绘制横向 item 分割线\n    private void drawHorizontal(Canvas canvas, RecyclerView parent) {\n        final int left = parent.getPaddingLeft();\n        final int right = parent.getMeasuredWidth() - parent.getPaddingRight();\n        final int childSize = parent.getChildCount();\n        for (int i = 0; i < childSize; i++) {\n            final View child = parent.getChildAt(i);\n            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n            final int top = child.getBottom() + layoutParams.bottomMargin;\n            final int bottom = top + mDividerHeight;\n            if (mDivider != null) {\n                mDivider.setBounds(left, top, right, bottom);\n                mDivider.draw(canvas);\n            }\n            if (mPaint != null) {\n                canvas.drawRect(left, top, right, bottom, mPaint);\n            }\n        }\n    }\n\n    //绘制纵向 item 分割线\n    private void drawVertical(Canvas canvas, RecyclerView parent) {\n        final int top = parent.getPaddingTop();\n        final int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();\n        final int childSize = parent.getChildCount();\n        for (int i = 0; i < childSize; i++) {\n            final View child = parent.getChildAt(i);\n            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n            final int left = child.getRight() + layoutParams.rightMargin;\n            final int right = left + mDividerHeight;\n            if (mDivider != null) {\n                mDivider.setBounds(left, top, right, bottom);\n                mDivider.draw(canvas);\n            }\n            if (mPaint != null) {\n                canvas.drawRect(left, top, right, bottom, mPaint);\n            }\n        }\n    }\n    }\n\n## 附：自定的drawable文件一份 ##\n\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"rectangle\">\n    <size android:height=\"20dp\" />\n    <solid android:color=\"#ff992900\" />\n    </shape>\n\n参考：\n\n1. [RecyclerView的万能分割线](http://blog.csdn.net/pengkv/article/details/50538121)","slug":"RecyclerView的万能分割线","published":1,"updated":"2017-07-30T06:41:22.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6vz001a64xtla8co0ax","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<p><strong>使用方法步骤：</strong></p>\n<ol>\n<li>添加默认分割线：高度为2px，颜色为灰色</li>\n<li>添加自定义分割线：可自定义分割线drawable</li>\n<li>添加自定义分割线：可自定义分割线高度和颜色</li>\n<li>万能分割线登场</li>\n</ol>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h1><h2 id=\"添加默认分割线：高度为2px，颜色为灰色\"><a href=\"#添加默认分割线：高度为2px，颜色为灰色\" class=\"headerlink\" title=\"添加默认分割线：高度为2px，颜色为灰色\"></a>添加默认分割线：高度为2px，颜色为灰色</h2><pre><code>mRecyclerView.addItemDecoration(new RecycleViewDivider(mContext, LinearLayoutManager.VERTICAL));\n</code></pre><h2 id=\"添加自定义分割线：可自定义分割线drawable\"><a href=\"#添加自定义分割线：可自定义分割线drawable\" class=\"headerlink\" title=\"添加自定义分割线：可自定义分割线drawable\"></a>添加自定义分割线：可自定义分割线drawable</h2><pre><code>mRecyclerView.addItemDecoration(new RecycleViewDivider(\nmContext, LinearLayoutManager.VERTICAL, R.drawable.divider_mileage));\n</code></pre><h2 id=\"添加自定义分割线：可自定义分割线高度和颜色\"><a href=\"#添加自定义分割线：可自定义分割线高度和颜色\" class=\"headerlink\" title=\"添加自定义分割线：可自定义分割线高度和颜色\"></a>添加自定义分割线：可自定义分割线高度和颜色</h2><pre><code>mRecyclerView.addItemDecoration(new RecycleViewDivider(\nmContext, LinearLayoutManager.VERTICAL, 10, getResources().getColor(R.color.divide_gray_color)));\n</code></pre><h2 id=\"万能分割线登场：\"><a href=\"#万能分割线登场：\" class=\"headerlink\" title=\"万能分割线登场：\"></a>万能分割线登场：</h2><pre><code>public class RecycleViewDivider extends RecyclerView.ItemDecoration {\n\nprivate Paint mPaint;\nprivate Drawable mDivider;\nprivate int mDividerHeight = 2;//分割线高度，默认为1px\nprivate int mOrientation;//列表的方向：LinearLayoutManager.VERTICAL或LinearLayoutManager.HORIZONTAL\nprivate static final int[] ATTRS = new int[]{android.R.attr.listDivider};\n\n/**\n * 默认分割线：高度为2px，颜色为灰色\n *\n * @param context\n * @param orientation 列表方向\n */\npublic RecycleViewDivider(Context context, int orientation) {\n    if (orientation != LinearLayoutManager.VERTICAL &amp;&amp; orientation != LinearLayoutManager.HORIZONTAL) {\n        throw new IllegalArgumentException(&quot;请输入正确的参数！&quot;);\n    }\n    mOrientation = orientation;\n\n    final TypedArray a = context.obtainStyledAttributes(ATTRS);\n    mDivider = a.getDrawable(0);\n    a.recycle();\n}\n\n/**\n * 自定义分割线\n *\n * @param context\n * @param orientation 列表方向\n * @param drawableId  分割线图片\n */\npublic RecycleViewDivider(Context context, int orientation, int drawableId) {\n    this(context, orientation);\n    mDivider = ContextCompat.getDrawable(context, drawableId);\n    mDividerHeight = mDivider.getIntrinsicHeight();\n}\n\n/**\n * 自定义分割线\n *\n * @param context\n * @param orientation   列表方向\n * @param dividerHeight 分割线高度\n * @param dividerColor  分割线颜色\n */\npublic RecycleViewDivider(Context context, int orientation, int dividerHeight, int dividerColor) {\n    this(context, orientation);\n    mDividerHeight = dividerHeight;\n    mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    mPaint.setColor(dividerColor);\n    mPaint.setStyle(Paint.Style.FILL);\n}\n\n\n//获取分割线尺寸\n@Override\npublic void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {\n    super.getItemOffsets(outRect, view, parent, state);\n    outRect.set(0, 0, 0, mDividerHeight);\n}\n\n//绘制分割线\n@Override\npublic void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {\n    super.onDraw(c, parent, state);\n    if (mOrientation == LinearLayoutManager.VERTICAL) {\n        drawVertical(c, parent);\n    } else {\n        drawHorizontal(c, parent);\n    }\n}\n\n//绘制横向 item 分割线\nprivate void drawHorizontal(Canvas canvas, RecyclerView parent) {\n    final int left = parent.getPaddingLeft();\n    final int right = parent.getMeasuredWidth() - parent.getPaddingRight();\n    final int childSize = parent.getChildCount();\n    for (int i = 0; i &lt; childSize; i++) {\n        final View child = parent.getChildAt(i);\n        RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n        final int top = child.getBottom() + layoutParams.bottomMargin;\n        final int bottom = top + mDividerHeight;\n        if (mDivider != null) {\n            mDivider.setBounds(left, top, right, bottom);\n            mDivider.draw(canvas);\n        }\n        if (mPaint != null) {\n            canvas.drawRect(left, top, right, bottom, mPaint);\n        }\n    }\n}\n\n//绘制纵向 item 分割线\nprivate void drawVertical(Canvas canvas, RecyclerView parent) {\n    final int top = parent.getPaddingTop();\n    final int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();\n    final int childSize = parent.getChildCount();\n    for (int i = 0; i &lt; childSize; i++) {\n        final View child = parent.getChildAt(i);\n        RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n        final int left = child.getRight() + layoutParams.rightMargin;\n        final int right = left + mDividerHeight;\n        if (mDivider != null) {\n            mDivider.setBounds(left, top, right, bottom);\n            mDivider.draw(canvas);\n        }\n        if (mPaint != null) {\n            canvas.drawRect(left, top, right, bottom, mPaint);\n        }\n    }\n}\n}\n</code></pre><h2 id=\"附：自定的drawable文件一份\"><a href=\"#附：自定的drawable文件一份\" class=\"headerlink\" title=\"附：自定的drawable文件一份\"></a>附：自定的drawable文件一份</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nandroid:shape=&quot;rectangle&quot;&gt;\n&lt;size android:height=&quot;20dp&quot; /&gt;\n&lt;solid android:color=&quot;#ff992900&quot; /&gt;\n&lt;/shape&gt;\n</code></pre><p>参考：</p>\n<ol>\n<li><a href=\"http://blog.csdn.net/pengkv/article/details/50538121\" target=\"_blank\" rel=\"external\">RecyclerView的万能分割线</a></li>\n</ol>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<p><strong>使用方法步骤：</strong></p>\n<ol>\n<li>添加默认分割线：高度为2px，颜色为灰色</li>\n<li>添加自定义分割线：可自定义分割线drawable</li>\n<li>添加自定义分割线：可自定义分割线高度和颜色</li>\n<li>万能分割线登场</li>\n</ol></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h1><h2 id=\"添加默认分割线：高度为2px，颜色为灰色\"><a href=\"#添加默认分割线：高度为2px，颜色为灰色\" class=\"headerlink\" title=\"添加默认分割线：高度为2px，颜色为灰色\"></a>添加默认分割线：高度为2px，颜色为灰色</h2><pre><code>mRecyclerView.addItemDecoration(new RecycleViewDivider(mContext, LinearLayoutManager.VERTICAL));\n</code></pre><h2 id=\"添加自定义分割线：可自定义分割线drawable\"><a href=\"#添加自定义分割线：可自定义分割线drawable\" class=\"headerlink\" title=\"添加自定义分割线：可自定义分割线drawable\"></a>添加自定义分割线：可自定义分割线drawable</h2><pre><code>mRecyclerView.addItemDecoration(new RecycleViewDivider(\nmContext, LinearLayoutManager.VERTICAL, R.drawable.divider_mileage));\n</code></pre><h2 id=\"添加自定义分割线：可自定义分割线高度和颜色\"><a href=\"#添加自定义分割线：可自定义分割线高度和颜色\" class=\"headerlink\" title=\"添加自定义分割线：可自定义分割线高度和颜色\"></a>添加自定义分割线：可自定义分割线高度和颜色</h2><pre><code>mRecyclerView.addItemDecoration(new RecycleViewDivider(\nmContext, LinearLayoutManager.VERTICAL, 10, getResources().getColor(R.color.divide_gray_color)));\n</code></pre><h2 id=\"万能分割线登场：\"><a href=\"#万能分割线登场：\" class=\"headerlink\" title=\"万能分割线登场：\"></a>万能分割线登场：</h2><pre><code>public class RecycleViewDivider extends RecyclerView.ItemDecoration {\n\nprivate Paint mPaint;\nprivate Drawable mDivider;\nprivate int mDividerHeight = 2;//分割线高度，默认为1px\nprivate int mOrientation;//列表的方向：LinearLayoutManager.VERTICAL或LinearLayoutManager.HORIZONTAL\nprivate static final int[] ATTRS = new int[]{android.R.attr.listDivider};\n\n/**\n * 默认分割线：高度为2px，颜色为灰色\n *\n * @param context\n * @param orientation 列表方向\n */\npublic RecycleViewDivider(Context context, int orientation) {\n    if (orientation != LinearLayoutManager.VERTICAL &amp;&amp; orientation != LinearLayoutManager.HORIZONTAL) {\n        throw new IllegalArgumentException(&quot;请输入正确的参数！&quot;);\n    }\n    mOrientation = orientation;\n\n    final TypedArray a = context.obtainStyledAttributes(ATTRS);\n    mDivider = a.getDrawable(0);\n    a.recycle();\n}\n\n/**\n * 自定义分割线\n *\n * @param context\n * @param orientation 列表方向\n * @param drawableId  分割线图片\n */\npublic RecycleViewDivider(Context context, int orientation, int drawableId) {\n    this(context, orientation);\n    mDivider = ContextCompat.getDrawable(context, drawableId);\n    mDividerHeight = mDivider.getIntrinsicHeight();\n}\n\n/**\n * 自定义分割线\n *\n * @param context\n * @param orientation   列表方向\n * @param dividerHeight 分割线高度\n * @param dividerColor  分割线颜色\n */\npublic RecycleViewDivider(Context context, int orientation, int dividerHeight, int dividerColor) {\n    this(context, orientation);\n    mDividerHeight = dividerHeight;\n    mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    mPaint.setColor(dividerColor);\n    mPaint.setStyle(Paint.Style.FILL);\n}\n\n\n//获取分割线尺寸\n@Override\npublic void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {\n    super.getItemOffsets(outRect, view, parent, state);\n    outRect.set(0, 0, 0, mDividerHeight);\n}\n\n//绘制分割线\n@Override\npublic void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {\n    super.onDraw(c, parent, state);\n    if (mOrientation == LinearLayoutManager.VERTICAL) {\n        drawVertical(c, parent);\n    } else {\n        drawHorizontal(c, parent);\n    }\n}\n\n//绘制横向 item 分割线\nprivate void drawHorizontal(Canvas canvas, RecyclerView parent) {\n    final int left = parent.getPaddingLeft();\n    final int right = parent.getMeasuredWidth() - parent.getPaddingRight();\n    final int childSize = parent.getChildCount();\n    for (int i = 0; i &lt; childSize; i++) {\n        final View child = parent.getChildAt(i);\n        RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n        final int top = child.getBottom() + layoutParams.bottomMargin;\n        final int bottom = top + mDividerHeight;\n        if (mDivider != null) {\n            mDivider.setBounds(left, top, right, bottom);\n            mDivider.draw(canvas);\n        }\n        if (mPaint != null) {\n            canvas.drawRect(left, top, right, bottom, mPaint);\n        }\n    }\n}\n\n//绘制纵向 item 分割线\nprivate void drawVertical(Canvas canvas, RecyclerView parent) {\n    final int top = parent.getPaddingTop();\n    final int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();\n    final int childSize = parent.getChildCount();\n    for (int i = 0; i &lt; childSize; i++) {\n        final View child = parent.getChildAt(i);\n        RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n        final int left = child.getRight() + layoutParams.rightMargin;\n        final int right = left + mDividerHeight;\n        if (mDivider != null) {\n            mDivider.setBounds(left, top, right, bottom);\n            mDivider.draw(canvas);\n        }\n        if (mPaint != null) {\n            canvas.drawRect(left, top, right, bottom, mPaint);\n        }\n    }\n}\n}\n</code></pre><h2 id=\"附：自定的drawable文件一份\"><a href=\"#附：自定的drawable文件一份\" class=\"headerlink\" title=\"附：自定的drawable文件一份\"></a>附：自定的drawable文件一份</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nandroid:shape=&quot;rectangle&quot;&gt;\n&lt;size android:height=&quot;20dp&quot; /&gt;\n&lt;solid android:color=&quot;#ff992900&quot; /&gt;\n&lt;/shape&gt;\n</code></pre><p>参考：</p>\n<ol>\n<li><a href=\"http://blog.csdn.net/pengkv/article/details/50538121\">RecyclerView的万能分割线</a></li>\n</ol></The>"},{"title":"Volley 请求返回数据中文出现乱码","date":"2017-05-09T13:08:08.000Z","_content":"<Excerpt in index | 首页摘要>\n\n  最近遇到一个问题。具体内容是使用Volley联网请求一段json数据，用Postman工具获取返回数据也是正确的，在别人的电脑上也是正常的，返回数据header中编码格式也是utf-8.那么问题就出在volly这个工具类上了。\n\n  经过排查，发现问题确实出在volley的一个工具类上 。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n    HttpHeaderParser.parseCharset(response.headers);\n\n利用StringRequst请求，获取数据的是这个方法\n\n\n    @Override\n\n    protected Response<String> parseNetworkResponse(NetworkResponse response) {\n    String parsed;\n    try {\n        parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));\n    } catch (UnsupportedEncodingException e) {\n        parsed = new String(response.data);\n    }\n    return Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n    }\n\n返回的是byte[]，byte[]转化为String需要指定编码格式。问题就是出现在这个编码格式上\n\n    /**\n     * Returns the charset specified in the Content-Type of this header,\n     * or the HTTP default (ISO-8859-1) if none can be found.\n     */\n    public static String parseCharset(Map<String, String> headers) {\n    String contentType = headers.get(HTTP.CONTENT_TYPE);\n    if (contentType != null) {\n        String[] params = contentType.split(\";\");\n        for (int i = 1; i < params.length; i++) {\n            String[] pair = params[i].trim().split(\"=\");\n            if (pair.length == 2) {\n                if (pair[0].equals(\"charset\")) {\n                    return pair[1];\n                }\n            }\n        }\n    }\n\n    return HTTP.DEFAULT_CONTENT_CHARSET;\n    }\n\n这段代码会试图获取header中的编码格式。如果没获取到，就会返回默认的编码格式 iso.\n之所以出现乱码，就是因为返回了默认的编码iso，而没有正确的返回了header中包含的编码格式。\n\n解决的办法很简单，就是重写\n\n    parseNetworkResponse(NetworkResponse response) \n\n方法，手动的改为UTF-8编码\n\n修改如下：\n\n @Override\n\n    protected Response<String> parseNetworkResponse(NetworkResponse response) {\n    String parsed;\n    try {\n        parsed = new String(response.data, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        parsed = new String(response.data);\n    }\n    return Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n    }\n\n\n参考：\n\n1. [Volley 请求返回数据中文出现乱码](http://blog.csdn.net/u013539084/article/details/51731057)\n2. [volley 获取cookie总结](http://blog.csdn.net/zglslyg/article/details/39501171)","source":"_posts/Volley-请求返回数据中文出现乱码.md","raw":"---\ntitle: Volley 请求返回数据中文出现乱码\ndate: 2017-05-09 21:08:08\ncategories: JAVA #文章文类\ntags: [JAVA,Volley]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n<Excerpt in index | 首页摘要>\n\n  最近遇到一个问题。具体内容是使用Volley联网请求一段json数据，用Postman工具获取返回数据也是正确的，在别人的电脑上也是正常的，返回数据header中编码格式也是utf-8.那么问题就出在volly这个工具类上了。\n\n  经过排查，发现问题确实出在volley的一个工具类上 。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n    HttpHeaderParser.parseCharset(response.headers);\n\n利用StringRequst请求，获取数据的是这个方法\n\n\n    @Override\n\n    protected Response<String> parseNetworkResponse(NetworkResponse response) {\n    String parsed;\n    try {\n        parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));\n    } catch (UnsupportedEncodingException e) {\n        parsed = new String(response.data);\n    }\n    return Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n    }\n\n返回的是byte[]，byte[]转化为String需要指定编码格式。问题就是出现在这个编码格式上\n\n    /**\n     * Returns the charset specified in the Content-Type of this header,\n     * or the HTTP default (ISO-8859-1) if none can be found.\n     */\n    public static String parseCharset(Map<String, String> headers) {\n    String contentType = headers.get(HTTP.CONTENT_TYPE);\n    if (contentType != null) {\n        String[] params = contentType.split(\";\");\n        for (int i = 1; i < params.length; i++) {\n            String[] pair = params[i].trim().split(\"=\");\n            if (pair.length == 2) {\n                if (pair[0].equals(\"charset\")) {\n                    return pair[1];\n                }\n            }\n        }\n    }\n\n    return HTTP.DEFAULT_CONTENT_CHARSET;\n    }\n\n这段代码会试图获取header中的编码格式。如果没获取到，就会返回默认的编码格式 iso.\n之所以出现乱码，就是因为返回了默认的编码iso，而没有正确的返回了header中包含的编码格式。\n\n解决的办法很简单，就是重写\n\n    parseNetworkResponse(NetworkResponse response) \n\n方法，手动的改为UTF-8编码\n\n修改如下：\n\n @Override\n\n    protected Response<String> parseNetworkResponse(NetworkResponse response) {\n    String parsed;\n    try {\n        parsed = new String(response.data, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        parsed = new String(response.data);\n    }\n    return Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n    }\n\n\n参考：\n\n1. [Volley 请求返回数据中文出现乱码](http://blog.csdn.net/u013539084/article/details/51731057)\n2. [volley 获取cookie总结](http://blog.csdn.net/zglslyg/article/details/39501171)","slug":"Volley-请求返回数据中文出现乱码","published":1,"updated":"2017-05-09T13:26:40.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6w2001d64xttuxbxn8w","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<p>  最近遇到一个问题。具体内容是使用Volley联网请求一段json数据，用Postman工具获取返回数据也是正确的，在别人的电脑上也是正常的，返回数据header中编码格式也是utf-8.那么问题就出在volly这个工具类上了。</p>\n<p>  经过排查，发现问题确实出在volley的一个工具类上 。</p>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<pre><code>HttpHeaderParser.parseCharset(response.headers);\n</code></pre><p>利用StringRequst请求，获取数据的是这个方法</p>\n<pre><code>@Override\n\nprotected Response&lt;String&gt; parseNetworkResponse(NetworkResponse response) {\nString parsed;\ntry {\n    parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));\n} catch (UnsupportedEncodingException e) {\n    parsed = new String(response.data);\n}\nreturn Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n}\n</code></pre><p>返回的是byte[]，byte[]转化为String需要指定编码格式。问题就是出现在这个编码格式上</p>\n<pre><code>/**\n * Returns the charset specified in the Content-Type of this header,\n * or the HTTP default (ISO-8859-1) if none can be found.\n */\npublic static String parseCharset(Map&lt;String, String&gt; headers) {\nString contentType = headers.get(HTTP.CONTENT_TYPE);\nif (contentType != null) {\n    String[] params = contentType.split(&quot;;&quot;);\n    for (int i = 1; i &lt; params.length; i++) {\n        String[] pair = params[i].trim().split(&quot;=&quot;);\n        if (pair.length == 2) {\n            if (pair[0].equals(&quot;charset&quot;)) {\n                return pair[1];\n            }\n        }\n    }\n}\n\nreturn HTTP.DEFAULT_CONTENT_CHARSET;\n}\n</code></pre><p>这段代码会试图获取header中的编码格式。如果没获取到，就会返回默认的编码格式 iso.<br>之所以出现乱码，就是因为返回了默认的编码iso，而没有正确的返回了header中包含的编码格式。</p>\n<p>解决的办法很简单，就是重写</p>\n<pre><code>parseNetworkResponse(NetworkResponse response) \n</code></pre><p>方法，手动的改为UTF-8编码</p>\n<p>修改如下：</p>\n<p> @Override</p>\n<pre><code>protected Response&lt;String&gt; parseNetworkResponse(NetworkResponse response) {\nString parsed;\ntry {\n    parsed = new String(response.data, &quot;UTF-8&quot;);\n} catch (UnsupportedEncodingException e) {\n    parsed = new String(response.data);\n}\nreturn Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n}\n</code></pre><p>参考：</p>\n<ol>\n<li><a href=\"http://blog.csdn.net/u013539084/article/details/51731057\" target=\"_blank\" rel=\"external\">Volley 请求返回数据中文出现乱码</a></li>\n<li><a href=\"http://blog.csdn.net/zglslyg/article/details/39501171\" target=\"_blank\" rel=\"external\">volley 获取cookie总结</a></li>\n</ol>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<p>  最近遇到一个问题。具体内容是使用Volley联网请求一段json数据，用Postman工具获取返回数据也是正确的，在别人的电脑上也是正常的，返回数据header中编码格式也是utf-8.那么问题就出在volly这个工具类上了。</p>\n<p>  经过排查，发现问题确实出在volley的一个工具类上 。</p></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<pre><code>HttpHeaderParser.parseCharset(response.headers);\n</code></pre><p>利用StringRequst请求，获取数据的是这个方法</p>\n<pre><code>@Override\n\nprotected Response&lt;String&gt; parseNetworkResponse(NetworkResponse response) {\nString parsed;\ntry {\n    parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));\n} catch (UnsupportedEncodingException e) {\n    parsed = new String(response.data);\n}\nreturn Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n}\n</code></pre><p>返回的是byte[]，byte[]转化为String需要指定编码格式。问题就是出现在这个编码格式上</p>\n<pre><code>/**\n * Returns the charset specified in the Content-Type of this header,\n * or the HTTP default (ISO-8859-1) if none can be found.\n */\npublic static String parseCharset(Map&lt;String, String&gt; headers) {\nString contentType = headers.get(HTTP.CONTENT_TYPE);\nif (contentType != null) {\n    String[] params = contentType.split(&quot;;&quot;);\n    for (int i = 1; i &lt; params.length; i++) {\n        String[] pair = params[i].trim().split(&quot;=&quot;);\n        if (pair.length == 2) {\n            if (pair[0].equals(&quot;charset&quot;)) {\n                return pair[1];\n            }\n        }\n    }\n}\n\nreturn HTTP.DEFAULT_CONTENT_CHARSET;\n}\n</code></pre><p>这段代码会试图获取header中的编码格式。如果没获取到，就会返回默认的编码格式 iso.<br>之所以出现乱码，就是因为返回了默认的编码iso，而没有正确的返回了header中包含的编码格式。</p>\n<p>解决的办法很简单，就是重写</p>\n<pre><code>parseNetworkResponse(NetworkResponse response) \n</code></pre><p>方法，手动的改为UTF-8编码</p>\n<p>修改如下：</p>\n<p> @Override</p>\n<pre><code>protected Response&lt;String&gt; parseNetworkResponse(NetworkResponse response) {\nString parsed;\ntry {\n    parsed = new String(response.data, &quot;UTF-8&quot;);\n} catch (UnsupportedEncodingException e) {\n    parsed = new String(response.data);\n}\nreturn Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n}\n</code></pre><p>参考：</p>\n<ol>\n<li><a href=\"http://blog.csdn.net/u013539084/article/details/51731057\">Volley 请求返回数据中文出现乱码</a></li>\n<li><a href=\"http://blog.csdn.net/zglslyg/article/details/39501171\">volley 获取cookie总结</a></li>\n</ol></The>"},{"layout":"eclipse","title":"eclipse常用快捷键整理","date":"2017-08-20T07:46:26.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n\n> 对从网上搜到的eclipse快捷键做出整理，以方便自己的使用。\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 查看和定位快捷键 #\n > 在程序中，迅速定位代码的位置，快速找到 Bug 的所在，是非常不容易的事，Eclipse 提供\n   了强大的查找功能，可以利用如下的快捷键帮助完成查找定位的工作。\n\n1. 【Ctrl+K】、【Ctrl++Shift+K】\n快速向下和向上查找选定的内容，从此不再需要用鼠标单击查找对话框了。\n2. 【Ctrl+Shift+T】\n查找工作空间（Workspace）构建路径中的可找到 Java 类文件，不要为找不到类而痛苦，而\n且可以使用“*”、“？”等通配符。\n3. 【Ctrl+Shift+R】\n和【Ctrl+Shift+T】对应，查找工作空间（Workspace）中的所有文件（包括 Java 文件），也可\n以使用通配符。\n4. 【Ctrl+Shift+G】\n查找类、方法和属性的引用。这是一个非常实用的快捷键，例如要修改引用某个方法的代码，\n可以通过【Ctrl+Shift+G】快捷键迅速定位所有引用此方法的位置。\n5. 【Ctrl+Shift+O】\n快速生成 import，当从网上拷贝一段程序后，不知道如何 import 进所调用的类，试试\n【Ctrl+Shift+O】快捷键，一定会有惊喜。\n6. 【Ctrl+Shift+F】\n格式化代码，书写格式规范的代码是每一个程序员的必修之课，当看见某段代码极不顺眼时，\n选定后按【Ctrl+Shift+F】快捷键可以格式化这段代码，如果不选定代码则默认格式化当前文\n件（Java 文件）。\n7. 【ALT+Shift+W】\n查找当前文件所在项目中的路径，可以快速定位浏览器视图的位置，如果想查找某个文件所\n在的包时，此快捷键非常有用（特别在比较大的项目中）。\n8. 【Ctrl+L】\n定位到当前编辑器的某一行，对非 Java 文件也有效。\n9. 【Alt+←】、【Alt+→】\n后退历史记录和前进历史记录，在跟踪代码时非常有用，用户可能查找了几个有关联的地方，\n但可能记不清楚了，可以通过这两个快捷键定位查找的顺序。\n10. 【F3】\n快速定位光标位置的某个类、方法和属性。\n11. 【F4】\n显示类的继承关系，并打开类继承视图。\n\n# 调试快捷键#\n>Eclipse 中有如下一些和运行调试相关的快捷键。\n\n1. 【Ctrl+Shift+B】：在当前行设置断点或取消设置的断点。\n2. 【F11】：调试最后一次执行的程序。\n3. 【Ctrl+F11】：运行最后一次执行的程序。\n4. 【F5】：跟踪到方法中，当程序执行到某方法时，可以按【F5】键跟踪到方法中。\n5. 【F6】：单步执行程序。\n6. 【F7】：执行完方法，返回到调用此方法的后一条语句。\n7. 【F8】：继续执行，到下一个断点或程序结束。\n\n# 常用编辑器快捷键#\n>通常文本编辑器都提供了一些和编辑相关的快捷键，在 Eclipse 中也可以通过这些快捷键进\n行文本编辑。\n\n1. 【Ctrl+C】：复制。\n2. 【Ctrl+X】：剪切。\n3. 【Ctrl+V】：粘贴。\n4. 【Ctrl+S】：保存文件。\n5. 【Ctrl+Z】：撤销。\n6. 【Ctrl+Y】：重复。\n7. 【Ctrl+F】：查找。\n\n# 其他快捷键 #\n>Eclipse 中还有很多快捷键，无法一一列举，用户可以通过帮助文档找到它们的使用方式，另\n外还有几个常用的快捷键如下。\n\n1. 【Ctrl+F6】：切换到下一个编辑器。\n2. 【Ctrl+Shift+F6】：切换到上一个编辑器。\n3. 【Ctrl+F7】：切换到下一个视图。\n4. 【Ctrl+Shift+F7】：切换到上一个视图。\n5. 【Ctrl+F8】：切换到下一个透视图。\n6. 【Ctrl+Shift+F8】：切换到上一个透视图。\n\n# Ctrl  系列 #\n\n**Ctrl+K:** 将光标停留在变量上，按 Ctrl+K 键可以查找到下一个同样的变量\n**Ctrl+Shift+K:** 和 Ctrl+K 查找的方向相反\n**Ctrl+E:** 快速显示当前 Editer 的下拉列表(如果当前页面没有显示的用黑体表示)\n**Ctrl+Shift+E:** 显示管理当前打开的所有的 View 的管理器(可以选择关闭,激活等操作)\n**Ctrl+Q:** 定位到最后编辑的地方\n**Ctrl+L:** 定位在某行 (对于程序超过 100 的人就有福音了)\n**Ctrl+M:** 最大化当前的 Edit 或 View (再按则反之)\n**Ctrl+/:** 注释当前行,再按则取消注释\n**Ctrl+T:** 快速显示当前类的继承结构\n**Ctrl+Shift-T:** 打开类型（Open type）。如果你不是有意磨洋工，还是忘记通过源码树（sourcetree）打开的方式吧。\n**Ctrl+O:** 在代码中打开类似大纲视图的小窗口\n**Ctrl+鼠标停留:** 可以显示类和方法的源码\n**Ctrl+H:** 打开搜索窗口\n**Ctrl+/(小键盘):** 折叠当前类中的所有代码\n**Ctrl+×(小键盘):** 展开当前类中的所有代码\n\n# Ctrl+Shift  系列 #\n\n**Ctrl+Shift+F:** 格式化当前代码\n**Ctrl+Shift+X:** 把当前选中的文本全部变味小写\n**Ctrl+Shift+Y:** 把当前选中的文本全部变为小写\n**Ctrl+Shift+O:** 快速地导入 import\n**Ctrl+Shift+R:** 打开资源 open Resource\n\n# F  快捷键  系列 #\n\n**F3:** 打开声明该引用的文件\n**F4:** 打开类型层次结构\n**F5:** 单步跳入\n**F6:** 单步跳过\n**F7:** 单步跳出\n**F8:** 继续，如果后面没有断点，程序将运行完\n\n# 行编辑用 #\n\n**Ctrl+D:** 删除当前行\n**Ctrl+Alt+↓** 复制当前行到下一行(复制增加)\n**Ctrl+Alt+↑** 复制当前行到上一行(复制增加)\n**Alt+↓** 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)\n**Alt+↑** 当前行和上面一行交互位置(同上)\n**Shift+Enter** 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)\n**Ctrl+Shift+Enter** 在当前行插入空行(原理同上条)\n\n# 不常用的 #\n\n**Alt+←** 前一个编辑的页面\n**Alt+→** 下一个编辑的页面(当然是针对上面那条来说了)\n**Ctrl+Shift+S:** 保存全部\n**Ctrl+W:** 关闭当前 Editer\n**Ctrl+Shift+F4:** 关闭所有打开的 Editer\n**Ctrl+Shift+G:** 在 workspace 中搜索引用\n**Ctrl+Shift+P:** 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到\n  前面,则反之)\n\n# 增量查找 #\n**Ctrl+J:** 正向增量查找(按下 Ctrl+J 后,你所输入的每个字母编辑器都提供快速匹配定位到某个\n单词,如果没有,则在 stutes line 中显示没有找到了,查一个单词时,特别实用,这个功能 Idea 两\n年前就有了)\n**Ctrl+Shift+J:** 反向增量查找(和上条相同,只不过是从后往前查)\n","source":"_posts/eclipse常用快捷键整理.md","raw":"layout: eclipse\ntitle: eclipse常用快捷键整理\ndate: 2017-08-20 15:46:26\ncategories: 工具 #文章文类\ntags: [JAVA,eclipse]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n\n\n> 对从网上搜到的eclipse快捷键做出整理，以方便自己的使用。\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 查看和定位快捷键 #\n > 在程序中，迅速定位代码的位置，快速找到 Bug 的所在，是非常不容易的事，Eclipse 提供\n   了强大的查找功能，可以利用如下的快捷键帮助完成查找定位的工作。\n\n1. 【Ctrl+K】、【Ctrl++Shift+K】\n快速向下和向上查找选定的内容，从此不再需要用鼠标单击查找对话框了。\n2. 【Ctrl+Shift+T】\n查找工作空间（Workspace）构建路径中的可找到 Java 类文件，不要为找不到类而痛苦，而\n且可以使用“*”、“？”等通配符。\n3. 【Ctrl+Shift+R】\n和【Ctrl+Shift+T】对应，查找工作空间（Workspace）中的所有文件（包括 Java 文件），也可\n以使用通配符。\n4. 【Ctrl+Shift+G】\n查找类、方法和属性的引用。这是一个非常实用的快捷键，例如要修改引用某个方法的代码，\n可以通过【Ctrl+Shift+G】快捷键迅速定位所有引用此方法的位置。\n5. 【Ctrl+Shift+O】\n快速生成 import，当从网上拷贝一段程序后，不知道如何 import 进所调用的类，试试\n【Ctrl+Shift+O】快捷键，一定会有惊喜。\n6. 【Ctrl+Shift+F】\n格式化代码，书写格式规范的代码是每一个程序员的必修之课，当看见某段代码极不顺眼时，\n选定后按【Ctrl+Shift+F】快捷键可以格式化这段代码，如果不选定代码则默认格式化当前文\n件（Java 文件）。\n7. 【ALT+Shift+W】\n查找当前文件所在项目中的路径，可以快速定位浏览器视图的位置，如果想查找某个文件所\n在的包时，此快捷键非常有用（特别在比较大的项目中）。\n8. 【Ctrl+L】\n定位到当前编辑器的某一行，对非 Java 文件也有效。\n9. 【Alt+←】、【Alt+→】\n后退历史记录和前进历史记录，在跟踪代码时非常有用，用户可能查找了几个有关联的地方，\n但可能记不清楚了，可以通过这两个快捷键定位查找的顺序。\n10. 【F3】\n快速定位光标位置的某个类、方法和属性。\n11. 【F4】\n显示类的继承关系，并打开类继承视图。\n\n# 调试快捷键#\n>Eclipse 中有如下一些和运行调试相关的快捷键。\n\n1. 【Ctrl+Shift+B】：在当前行设置断点或取消设置的断点。\n2. 【F11】：调试最后一次执行的程序。\n3. 【Ctrl+F11】：运行最后一次执行的程序。\n4. 【F5】：跟踪到方法中，当程序执行到某方法时，可以按【F5】键跟踪到方法中。\n5. 【F6】：单步执行程序。\n6. 【F7】：执行完方法，返回到调用此方法的后一条语句。\n7. 【F8】：继续执行，到下一个断点或程序结束。\n\n# 常用编辑器快捷键#\n>通常文本编辑器都提供了一些和编辑相关的快捷键，在 Eclipse 中也可以通过这些快捷键进\n行文本编辑。\n\n1. 【Ctrl+C】：复制。\n2. 【Ctrl+X】：剪切。\n3. 【Ctrl+V】：粘贴。\n4. 【Ctrl+S】：保存文件。\n5. 【Ctrl+Z】：撤销。\n6. 【Ctrl+Y】：重复。\n7. 【Ctrl+F】：查找。\n\n# 其他快捷键 #\n>Eclipse 中还有很多快捷键，无法一一列举，用户可以通过帮助文档找到它们的使用方式，另\n外还有几个常用的快捷键如下。\n\n1. 【Ctrl+F6】：切换到下一个编辑器。\n2. 【Ctrl+Shift+F6】：切换到上一个编辑器。\n3. 【Ctrl+F7】：切换到下一个视图。\n4. 【Ctrl+Shift+F7】：切换到上一个视图。\n5. 【Ctrl+F8】：切换到下一个透视图。\n6. 【Ctrl+Shift+F8】：切换到上一个透视图。\n\n# Ctrl  系列 #\n\n**Ctrl+K:** 将光标停留在变量上，按 Ctrl+K 键可以查找到下一个同样的变量\n**Ctrl+Shift+K:** 和 Ctrl+K 查找的方向相反\n**Ctrl+E:** 快速显示当前 Editer 的下拉列表(如果当前页面没有显示的用黑体表示)\n**Ctrl+Shift+E:** 显示管理当前打开的所有的 View 的管理器(可以选择关闭,激活等操作)\n**Ctrl+Q:** 定位到最后编辑的地方\n**Ctrl+L:** 定位在某行 (对于程序超过 100 的人就有福音了)\n**Ctrl+M:** 最大化当前的 Edit 或 View (再按则反之)\n**Ctrl+/:** 注释当前行,再按则取消注释\n**Ctrl+T:** 快速显示当前类的继承结构\n**Ctrl+Shift-T:** 打开类型（Open type）。如果你不是有意磨洋工，还是忘记通过源码树（sourcetree）打开的方式吧。\n**Ctrl+O:** 在代码中打开类似大纲视图的小窗口\n**Ctrl+鼠标停留:** 可以显示类和方法的源码\n**Ctrl+H:** 打开搜索窗口\n**Ctrl+/(小键盘):** 折叠当前类中的所有代码\n**Ctrl+×(小键盘):** 展开当前类中的所有代码\n\n# Ctrl+Shift  系列 #\n\n**Ctrl+Shift+F:** 格式化当前代码\n**Ctrl+Shift+X:** 把当前选中的文本全部变味小写\n**Ctrl+Shift+Y:** 把当前选中的文本全部变为小写\n**Ctrl+Shift+O:** 快速地导入 import\n**Ctrl+Shift+R:** 打开资源 open Resource\n\n# F  快捷键  系列 #\n\n**F3:** 打开声明该引用的文件\n**F4:** 打开类型层次结构\n**F5:** 单步跳入\n**F6:** 单步跳过\n**F7:** 单步跳出\n**F8:** 继续，如果后面没有断点，程序将运行完\n\n# 行编辑用 #\n\n**Ctrl+D:** 删除当前行\n**Ctrl+Alt+↓** 复制当前行到下一行(复制增加)\n**Ctrl+Alt+↑** 复制当前行到上一行(复制增加)\n**Alt+↓** 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)\n**Alt+↑** 当前行和上面一行交互位置(同上)\n**Shift+Enter** 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)\n**Ctrl+Shift+Enter** 在当前行插入空行(原理同上条)\n\n# 不常用的 #\n\n**Alt+←** 前一个编辑的页面\n**Alt+→** 下一个编辑的页面(当然是针对上面那条来说了)\n**Ctrl+Shift+S:** 保存全部\n**Ctrl+W:** 关闭当前 Editer\n**Ctrl+Shift+F4:** 关闭所有打开的 Editer\n**Ctrl+Shift+G:** 在 workspace 中搜索引用\n**Ctrl+Shift+P:** 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到\n  前面,则反之)\n\n# 增量查找 #\n**Ctrl+J:** 正向增量查找(按下 Ctrl+J 后,你所输入的每个字母编辑器都提供快速匹配定位到某个\n单词,如果没有,则在 stutes line 中显示没有找到了,查一个单词时,特别实用,这个功能 Idea 两\n年前就有了)\n**Ctrl+Shift+J:** 反向增量查找(和上条相同,只不过是从后往前查)\n","slug":"eclipse常用快捷键整理","published":1,"updated":"2017-09-29T00:49:09.498Z","comments":1,"photos":[],"link":"","_id":"cke02o6w6001h64xtombyvg0k","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n<blockquote>\n<p>对从网上搜到的eclipse快捷键做出整理，以方便自己的使用。</p>\n</blockquote>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"查看和定位快捷键\"><a href=\"#查看和定位快捷键\" class=\"headerlink\" title=\"查看和定位快捷键\"></a>查看和定位快捷键</h1><blockquote>\n<p>在程序中，迅速定位代码的位置，快速找到 Bug 的所在，是非常不容易的事，Eclipse 提供<br>   了强大的查找功能，可以利用如下的快捷键帮助完成查找定位的工作。</p>\n</blockquote>\n<ol>\n<li>【Ctrl+K】、【Ctrl++Shift+K】<br>快速向下和向上查找选定的内容，从此不再需要用鼠标单击查找对话框了。</li>\n<li>【Ctrl+Shift+T】<br>查找工作空间（Workspace）构建路径中的可找到 Java 类文件，不要为找不到类而痛苦，而<br>且可以使用“*”、“？”等通配符。</li>\n<li>【Ctrl+Shift+R】<br>和【Ctrl+Shift+T】对应，查找工作空间（Workspace）中的所有文件（包括 Java 文件），也可<br>以使用通配符。</li>\n<li>【Ctrl+Shift+G】<br>查找类、方法和属性的引用。这是一个非常实用的快捷键，例如要修改引用某个方法的代码，<br>可以通过【Ctrl+Shift+G】快捷键迅速定位所有引用此方法的位置。</li>\n<li>【Ctrl+Shift+O】<br>快速生成 import，当从网上拷贝一段程序后，不知道如何 import 进所调用的类，试试<br>【Ctrl+Shift+O】快捷键，一定会有惊喜。</li>\n<li>【Ctrl+Shift+F】<br>格式化代码，书写格式规范的代码是每一个程序员的必修之课，当看见某段代码极不顺眼时，<br>选定后按【Ctrl+Shift+F】快捷键可以格式化这段代码，如果不选定代码则默认格式化当前文<br>件（Java 文件）。</li>\n<li>【ALT+Shift+W】<br>查找当前文件所在项目中的路径，可以快速定位浏览器视图的位置，如果想查找某个文件所<br>在的包时，此快捷键非常有用（特别在比较大的项目中）。</li>\n<li>【Ctrl+L】<br>定位到当前编辑器的某一行，对非 Java 文件也有效。</li>\n<li>【Alt+←】、【Alt+→】<br>后退历史记录和前进历史记录，在跟踪代码时非常有用，用户可能查找了几个有关联的地方，<br>但可能记不清楚了，可以通过这两个快捷键定位查找的顺序。</li>\n<li>【F3】<br>快速定位光标位置的某个类、方法和属性。</li>\n<li>【F4】<br>显示类的继承关系，并打开类继承视图。</li>\n</ol>\n<h1 id=\"调试快捷键\"><a href=\"#调试快捷键\" class=\"headerlink\" title=\"调试快捷键\"></a>调试快捷键</h1><blockquote>\n<p>Eclipse 中有如下一些和运行调试相关的快捷键。</p>\n</blockquote>\n<ol>\n<li>【Ctrl+Shift+B】：在当前行设置断点或取消设置的断点。</li>\n<li>【F11】：调试最后一次执行的程序。</li>\n<li>【Ctrl+F11】：运行最后一次执行的程序。</li>\n<li>【F5】：跟踪到方法中，当程序执行到某方法时，可以按【F5】键跟踪到方法中。</li>\n<li>【F6】：单步执行程序。</li>\n<li>【F7】：执行完方法，返回到调用此方法的后一条语句。</li>\n<li>【F8】：继续执行，到下一个断点或程序结束。</li>\n</ol>\n<h1 id=\"常用编辑器快捷键\"><a href=\"#常用编辑器快捷键\" class=\"headerlink\" title=\"常用编辑器快捷键\"></a>常用编辑器快捷键</h1><blockquote>\n<p>通常文本编辑器都提供了一些和编辑相关的快捷键，在 Eclipse 中也可以通过这些快捷键进<br>行文本编辑。</p>\n</blockquote>\n<ol>\n<li>【Ctrl+C】：复制。</li>\n<li>【Ctrl+X】：剪切。</li>\n<li>【Ctrl+V】：粘贴。</li>\n<li>【Ctrl+S】：保存文件。</li>\n<li>【Ctrl+Z】：撤销。</li>\n<li>【Ctrl+Y】：重复。</li>\n<li>【Ctrl+F】：查找。</li>\n</ol>\n<h1 id=\"其他快捷键\"><a href=\"#其他快捷键\" class=\"headerlink\" title=\"其他快捷键\"></a>其他快捷键</h1><blockquote>\n<p>Eclipse 中还有很多快捷键，无法一一列举，用户可以通过帮助文档找到它们的使用方式，另<br>外还有几个常用的快捷键如下。</p>\n</blockquote>\n<ol>\n<li>【Ctrl+F6】：切换到下一个编辑器。</li>\n<li>【Ctrl+Shift+F6】：切换到上一个编辑器。</li>\n<li>【Ctrl+F7】：切换到下一个视图。</li>\n<li>【Ctrl+Shift+F7】：切换到上一个视图。</li>\n<li>【Ctrl+F8】：切换到下一个透视图。</li>\n<li>【Ctrl+Shift+F8】：切换到上一个透视图。</li>\n</ol>\n<h1 id=\"Ctrl-系列\"><a href=\"#Ctrl-系列\" class=\"headerlink\" title=\"Ctrl  系列\"></a>Ctrl  系列</h1><p><strong>Ctrl+K:</strong> 将光标停留在变量上，按 Ctrl+K 键可以查找到下一个同样的变量<br><strong>Ctrl+Shift+K:</strong> 和 Ctrl+K 查找的方向相反<br><strong>Ctrl+E:</strong> 快速显示当前 Editer 的下拉列表(如果当前页面没有显示的用黑体表示)<br><strong>Ctrl+Shift+E:</strong> 显示管理当前打开的所有的 View 的管理器(可以选择关闭,激活等操作)<br><strong>Ctrl+Q:</strong> 定位到最后编辑的地方<br><strong>Ctrl+L:</strong> 定位在某行 (对于程序超过 100 的人就有福音了)<br><strong>Ctrl+M:</strong> 最大化当前的 Edit 或 View (再按则反之)<br><strong>Ctrl+/:</strong> 注释当前行,再按则取消注释<br><strong>Ctrl+T:</strong> 快速显示当前类的继承结构<br><strong>Ctrl+Shift-T:</strong> 打开类型（Open type）。如果你不是有意磨洋工，还是忘记通过源码树（sourcetree）打开的方式吧。<br><strong>Ctrl+O:</strong> 在代码中打开类似大纲视图的小窗口<br><strong>Ctrl+鼠标停留:</strong> 可以显示类和方法的源码<br><strong>Ctrl+H:</strong> 打开搜索窗口<br><strong>Ctrl+/(小键盘):</strong> 折叠当前类中的所有代码<br><strong>Ctrl+×(小键盘):</strong> 展开当前类中的所有代码</p>\n<h1 id=\"Ctrl-Shift-系列\"><a href=\"#Ctrl-Shift-系列\" class=\"headerlink\" title=\"Ctrl+Shift  系列\"></a>Ctrl+Shift  系列</h1><p><strong>Ctrl+Shift+F:</strong> 格式化当前代码<br><strong>Ctrl+Shift+X:</strong> 把当前选中的文本全部变味小写<br><strong>Ctrl+Shift+Y:</strong> 把当前选中的文本全部变为小写<br><strong>Ctrl+Shift+O:</strong> 快速地导入 import<br><strong>Ctrl+Shift+R:</strong> 打开资源 open Resource</p>\n<h1 id=\"F-快捷键-系列\"><a href=\"#F-快捷键-系列\" class=\"headerlink\" title=\"F  快捷键  系列\"></a>F  快捷键  系列</h1><p><strong>F3:</strong> 打开声明该引用的文件<br><strong>F4:</strong> 打开类型层次结构<br><strong>F5:</strong> 单步跳入<br><strong>F6:</strong> 单步跳过<br><strong>F7:</strong> 单步跳出<br><strong>F8:</strong> 继续，如果后面没有断点，程序将运行完</p>\n<h1 id=\"行编辑用\"><a href=\"#行编辑用\" class=\"headerlink\" title=\"行编辑用\"></a>行编辑用</h1><p><strong>Ctrl+D:</strong> 删除当前行<br><strong>Ctrl+Alt+↓</strong> 复制当前行到下一行(复制增加)<br><strong>Ctrl+Alt+↑</strong> 复制当前行到上一行(复制增加)<br><strong>Alt+↓</strong> 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)<br><strong>Alt+↑</strong> 当前行和上面一行交互位置(同上)<br><strong>Shift+Enter</strong> 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)<br><strong>Ctrl+Shift+Enter</strong> 在当前行插入空行(原理同上条)</p>\n<h1 id=\"不常用的\"><a href=\"#不常用的\" class=\"headerlink\" title=\"不常用的\"></a>不常用的</h1><p><strong>Alt+←</strong> 前一个编辑的页面<br><strong>Alt+→</strong> 下一个编辑的页面(当然是针对上面那条来说了)<br><strong>Ctrl+Shift+S:</strong> 保存全部<br><strong>Ctrl+W:</strong> 关闭当前 Editer<br><strong>Ctrl+Shift+F4:</strong> 关闭所有打开的 Editer<br><strong>Ctrl+Shift+G:</strong> 在 workspace 中搜索引用<br><strong>Ctrl+Shift+P:</strong> 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到<br>  前面,则反之)</p>\n<h1 id=\"增量查找\"><a href=\"#增量查找\" class=\"headerlink\" title=\"增量查找\"></a>增量查找</h1><p><strong>Ctrl+J:</strong> 正向增量查找(按下 Ctrl+J 后,你所输入的每个字母编辑器都提供快速匹配定位到某个<br>单词,如果没有,则在 stutes line 中显示没有找到了,查一个单词时,特别实用,这个功能 Idea 两<br>年前就有了)<br><strong>Ctrl+Shift+J:</strong> 反向增量查找(和上条相同,只不过是从后往前查)</p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n<blockquote>\n<p>对从网上搜到的eclipse快捷键做出整理，以方便自己的使用。</p>\n</blockquote></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"查看和定位快捷键\"><a href=\"#查看和定位快捷键\" class=\"headerlink\" title=\"查看和定位快捷键\"></a>查看和定位快捷键</h1><blockquote>\n<p>在程序中，迅速定位代码的位置，快速找到 Bug 的所在，是非常不容易的事，Eclipse 提供<br>   了强大的查找功能，可以利用如下的快捷键帮助完成查找定位的工作。</p>\n</blockquote>\n<ol>\n<li>【Ctrl+K】、【Ctrl++Shift+K】<br>快速向下和向上查找选定的内容，从此不再需要用鼠标单击查找对话框了。</li>\n<li>【Ctrl+Shift+T】<br>查找工作空间（Workspace）构建路径中的可找到 Java 类文件，不要为找不到类而痛苦，而<br>且可以使用“*”、“？”等通配符。</li>\n<li>【Ctrl+Shift+R】<br>和【Ctrl+Shift+T】对应，查找工作空间（Workspace）中的所有文件（包括 Java 文件），也可<br>以使用通配符。</li>\n<li>【Ctrl+Shift+G】<br>查找类、方法和属性的引用。这是一个非常实用的快捷键，例如要修改引用某个方法的代码，<br>可以通过【Ctrl+Shift+G】快捷键迅速定位所有引用此方法的位置。</li>\n<li>【Ctrl+Shift+O】<br>快速生成 import，当从网上拷贝一段程序后，不知道如何 import 进所调用的类，试试<br>【Ctrl+Shift+O】快捷键，一定会有惊喜。</li>\n<li>【Ctrl+Shift+F】<br>格式化代码，书写格式规范的代码是每一个程序员的必修之课，当看见某段代码极不顺眼时，<br>选定后按【Ctrl+Shift+F】快捷键可以格式化这段代码，如果不选定代码则默认格式化当前文<br>件（Java 文件）。</li>\n<li>【ALT+Shift+W】<br>查找当前文件所在项目中的路径，可以快速定位浏览器视图的位置，如果想查找某个文件所<br>在的包时，此快捷键非常有用（特别在比较大的项目中）。</li>\n<li>【Ctrl+L】<br>定位到当前编辑器的某一行，对非 Java 文件也有效。</li>\n<li>【Alt+←】、【Alt+→】<br>后退历史记录和前进历史记录，在跟踪代码时非常有用，用户可能查找了几个有关联的地方，<br>但可能记不清楚了，可以通过这两个快捷键定位查找的顺序。</li>\n<li>【F3】<br>快速定位光标位置的某个类、方法和属性。</li>\n<li>【F4】<br>显示类的继承关系，并打开类继承视图。</li>\n</ol>\n<h1 id=\"调试快捷键\"><a href=\"#调试快捷键\" class=\"headerlink\" title=\"调试快捷键\"></a>调试快捷键</h1><blockquote>\n<p>Eclipse 中有如下一些和运行调试相关的快捷键。</p>\n</blockquote>\n<ol>\n<li>【Ctrl+Shift+B】：在当前行设置断点或取消设置的断点。</li>\n<li>【F11】：调试最后一次执行的程序。</li>\n<li>【Ctrl+F11】：运行最后一次执行的程序。</li>\n<li>【F5】：跟踪到方法中，当程序执行到某方法时，可以按【F5】键跟踪到方法中。</li>\n<li>【F6】：单步执行程序。</li>\n<li>【F7】：执行完方法，返回到调用此方法的后一条语句。</li>\n<li>【F8】：继续执行，到下一个断点或程序结束。</li>\n</ol>\n<h1 id=\"常用编辑器快捷键\"><a href=\"#常用编辑器快捷键\" class=\"headerlink\" title=\"常用编辑器快捷键\"></a>常用编辑器快捷键</h1><blockquote>\n<p>通常文本编辑器都提供了一些和编辑相关的快捷键，在 Eclipse 中也可以通过这些快捷键进<br>行文本编辑。</p>\n</blockquote>\n<ol>\n<li>【Ctrl+C】：复制。</li>\n<li>【Ctrl+X】：剪切。</li>\n<li>【Ctrl+V】：粘贴。</li>\n<li>【Ctrl+S】：保存文件。</li>\n<li>【Ctrl+Z】：撤销。</li>\n<li>【Ctrl+Y】：重复。</li>\n<li>【Ctrl+F】：查找。</li>\n</ol>\n<h1 id=\"其他快捷键\"><a href=\"#其他快捷键\" class=\"headerlink\" title=\"其他快捷键\"></a>其他快捷键</h1><blockquote>\n<p>Eclipse 中还有很多快捷键，无法一一列举，用户可以通过帮助文档找到它们的使用方式，另<br>外还有几个常用的快捷键如下。</p>\n</blockquote>\n<ol>\n<li>【Ctrl+F6】：切换到下一个编辑器。</li>\n<li>【Ctrl+Shift+F6】：切换到上一个编辑器。</li>\n<li>【Ctrl+F7】：切换到下一个视图。</li>\n<li>【Ctrl+Shift+F7】：切换到上一个视图。</li>\n<li>【Ctrl+F8】：切换到下一个透视图。</li>\n<li>【Ctrl+Shift+F8】：切换到上一个透视图。</li>\n</ol>\n<h1 id=\"Ctrl-系列\"><a href=\"#Ctrl-系列\" class=\"headerlink\" title=\"Ctrl  系列\"></a>Ctrl  系列</h1><p><strong>Ctrl+K:</strong> 将光标停留在变量上，按 Ctrl+K 键可以查找到下一个同样的变量<br><strong>Ctrl+Shift+K:</strong> 和 Ctrl+K 查找的方向相反<br><strong>Ctrl+E:</strong> 快速显示当前 Editer 的下拉列表(如果当前页面没有显示的用黑体表示)<br><strong>Ctrl+Shift+E:</strong> 显示管理当前打开的所有的 View 的管理器(可以选择关闭,激活等操作)<br><strong>Ctrl+Q:</strong> 定位到最后编辑的地方<br><strong>Ctrl+L:</strong> 定位在某行 (对于程序超过 100 的人就有福音了)<br><strong>Ctrl+M:</strong> 最大化当前的 Edit 或 View (再按则反之)<br><strong>Ctrl+/:</strong> 注释当前行,再按则取消注释<br><strong>Ctrl+T:</strong> 快速显示当前类的继承结构<br><strong>Ctrl+Shift-T:</strong> 打开类型（Open type）。如果你不是有意磨洋工，还是忘记通过源码树（sourcetree）打开的方式吧。<br><strong>Ctrl+O:</strong> 在代码中打开类似大纲视图的小窗口<br><strong>Ctrl+鼠标停留:</strong> 可以显示类和方法的源码<br><strong>Ctrl+H:</strong> 打开搜索窗口<br><strong>Ctrl+/(小键盘):</strong> 折叠当前类中的所有代码<br><strong>Ctrl+×(小键盘):</strong> 展开当前类中的所有代码</p>\n<h1 id=\"Ctrl-Shift-系列\"><a href=\"#Ctrl-Shift-系列\" class=\"headerlink\" title=\"Ctrl+Shift  系列\"></a>Ctrl+Shift  系列</h1><p><strong>Ctrl+Shift+F:</strong> 格式化当前代码<br><strong>Ctrl+Shift+X:</strong> 把当前选中的文本全部变味小写<br><strong>Ctrl+Shift+Y:</strong> 把当前选中的文本全部变为小写<br><strong>Ctrl+Shift+O:</strong> 快速地导入 import<br><strong>Ctrl+Shift+R:</strong> 打开资源 open Resource</p>\n<h1 id=\"F-快捷键-系列\"><a href=\"#F-快捷键-系列\" class=\"headerlink\" title=\"F  快捷键  系列\"></a>F  快捷键  系列</h1><p><strong>F3:</strong> 打开声明该引用的文件<br><strong>F4:</strong> 打开类型层次结构<br><strong>F5:</strong> 单步跳入<br><strong>F6:</strong> 单步跳过<br><strong>F7:</strong> 单步跳出<br><strong>F8:</strong> 继续，如果后面没有断点，程序将运行完</p>\n<h1 id=\"行编辑用\"><a href=\"#行编辑用\" class=\"headerlink\" title=\"行编辑用\"></a>行编辑用</h1><p><strong>Ctrl+D:</strong> 删除当前行<br><strong>Ctrl+Alt+↓</strong> 复制当前行到下一行(复制增加)<br><strong>Ctrl+Alt+↑</strong> 复制当前行到上一行(复制增加)<br><strong>Alt+↓</strong> 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)<br><strong>Alt+↑</strong> 当前行和上面一行交互位置(同上)<br><strong>Shift+Enter</strong> 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)<br><strong>Ctrl+Shift+Enter</strong> 在当前行插入空行(原理同上条)</p>\n<h1 id=\"不常用的\"><a href=\"#不常用的\" class=\"headerlink\" title=\"不常用的\"></a>不常用的</h1><p><strong>Alt+←</strong> 前一个编辑的页面<br><strong>Alt+→</strong> 下一个编辑的页面(当然是针对上面那条来说了)<br><strong>Ctrl+Shift+S:</strong> 保存全部<br><strong>Ctrl+W:</strong> 关闭当前 Editer<br><strong>Ctrl+Shift+F4:</strong> 关闭所有打开的 Editer<br><strong>Ctrl+Shift+G:</strong> 在 workspace 中搜索引用<br><strong>Ctrl+Shift+P:</strong> 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到<br>  前面,则反之)</p>\n<h1 id=\"增量查找\"><a href=\"#增量查找\" class=\"headerlink\" title=\"增量查找\"></a>增量查找</h1><p><strong>Ctrl+J:</strong> 正向增量查找(按下 Ctrl+J 后,你所输入的每个字母编辑器都提供快速匹配定位到某个<br>单词,如果没有,则在 stutes line 中显示没有找到了,查一个单词时,特别实用,这个功能 Idea 两<br>年前就有了)<br><strong>Ctrl+Shift+J:</strong> 反向增量查找(和上条相同,只不过是从后往前查)</p></The>"},{"title":"Hello World","date":"2017-02-17T11:51:30.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-02-17 19:51:30\ntags: Hexo\n\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-03-06T14:14:31.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6w9001k64xt91xpz2fo","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"java int类型转换成String,不足10位在前面补0","date":"2017-05-09T12:51:02.000Z","_content":"<Excerpt in index | 首页摘要>\n\n**String.format(\"%010d\", 25);**\n\n\n\n0代表前面要补的字符\n\n10代表字符串长度\n\nd表示参数为整数类型\n\n\n\n\n","source":"_posts/java-int类型转换成String-不足10位在前面补0.md","raw":"---\ntitle: 'java int类型转换成String,不足10位在前面补0'\ndate: 2017-05-09 20:51:02\ncategories: JAVA #文章文类\ntags: [JAVA,基础]  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n<Excerpt in index | 首页摘要>\n\n**String.format(\"%010d\", 25);**\n\n\n\n0代表前面要补的字符\n\n10代表字符串长度\n\nd表示参数为整数类型\n\n\n\n\n","slug":"java-int类型转换成String-不足10位在前面补0","published":1,"updated":"2017-05-09T13:02:22.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6wg001n64xtjnvqlzm9","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<p><strong>String.format(“%010d”, 25);</strong></p>\n<p>0代表前面要补的字符</p>\n<p>10代表字符串长度</p>\n<p>d表示参数为整数类型</p>\n</excerpt>","excerpt":"","more":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<p><strong>String.format(“%010d”, 25);</strong></p>\n<p>0代表前面要补的字符</p>\n<p>10代表字符串长度</p>\n<p>d表示参数为整数类型</p>\n</Excerpt>"},{"title":"photo","date":"2020-08-18T14:51:45.000Z","_content":"\n\n\n![](1.png)","source":"_posts/photo.md","raw":"---\ntitle: photo\ndate: 2020-08-18 22:51:45\ntags:\n---\n\n\n\n![](1.png)","slug":"photo","published":1,"updated":"2020-08-18T14:55:51.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6wj001q64xtep6o3szc","content":"<p><img src=\"//tianqing.work/2020/08/18/photo/1.png\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"//tianqing.work/2020/08/18/photo/1.png\" alt=\"\"></p>\n"},{"title":"使用Oracle SQL Developer连接mysql数据库","date":"2017-08-09T14:12:56.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n>Oracle SQL Developer是Oracle官方提供的数据库连接工具。不仅可以连接自己的数据库（Oracle），而且还可以连接多种其他的数据库。MySql已经成为了Oracle旗下的产品，连接它当然也不在话下。在这里，笔者在实际开发中只进行了MySQL的连接实践，其它的数据库请读者自行研究，但应该也都是可以的。\n\n**<p style=\"color:red;\">转载请注明：转载于Terry Tian的博客（[www.mutouspace.cn](www.mutouspace.cn)）!</p>**                    \n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n**<p style=\"color:blue;\">总而言之，兼容其它的数据库方法都是比较统一的，主要就是把第三方驱动的jar包加载进来。</p>** \n**作者环境：Windows 10 X64**\n\n# MySQL的连接配置 #\n\n- 下载第三方数据库jar包，并放到规定目录下\n- 在SqlDeveloper中进行配置\n- 重启工具\n\n第一步：下载第三方数据库jar包，并放到规定目录下                                                                   第三方jar包，网上一搜一大把，我这里用的是mysql-connector-java-5.0.8-bin.jar,官方下载地址：[https://www.mysql.com/products/connector/](https://www.mysql.com/products/connector/)。\n\n将jar包放入OracleSqlDeveloper的安装目录下的\"jlib\"目录，比如我的是：D:\\sqldeveloper-17.2.0.188.1159-no-jre\\sqldeveloper\\jlib\n\n![](http://olg3gwtbm.bkt.clouddn.com/sqldeveloper1.png)\n\n第二步：启动OracleSqlDeveloper，选择\"工具\"-\"首选项\"-\"数据库\"-\"第三方jdbc驱动程序\"。\n\n![](http://olg3gwtbm.bkt.clouddn.com/sqldeveloper2.png)\n\n选择【添加条目】，找到刚刚添加的jar包，添加后确定。\n\n![](http://olg3gwtbm.bkt.clouddn.com/sqldeveloper.png)\n\n第三步：重新启动Oracle之后，创建数据库链接的地方就可以看到MySql的选项：\n\n![](http://olg3gwtbm.bkt.clouddn.com/sqldeveloper4.png)\n\n","source":"_posts/使用Oracle SQL Developer连接mysql数据库.md","raw":"---\ntitle: 使用Oracle SQL Developer连接mysql数据库\ndate: 2017-08-09 22:12:56\ncategories: 数据库 #文章文类\ntags: SQL Developer\n\n---\n\n<Excerpt in index | 首页摘要>\n\n>Oracle SQL Developer是Oracle官方提供的数据库连接工具。不仅可以连接自己的数据库（Oracle），而且还可以连接多种其他的数据库。MySql已经成为了Oracle旗下的产品，连接它当然也不在话下。在这里，笔者在实际开发中只进行了MySQL的连接实践，其它的数据库请读者自行研究，但应该也都是可以的。\n\n**<p style=\"color:red;\">转载请注明：转载于Terry Tian的博客（[www.mutouspace.cn](www.mutouspace.cn)）!</p>**                    \n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n**<p style=\"color:blue;\">总而言之，兼容其它的数据库方法都是比较统一的，主要就是把第三方驱动的jar包加载进来。</p>** \n**作者环境：Windows 10 X64**\n\n# MySQL的连接配置 #\n\n- 下载第三方数据库jar包，并放到规定目录下\n- 在SqlDeveloper中进行配置\n- 重启工具\n\n第一步：下载第三方数据库jar包，并放到规定目录下                                                                   第三方jar包，网上一搜一大把，我这里用的是mysql-connector-java-5.0.8-bin.jar,官方下载地址：[https://www.mysql.com/products/connector/](https://www.mysql.com/products/connector/)。\n\n将jar包放入OracleSqlDeveloper的安装目录下的\"jlib\"目录，比如我的是：D:\\sqldeveloper-17.2.0.188.1159-no-jre\\sqldeveloper\\jlib\n\n![](http://olg3gwtbm.bkt.clouddn.com/sqldeveloper1.png)\n\n第二步：启动OracleSqlDeveloper，选择\"工具\"-\"首选项\"-\"数据库\"-\"第三方jdbc驱动程序\"。\n\n![](http://olg3gwtbm.bkt.clouddn.com/sqldeveloper2.png)\n\n选择【添加条目】，找到刚刚添加的jar包，添加后确定。\n\n![](http://olg3gwtbm.bkt.clouddn.com/sqldeveloper.png)\n\n第三步：重新启动Oracle之后，创建数据库链接的地方就可以看到MySql的选项：\n\n![](http://olg3gwtbm.bkt.clouddn.com/sqldeveloper4.png)\n\n","slug":"使用Oracle SQL Developer连接mysql数据库","published":1,"updated":"2017-08-10T00:21:01.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6wn001t64xtxj85mh9w","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>Oracle SQL Developer是Oracle官方提供的数据库连接工具。不仅可以连接自己的数据库（Oracle），而且还可以连接多种其他的数据库。MySql已经成为了Oracle旗下的产品，连接它当然也不在话下。在这里，笔者在实际开发中只进行了MySQL的连接实践，其它的数据库请读者自行研究，但应该也都是可以的。</p>\n</blockquote>\n<p><strong><p style=\"color:red;\">转载请注明：转载于Terry Tian的博客（<a href=\"www.mutouspace.cn\">www.mutouspace.cn</a>）!</p></strong>                    </p>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p><strong><p style=\"color:blue;\">总而言之，兼容其它的数据库方法都是比较统一的，主要就是把第三方驱动的jar包加载进来。</p></strong><br><strong>作者环境：Windows 10 X64</strong></p>\n<h1 id=\"MySQL的连接配置\"><a href=\"#MySQL的连接配置\" class=\"headerlink\" title=\"MySQL的连接配置\"></a>MySQL的连接配置</h1><ul>\n<li>下载第三方数据库jar包，并放到规定目录下</li>\n<li>在SqlDeveloper中进行配置</li>\n<li>重启工具</li>\n</ul>\n<p>第一步：下载第三方数据库jar包，并放到规定目录下                                                                   第三方jar包，网上一搜一大把，我这里用的是mysql-connector-java-5.0.8-bin.jar,官方下载地址：<a href=\"https://www.mysql.com/products/connector/\" target=\"_blank\" rel=\"external\">https://www.mysql.com/products/connector/</a>。</p>\n<p>将jar包放入OracleSqlDeveloper的安装目录下的”jlib”目录，比如我的是：D:\\sqldeveloper-17.2.0.188.1159-no-jre\\sqldeveloper\\jlib</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/sqldeveloper1.png\" alt=\"\"></p>\n<p>第二步：启动OracleSqlDeveloper，选择”工具”-“首选项”-“数据库”-“第三方jdbc驱动程序”。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/sqldeveloper2.png\" alt=\"\"></p>\n<p>选择【添加条目】，找到刚刚添加的jar包，添加后确定。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/sqldeveloper.png\" alt=\"\"></p>\n<p>第三步：重新启动Oracle之后，创建数据库链接的地方就可以看到MySql的选项：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/sqldeveloper4.png\" alt=\"\"></p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>Oracle SQL Developer是Oracle官方提供的数据库连接工具。不仅可以连接自己的数据库（Oracle），而且还可以连接多种其他的数据库。MySql已经成为了Oracle旗下的产品，连接它当然也不在话下。在这里，笔者在实际开发中只进行了MySQL的连接实践，其它的数据库请读者自行研究，但应该也都是可以的。</p>\n</blockquote>\n<p><strong><p style=\"color:red;\">转载请注明：转载于Terry Tian的博客（<a href=\"www.mutouspace.cn\">www.mutouspace.cn</a>）!</p></strong>                    </p></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p><strong><p style=\"color:blue;\">总而言之，兼容其它的数据库方法都是比较统一的，主要就是把第三方驱动的jar包加载进来。</p></strong><br><strong>作者环境：Windows 10 X64</strong></p>\n<h1 id=\"MySQL的连接配置\"><a href=\"#MySQL的连接配置\" class=\"headerlink\" title=\"MySQL的连接配置\"></a>MySQL的连接配置</h1><ul>\n<li>下载第三方数据库jar包，并放到规定目录下</li>\n<li>在SqlDeveloper中进行配置</li>\n<li>重启工具</li>\n</ul>\n<p>第一步：下载第三方数据库jar包，并放到规定目录下                                                                   第三方jar包，网上一搜一大把，我这里用的是mysql-connector-java-5.0.8-bin.jar,官方下载地址：<a href=\"https://www.mysql.com/products/connector/\">https://www.mysql.com/products/connector/</a>。</p>\n<p>将jar包放入OracleSqlDeveloper的安装目录下的”jlib”目录，比如我的是：D:\\sqldeveloper-17.2.0.188.1159-no-jre\\sqldeveloper\\jlib</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/sqldeveloper1.png\" alt=\"\"></p>\n<p>第二步：启动OracleSqlDeveloper，选择”工具”-“首选项”-“数据库”-“第三方jdbc驱动程序”。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/sqldeveloper2.png\" alt=\"\"></p>\n<p>选择【添加条目】，找到刚刚添加的jar包，添加后确定。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/sqldeveloper.png\" alt=\"\"></p>\n<p>第三步：重新启动Oracle之后，创建数据库链接的地方就可以看到MySql的选项：</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/sqldeveloper4.png\" alt=\"\"></p></The>"},{"title":"多个maven项目启动顺序","date":"2020-08-17T12:44:07.000Z","_content":"\n<Excerpt in index | 首页摘要>\n**多个maven项目启动顺序**\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n\n\n\n\n# 多个maven项目启动顺序\n\n## 问题背景\n\n在公司实际项目中，开发的项目一般都会涉及到多个 maven 项目，比如项目2会依赖项目1。使用 Jenkins 实现自动部署时，除了写一个流水线脚本时，就需要找一个合适的 maven 命令脚本解决。\n\n### 问题描述\n\n现在有两个 Maven 工程，maven1 和 maven2 ，maven2 依赖于 maven1 。maven1 的 pom 文件如下：\n\n```\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n   http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n   \n   <modelVersion>4.0.0</modelVersion> \n   <groupId>bus-core-api</groupId> \n   <artifactId>bus-core-api</artifactId> \n   <version>1.0-SNAPSHOT</version> \n   <packaging>jar</packaging> \n   </project>\n   \n ```\nmaven2 的pom文件如下：\n\n```\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n   http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n   <modelVersion>4.0.0</modelVersion> \n   <groupId>app-desktop-ui</groupId> \n   <artifactId>app-desktop-ui</artifactId> \n   <version>1.0</version> \n   <packaging>jar</packaging> \n   <dependencies> \n    <dependency> \n        <groupId>bus-core-api</groupId> \n        <artifactId>bus-core-api</artifactId> \n        <version>1.0-SNAPSHOT</version> \n    </dependency> \n  </dependencies> \n  </project>\n\n```\n\n**在平时我们打包的时候，是对maven1项目先执行 maven install ，然后再对maven2 项目执行 maven clean package。\n有没有一种方法可以实现：我直接对maven2进行打包操作，它会自动的先对maven2依赖的项目先进行install，然后再对maven2进行打包？**\n\n## 解决方案\n### 方案一\n\n首先有两个 maven 项目，maven1 和 maven2 。其中 maven2 依赖于 maven1.\n\n这时，maven1 的 pom.xml 内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>space.tiantsing</groupId>\n    <artifactId>maven1</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n</project>\n\n```\n\nmaven2 的 pom.xml 内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>space.tiantsing</groupId>\n    <artifactId>maven2</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>space.tiantsing</groupId>\n            <artifactId>maven1</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n</project>\n\n```\n\n然后，我们在 maven2 项目中新建一个 xml 文件，pomAutom.xml 内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>space.tiantsing</groupId>\n    <artifactId>mavenAutom</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging> // 这里的打包方式必须为 pom\n\n    <modules>\n        <module>../maven1</module>\n        <module>../maven2</module>\n    </modules>\n</project>\n\n```\n\n这时，我们通过 cmd 进入到 maven2 项目 pom 文件所在的目录，执行命令 `mvn clean package -f pomAutom.xml` ,这时就会按照你在 pomAutom.xml 中\n\n```\n<modules>\n        <module>../maven1</module>\n        <module>../maven2</module>\n    </modules>\n    \n```\n\n配置的顺序启动。\n\nDEMO路径：[MavenDependTemplate](https://gitee.com/tsingtian/MavenDependTemplate.git)","source":"_posts/多个maven项目启动顺序.md","raw":"---\ntitle: 多个maven项目启动顺序 #可以改成中文的，如“新文章”\ndate: 2020-08-17 20:44:07  #发表日期，一般不改动\ncategories: maven #文章文类\ntags: maven  #文章标签，多于一项时用这种格式 [测试1,测试二]，只有一项时使用tags: blog\n\n---\n\n<Excerpt in index | 首页摘要>\n**多个maven项目启动顺序**\n\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n\n\n\n\n# 多个maven项目启动顺序\n\n## 问题背景\n\n在公司实际项目中，开发的项目一般都会涉及到多个 maven 项目，比如项目2会依赖项目1。使用 Jenkins 实现自动部署时，除了写一个流水线脚本时，就需要找一个合适的 maven 命令脚本解决。\n\n### 问题描述\n\n现在有两个 Maven 工程，maven1 和 maven2 ，maven2 依赖于 maven1 。maven1 的 pom 文件如下：\n\n```\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n   http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n   \n   <modelVersion>4.0.0</modelVersion> \n   <groupId>bus-core-api</groupId> \n   <artifactId>bus-core-api</artifactId> \n   <version>1.0-SNAPSHOT</version> \n   <packaging>jar</packaging> \n   </project>\n   \n ```\nmaven2 的pom文件如下：\n\n```\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n   http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n   <modelVersion>4.0.0</modelVersion> \n   <groupId>app-desktop-ui</groupId> \n   <artifactId>app-desktop-ui</artifactId> \n   <version>1.0</version> \n   <packaging>jar</packaging> \n   <dependencies> \n    <dependency> \n        <groupId>bus-core-api</groupId> \n        <artifactId>bus-core-api</artifactId> \n        <version>1.0-SNAPSHOT</version> \n    </dependency> \n  </dependencies> \n  </project>\n\n```\n\n**在平时我们打包的时候，是对maven1项目先执行 maven install ，然后再对maven2 项目执行 maven clean package。\n有没有一种方法可以实现：我直接对maven2进行打包操作，它会自动的先对maven2依赖的项目先进行install，然后再对maven2进行打包？**\n\n## 解决方案\n### 方案一\n\n首先有两个 maven 项目，maven1 和 maven2 。其中 maven2 依赖于 maven1.\n\n这时，maven1 的 pom.xml 内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>space.tiantsing</groupId>\n    <artifactId>maven1</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n</project>\n\n```\n\nmaven2 的 pom.xml 内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>space.tiantsing</groupId>\n    <artifactId>maven2</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>space.tiantsing</groupId>\n            <artifactId>maven1</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n</project>\n\n```\n\n然后，我们在 maven2 项目中新建一个 xml 文件，pomAutom.xml 内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>space.tiantsing</groupId>\n    <artifactId>mavenAutom</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging> // 这里的打包方式必须为 pom\n\n    <modules>\n        <module>../maven1</module>\n        <module>../maven2</module>\n    </modules>\n</project>\n\n```\n\n这时，我们通过 cmd 进入到 maven2 项目 pom 文件所在的目录，执行命令 `mvn clean package -f pomAutom.xml` ,这时就会按照你在 pomAutom.xml 中\n\n```\n<modules>\n        <module>../maven1</module>\n        <module>../maven2</module>\n    </modules>\n    \n```\n\n配置的顺序启动。\n\nDEMO路径：[MavenDependTemplate](https://gitee.com/tsingtian/MavenDependTemplate.git)","slug":"多个maven项目启动顺序","published":1,"updated":"2020-08-17T15:36:36.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6ww001w64xt837az9gl","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br><strong>多个maven项目启动顺序</strong></excerpt></p>\n<a id=\"more\"></a> \n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<p>#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>\n<h1 id=\"多个maven项目启动顺序\"><a href=\"#多个maven项目启动顺序\" class=\"headerlink\" title=\"多个maven项目启动顺序\"></a>多个maven项目启动顺序</h1><h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>在公司实际项目中，开发的项目一般都会涉及到多个 maven 项目，比如项目2会依赖项目1。使用 Jenkins 实现自动部署时，除了写一个流水线脚本时，就需要找一个合适的 maven 命令脚本解决。</p>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>现在有两个 Maven 工程，maven1 和 maven2 ，maven2 依赖于 maven1 。maven1 的 pom 文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 </div><div class=\"line\">   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; </div><div class=\"line\">   </div><div class=\"line\">   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; </div><div class=\"line\">   &lt;groupId&gt;bus-core-api&lt;/groupId&gt; </div><div class=\"line\">   &lt;artifactId&gt;bus-core-api&lt;/artifactId&gt; </div><div class=\"line\">   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; </div><div class=\"line\">   &lt;packaging&gt;jar&lt;/packaging&gt; </div><div class=\"line\">   &lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>maven2 的pom文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 </div><div class=\"line\">   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; </div><div class=\"line\">   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; </div><div class=\"line\">   &lt;groupId&gt;app-desktop-ui&lt;/groupId&gt; </div><div class=\"line\">   &lt;artifactId&gt;app-desktop-ui&lt;/artifactId&gt; </div><div class=\"line\">   &lt;version&gt;1.0&lt;/version&gt; </div><div class=\"line\">   &lt;packaging&gt;jar&lt;/packaging&gt; </div><div class=\"line\">   &lt;dependencies&gt; </div><div class=\"line\">    &lt;dependency&gt; </div><div class=\"line\">        &lt;groupId&gt;bus-core-api&lt;/groupId&gt; </div><div class=\"line\">        &lt;artifactId&gt;bus-core-api&lt;/artifactId&gt; </div><div class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; </div><div class=\"line\">    &lt;/dependency&gt; </div><div class=\"line\">  &lt;/dependencies&gt; </div><div class=\"line\">  &lt;/project&gt;</div></pre></td></tr></table></figure>\n<p><strong>在平时我们打包的时候，是对maven1项目先执行 maven install ，然后再对maven2 项目执行 maven clean package。<br>有没有一种方法可以实现：我直接对maven2进行打包操作，它会自动的先对maven2依赖的项目先进行install，然后再对maven2进行打包？</strong></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>首先有两个 maven 项目，maven1 和 maven2 。其中 maven2 依赖于 maven1.</p>\n<p>这时，maven1 的 pom.xml 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;groupId&gt;space.tiantsing&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;maven1&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>maven2 的 pom.xml 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;groupId&gt;space.tiantsing&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;maven2&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;space.tiantsing&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;maven1&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>然后，我们在 maven2 项目中新建一个 xml 文件，pomAutom.xml 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;groupId&gt;space.tiantsing&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;mavenAutom&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt; // 这里的打包方式必须为 pom</div><div class=\"line\"></div><div class=\"line\">    &lt;modules&gt;</div><div class=\"line\">        &lt;module&gt;../maven1&lt;/module&gt;</div><div class=\"line\">        &lt;module&gt;../maven2&lt;/module&gt;</div><div class=\"line\">    &lt;/modules&gt;</div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>这时，我们通过 cmd 进入到 maven2 项目 pom 文件所在的目录，执行命令 <code>mvn clean package -f pomAutom.xml</code> ,这时就会按照你在 pomAutom.xml 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;modules&gt;</div><div class=\"line\">        &lt;module&gt;../maven1&lt;/module&gt;</div><div class=\"line\">        &lt;module&gt;../maven2&lt;/module&gt;</div><div class=\"line\">    &lt;/modules&gt;</div></pre></td></tr></table></figure>\n<p>配置的顺序启动。</p>\n<p>DEMO路径：<a href=\"https://gitee.com/tsingtian/MavenDependTemplate.git\" target=\"_blank\" rel=\"external\">MavenDependTemplate</a></p>\n","excerpt":"<p><Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br><strong>多个maven项目启动顺序</strong></Excerpt></p>","more":"<p><The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></The></p>\n<p>#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>\n<h1 id=\"多个maven项目启动顺序\"><a href=\"#多个maven项目启动顺序\" class=\"headerlink\" title=\"多个maven项目启动顺序\"></a>多个maven项目启动顺序</h1><h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>在公司实际项目中，开发的项目一般都会涉及到多个 maven 项目，比如项目2会依赖项目1。使用 Jenkins 实现自动部署时，除了写一个流水线脚本时，就需要找一个合适的 maven 命令脚本解决。</p>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>现在有两个 Maven 工程，maven1 和 maven2 ，maven2 依赖于 maven1 。maven1 的 pom 文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 </div><div class=\"line\">   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; </div><div class=\"line\">   </div><div class=\"line\">   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; </div><div class=\"line\">   &lt;groupId&gt;bus-core-api&lt;/groupId&gt; </div><div class=\"line\">   &lt;artifactId&gt;bus-core-api&lt;/artifactId&gt; </div><div class=\"line\">   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; </div><div class=\"line\">   &lt;packaging&gt;jar&lt;/packaging&gt; </div><div class=\"line\">   &lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>maven2 的pom文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 </div><div class=\"line\">   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; </div><div class=\"line\">   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; </div><div class=\"line\">   &lt;groupId&gt;app-desktop-ui&lt;/groupId&gt; </div><div class=\"line\">   &lt;artifactId&gt;app-desktop-ui&lt;/artifactId&gt; </div><div class=\"line\">   &lt;version&gt;1.0&lt;/version&gt; </div><div class=\"line\">   &lt;packaging&gt;jar&lt;/packaging&gt; </div><div class=\"line\">   &lt;dependencies&gt; </div><div class=\"line\">    &lt;dependency&gt; </div><div class=\"line\">        &lt;groupId&gt;bus-core-api&lt;/groupId&gt; </div><div class=\"line\">        &lt;artifactId&gt;bus-core-api&lt;/artifactId&gt; </div><div class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; </div><div class=\"line\">    &lt;/dependency&gt; </div><div class=\"line\">  &lt;/dependencies&gt; </div><div class=\"line\">  &lt;/project&gt;</div></pre></td></tr></table></figure>\n<p><strong>在平时我们打包的时候，是对maven1项目先执行 maven install ，然后再对maven2 项目执行 maven clean package。<br>有没有一种方法可以实现：我直接对maven2进行打包操作，它会自动的先对maven2依赖的项目先进行install，然后再对maven2进行打包？</strong></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>首先有两个 maven 项目，maven1 和 maven2 。其中 maven2 依赖于 maven1.</p>\n<p>这时，maven1 的 pom.xml 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;groupId&gt;space.tiantsing&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;maven1&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>maven2 的 pom.xml 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;groupId&gt;space.tiantsing&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;maven2&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;space.tiantsing&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;maven1&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>然后，我们在 maven2 项目中新建一个 xml 文件，pomAutom.xml 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;groupId&gt;space.tiantsing&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;mavenAutom&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt; // 这里的打包方式必须为 pom</div><div class=\"line\"></div><div class=\"line\">    &lt;modules&gt;</div><div class=\"line\">        &lt;module&gt;../maven1&lt;/module&gt;</div><div class=\"line\">        &lt;module&gt;../maven2&lt;/module&gt;</div><div class=\"line\">    &lt;/modules&gt;</div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>这时，我们通过 cmd 进入到 maven2 项目 pom 文件所在的目录，执行命令 <code>mvn clean package -f pomAutom.xml</code> ,这时就会按照你在 pomAutom.xml 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;modules&gt;</div><div class=\"line\">        &lt;module&gt;../maven1&lt;/module&gt;</div><div class=\"line\">        &lt;module&gt;../maven2&lt;/module&gt;</div><div class=\"line\">    &lt;/modules&gt;</div></pre></td></tr></table></figure>\n<p>配置的顺序启动。</p>\n<p>DEMO路径：<a href=\"https://gitee.com/tsingtian/MavenDependTemplate.git\">MavenDependTemplate</a></p>"},{"title":"常用\"工具\"配置","date":"2017-07-30T06:44:56.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n>（2017-03-24）本博文主要介绍一些工具安装后对环境变量的配置，本来不打算写这种博文的，这种博文在网上一搜一大把，但网络资源鱼龙混杂，有的教程可能并不适合自己的环境，所以就写了这样一篇环境配置的博文，既然写了，那以后再遇到环境配置的问题还会继续添加，如有错误，欢迎大家指出，谢谢！\n>\n>（2017-07-30）为了自己记录的方便，本文章不在单独的只对类如JDK、Tomact这样的工具做环境变量配置的记录，同时增加对开发学习中遇到的一些方法库的使用如何配置使用做记录。\n\n*<p style=\"color:red;\">转载请注明：转载于Terry Tian的博客（[www.mutouspace.cn](www.mutouspace.cn)）!</p>*\n\ndate: 2017-03-24 17:34:56\n \n-  JDK的环境变量配置\n-  Tomcat的环境变量配置\n-  JSP 标准标签库（JSTL）\n-  Maven安装配置\n \n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n**<p style=\"color:blue;\">大家既然想找的是如何配置环境变量，那读者一定知道软件是如何下载、如何安装的，所以本文中就不再过多的介绍下载和安装过程了，重点记录一下环境变量的配置。</p>** \n**作者环境：Windows 10 X64**\n\n# JDK的环境变量配置 #\n\n- 新建JAVA_HOME\n- 新建CLASSPATH\n- 编辑PATH\n\n第一步：“我的电脑” -> 右击 -> “属性” -> “高级系统设置” -> “环境变量”;\n\n![](http://olg3gwtbm.bkt.clouddn.com/01.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/02.png)\n\n第二步：新建JAVA_HOME  里边填入jdk的绝对地址： **E:\\JAVA\\jdk**   <p style=\"color:red;\">注意：最后不要加分号！！！！</p>\n\n![](http://olg3gwtbm.bkt.clouddn.com/03.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/04.png)\n\n第三步：新建CLASSPATH  内容为： **.;%JAVA_HOME%\\lib;**  <p style=\"color:red;\">注意：不要忘记前面的“ .; ”！！！！</p>\n\n![](http://olg3gwtbm.bkt.clouddn.com/05.png)\n\n第四步：编辑PATH       新加入： **%JAVA_HOME%\\bin;**   <p style=\"color:red;\">注意：每个路径之间都有分号！！！！</p>\n\n![](http://olg3gwtbm.bkt.clouddn.com/06.png)\n\n第五步：在控制台页面分别输入 “java” “javac” “java -version” 做测试\n\n![](http://olg3gwtbm.bkt.clouddn.com/08.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/09.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/10.png)\n\n\n# Tomcat的环境变量配置 #\n\n1. 新建变量名：CATALINA_BASE，变量值：E:\\tomcat\n2. 新建变量名：CATALINA_HOME，变量值：E:\\tomcat\n3. 打开PATH，添加变量值：%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;\n\n有了JDK环境变量配置的经验，我相信大家对配置都已经轻车熟路了，这里就不配图了。\n\n最后一步：\n\n 在CMD命令下输入命令：`startup`，出现如下对话框，表明服务启动成功。\n\n![](http://olg3gwtbm.bkt.clouddn.com/11.png)\n\n# JSP 标准标签库（JSTL） #\n\nJSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。具体详细介绍请各位读者自行Google或者百度，这里不做赘述。\n\n**JSTL 库安装** \n\n**安装步骤如下：**\n\n1. 从Apache的标准标签库中下载的二进包(jakarta-taglibs-standard-current.zip)。\n\n    官方下载地址：[http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/](http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/)\n\n2. 下载jakarta-taglibs-standard-1.1.2.zip 包并解压，将jakarta-taglibs-standard-1.1.2/lib/下的两个jar文件：standard.jar和jstl.jar文件拷贝到/WEB-INF/lib/下。\n3. 接下来我们在 web.xml 文件中添加以下配置：\n\n        <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <web-app version=\"2.4\" \n        xmlns=\"http://java.sun.com/xml/ns/j2ee\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \n        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n    \t    <jsp-config>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/fmt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/fmt.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/fmt-rt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/fmt-rt.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/core</taglib-uri>\n    \t    <taglib-location>/WEB-INF/c.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/core-rt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/c-rt.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/sql</taglib-uri>\n    \t    <taglib-location>/WEB-INF/sql.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/sql-rt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/sql-rt.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/x</taglib-uri>\n    \t    <taglib-location>/WEB-INF/x.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/x-rt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/x-rt.tld</taglib-location>\n    \t    </taglib>\n    \t    </jsp-config>\n        </web-app>\n\n4. 接下来就是在JSP文件中具体的使用了，使用方法不做赘述。\n\n# Maven安装配置 #\n\n> Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。\n> Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。\n\n    Maven主要有两个功能：\n    1、项目构建\n    2、依赖管理\n\n**安装配置步骤如下：**\n\n1. 下载maven\n\n    官方网站：[http://maven.apache.org](http://maven.apache.org)\n\n    具体应该使用那个版本做开发：1.公司中以公司要求选择；2个人开发、学习时依据个人的喜好选择。\n\n    Maven是使用java开发，需要安装jdk1.6以上，推荐使用1.7\n\n2. \tMaven的安装\n\n    第一步：安装jdk，要求1.6或以上版本。如何安装JDK与配置环境变量请参考本文中的JDK环境变量配置一节。\n\n    第二步：把maven解压缩，解压目录最好不要有中文。\n    \n    ![](http://olg3gwtbm.bkt.clouddn.com/maven1.png)\n\n    第三步：配置环境变量MAVEN_HOME\n    \n    ![](http://olg3gwtbm.bkt.clouddn.com/maven2.png)\n\n    第四步：配置环境变量PATH，将%MAVEN_HOME%\\bin加入Path中，在Windows中一定要注意要用分号；与其他值隔开。\n\n    ![](http://olg3gwtbm.bkt.clouddn.com/maven3.png)\n\n    第五步：验证是否安装成功，打开cmd窗口，输入mvn –v\n\n    ![](http://olg3gwtbm.bkt.clouddn.com/maven4.png)\n\n3. \tMaven的配置\n\n    Maven有两个settings.xml配置文件，一个是全局配置文件，一个是用户配置文件。\n\n    一、全局配置（默认）\n    %MAVEN_HOME%/conf/settings.xml 是maven全局的配置文件。\n    该配置文件中配置了本地仓库的路径，默认就是：~/.m2/repository。其中~表示当前用户路径C:\\Users\\[UserName]。\n    \n    ![](http://olg3gwtbm.bkt.clouddn.com/maven5.png)\n    \n    二、用户配置\n\n    ~/.m2/settings.xml是用户的配置文件（默认没有该文件，需要将全局配置文件拷贝过来在进行修改）\n\n    注意：一般本地仓库的地址不使用默认配置，通常情况下需要在用户配置中，配置新的仓库地址。\n\n    **配置步骤如下：**\n\n    第一步：创建一个本地仓库目录，比如G:\\TMavenPro\\repository。\n\n    第二步：复制maven的全局配置文件到~/.m2目录下，即创建用户配置文件\n\n    第三步：修改maven的用户配置文件。\n    \n    ![](http://olg3gwtbm.bkt.clouddn.com/maven6.png)\n\n    > 注意：\n    > 用户级别的仓库在全局配置中一旦设置，全局配置将不再生效，转用用户所设置的仓库，否则使用全局配置文件中的默认路径仓库。\n\n4. Maven在eclipse中的使用\n\n   第一步：查看eclipse中是否有maven插件,没有的话可以谷歌一下如何下载安装；\n   \n   ![](http://olg3gwtbm.bkt.clouddn.com/maven9.png)\n\n   第二步：设置maven安装目录\n   \n   ![](http://olg3gwtbm.bkt.clouddn.com/maven7.png)\n\n  第三步：设置用户配置\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/maven8.png)","source":"_posts/常用工具的环境变量配置.md","raw":"---\ntitle: 常用\"工具\"配置\ndate: 2017-07-30 14:44:56\ncategories: 工具 #文章文类\ntags: 工具配置\n\n---\n\n<Excerpt in index | 首页摘要>\n\n>（2017-03-24）本博文主要介绍一些工具安装后对环境变量的配置，本来不打算写这种博文的，这种博文在网上一搜一大把，但网络资源鱼龙混杂，有的教程可能并不适合自己的环境，所以就写了这样一篇环境配置的博文，既然写了，那以后再遇到环境配置的问题还会继续添加，如有错误，欢迎大家指出，谢谢！\n>\n>（2017-07-30）为了自己记录的方便，本文章不在单独的只对类如JDK、Tomact这样的工具做环境变量配置的记录，同时增加对开发学习中遇到的一些方法库的使用如何配置使用做记录。\n\n*<p style=\"color:red;\">转载请注明：转载于Terry Tian的博客（[www.mutouspace.cn](www.mutouspace.cn)）!</p>*\n\ndate: 2017-03-24 17:34:56\n \n-  JDK的环境变量配置\n-  Tomcat的环境变量配置\n-  JSP 标准标签库（JSTL）\n-  Maven安装配置\n \n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n**<p style=\"color:blue;\">大家既然想找的是如何配置环境变量，那读者一定知道软件是如何下载、如何安装的，所以本文中就不再过多的介绍下载和安装过程了，重点记录一下环境变量的配置。</p>** \n**作者环境：Windows 10 X64**\n\n# JDK的环境变量配置 #\n\n- 新建JAVA_HOME\n- 新建CLASSPATH\n- 编辑PATH\n\n第一步：“我的电脑” -> 右击 -> “属性” -> “高级系统设置” -> “环境变量”;\n\n![](http://olg3gwtbm.bkt.clouddn.com/01.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/02.png)\n\n第二步：新建JAVA_HOME  里边填入jdk的绝对地址： **E:\\JAVA\\jdk**   <p style=\"color:red;\">注意：最后不要加分号！！！！</p>\n\n![](http://olg3gwtbm.bkt.clouddn.com/03.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/04.png)\n\n第三步：新建CLASSPATH  内容为： **.;%JAVA_HOME%\\lib;**  <p style=\"color:red;\">注意：不要忘记前面的“ .; ”！！！！</p>\n\n![](http://olg3gwtbm.bkt.clouddn.com/05.png)\n\n第四步：编辑PATH       新加入： **%JAVA_HOME%\\bin;**   <p style=\"color:red;\">注意：每个路径之间都有分号！！！！</p>\n\n![](http://olg3gwtbm.bkt.clouddn.com/06.png)\n\n第五步：在控制台页面分别输入 “java” “javac” “java -version” 做测试\n\n![](http://olg3gwtbm.bkt.clouddn.com/08.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/09.png)\n\n![](http://olg3gwtbm.bkt.clouddn.com/10.png)\n\n\n# Tomcat的环境变量配置 #\n\n1. 新建变量名：CATALINA_BASE，变量值：E:\\tomcat\n2. 新建变量名：CATALINA_HOME，变量值：E:\\tomcat\n3. 打开PATH，添加变量值：%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;\n\n有了JDK环境变量配置的经验，我相信大家对配置都已经轻车熟路了，这里就不配图了。\n\n最后一步：\n\n 在CMD命令下输入命令：`startup`，出现如下对话框，表明服务启动成功。\n\n![](http://olg3gwtbm.bkt.clouddn.com/11.png)\n\n# JSP 标准标签库（JSTL） #\n\nJSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。具体详细介绍请各位读者自行Google或者百度，这里不做赘述。\n\n**JSTL 库安装** \n\n**安装步骤如下：**\n\n1. 从Apache的标准标签库中下载的二进包(jakarta-taglibs-standard-current.zip)。\n\n    官方下载地址：[http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/](http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/)\n\n2. 下载jakarta-taglibs-standard-1.1.2.zip 包并解压，将jakarta-taglibs-standard-1.1.2/lib/下的两个jar文件：standard.jar和jstl.jar文件拷贝到/WEB-INF/lib/下。\n3. 接下来我们在 web.xml 文件中添加以下配置：\n\n        <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <web-app version=\"2.4\" \n        xmlns=\"http://java.sun.com/xml/ns/j2ee\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \n        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n    \t    <jsp-config>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/fmt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/fmt.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/fmt-rt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/fmt-rt.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/core</taglib-uri>\n    \t    <taglib-location>/WEB-INF/c.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/core-rt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/c-rt.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/sql</taglib-uri>\n    \t    <taglib-location>/WEB-INF/sql.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/sql-rt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/sql-rt.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/x</taglib-uri>\n    \t    <taglib-location>/WEB-INF/x.tld</taglib-location>\n    \t    </taglib>\n    \t    <taglib>\n    \t    <taglib-uri>http://java.sun.com/jstl/x-rt</taglib-uri>\n    \t    <taglib-location>/WEB-INF/x-rt.tld</taglib-location>\n    \t    </taglib>\n    \t    </jsp-config>\n        </web-app>\n\n4. 接下来就是在JSP文件中具体的使用了，使用方法不做赘述。\n\n# Maven安装配置 #\n\n> Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。\n> Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。\n\n    Maven主要有两个功能：\n    1、项目构建\n    2、依赖管理\n\n**安装配置步骤如下：**\n\n1. 下载maven\n\n    官方网站：[http://maven.apache.org](http://maven.apache.org)\n\n    具体应该使用那个版本做开发：1.公司中以公司要求选择；2个人开发、学习时依据个人的喜好选择。\n\n    Maven是使用java开发，需要安装jdk1.6以上，推荐使用1.7\n\n2. \tMaven的安装\n\n    第一步：安装jdk，要求1.6或以上版本。如何安装JDK与配置环境变量请参考本文中的JDK环境变量配置一节。\n\n    第二步：把maven解压缩，解压目录最好不要有中文。\n    \n    ![](http://olg3gwtbm.bkt.clouddn.com/maven1.png)\n\n    第三步：配置环境变量MAVEN_HOME\n    \n    ![](http://olg3gwtbm.bkt.clouddn.com/maven2.png)\n\n    第四步：配置环境变量PATH，将%MAVEN_HOME%\\bin加入Path中，在Windows中一定要注意要用分号；与其他值隔开。\n\n    ![](http://olg3gwtbm.bkt.clouddn.com/maven3.png)\n\n    第五步：验证是否安装成功，打开cmd窗口，输入mvn –v\n\n    ![](http://olg3gwtbm.bkt.clouddn.com/maven4.png)\n\n3. \tMaven的配置\n\n    Maven有两个settings.xml配置文件，一个是全局配置文件，一个是用户配置文件。\n\n    一、全局配置（默认）\n    %MAVEN_HOME%/conf/settings.xml 是maven全局的配置文件。\n    该配置文件中配置了本地仓库的路径，默认就是：~/.m2/repository。其中~表示当前用户路径C:\\Users\\[UserName]。\n    \n    ![](http://olg3gwtbm.bkt.clouddn.com/maven5.png)\n    \n    二、用户配置\n\n    ~/.m2/settings.xml是用户的配置文件（默认没有该文件，需要将全局配置文件拷贝过来在进行修改）\n\n    注意：一般本地仓库的地址不使用默认配置，通常情况下需要在用户配置中，配置新的仓库地址。\n\n    **配置步骤如下：**\n\n    第一步：创建一个本地仓库目录，比如G:\\TMavenPro\\repository。\n\n    第二步：复制maven的全局配置文件到~/.m2目录下，即创建用户配置文件\n\n    第三步：修改maven的用户配置文件。\n    \n    ![](http://olg3gwtbm.bkt.clouddn.com/maven6.png)\n\n    > 注意：\n    > 用户级别的仓库在全局配置中一旦设置，全局配置将不再生效，转用用户所设置的仓库，否则使用全局配置文件中的默认路径仓库。\n\n4. Maven在eclipse中的使用\n\n   第一步：查看eclipse中是否有maven插件,没有的话可以谷歌一下如何下载安装；\n   \n   ![](http://olg3gwtbm.bkt.clouddn.com/maven9.png)\n\n   第二步：设置maven安装目录\n   \n   ![](http://olg3gwtbm.bkt.clouddn.com/maven7.png)\n\n  第三步：设置用户配置\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/maven8.png)","slug":"常用工具的环境变量配置","published":1,"updated":"2018-07-01T13:41:32.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6x3002164xtr433j5bt","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>（2017-03-24）本博文主要介绍一些工具安装后对环境变量的配置，本来不打算写这种博文的，这种博文在网上一搜一大把，但网络资源鱼龙混杂，有的教程可能并不适合自己的环境，所以就写了这样一篇环境配置的博文，既然写了，那以后再遇到环境配置的问题还会继续添加，如有错误，欢迎大家指出，谢谢！</p>\n<p>（2017-07-30）为了自己记录的方便，本文章不在单独的只对类如JDK、Tomact这样的工具做环境变量配置的记录，同时增加对开发学习中遇到的一些方法库的使用如何配置使用做记录。</p>\n</blockquote>\n<p><em><p style=\"color:red;\">转载请注明：转载于Terry Tian的博客（<a href=\"www.mutouspace.cn\">www.mutouspace.cn</a>）!</p></em></p>\n<p>date: 2017-03-24 17:34:56</p>\n<ul>\n<li>JDK的环境变量配置</li>\n<li>Tomcat的环境变量配置</li>\n<li>JSP 标准标签库（JSTL）</li>\n<li>Maven安装配置</li>\n</ul>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p><strong><p style=\"color:blue;\">大家既然想找的是如何配置环境变量，那读者一定知道软件是如何下载、如何安装的，所以本文中就不再过多的介绍下载和安装过程了，重点记录一下环境变量的配置。</p></strong><br><strong>作者环境：Windows 10 X64</strong></p>\n<h1 id=\"JDK的环境变量配置\"><a href=\"#JDK的环境变量配置\" class=\"headerlink\" title=\"JDK的环境变量配置\"></a>JDK的环境变量配置</h1><ul>\n<li>新建JAVA_HOME</li>\n<li>新建CLASSPATH</li>\n<li>编辑PATH</li>\n</ul>\n<p>第一步：“我的电脑” -&gt; 右击 -&gt; “属性” -&gt; “高级系统设置” -&gt; “环境变量”;</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/01.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/02.png\" alt=\"\"></p>\n<p>第二步：新建JAVA_HOME  里边填入jdk的绝对地址： <strong>E:\\JAVA\\jdk</strong>   </p><p style=\"color:red;\">注意：最后不要加分号！！！！</p><p></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/03.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/04.png\" alt=\"\"></p>\n<p>第三步：新建CLASSPATH  内容为： <strong>.;%JAVA_HOME%\\lib;</strong>  </p><p style=\"color:red;\">注意：不要忘记前面的“ .; ”！！！！</p><p></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/05.png\" alt=\"\"></p>\n<p>第四步：编辑PATH       新加入： <strong>%JAVA_HOME%\\bin;</strong>   </p><p style=\"color:red;\">注意：每个路径之间都有分号！！！！</p><p></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/06.png\" alt=\"\"></p>\n<p>第五步：在控制台页面分别输入 “java” “javac” “java -version” 做测试</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/08.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/09.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/10.png\" alt=\"\"></p>\n<h1 id=\"Tomcat的环境变量配置\"><a href=\"#Tomcat的环境变量配置\" class=\"headerlink\" title=\"Tomcat的环境变量配置\"></a>Tomcat的环境变量配置</h1><ol>\n<li>新建变量名：CATALINA_BASE，变量值：E:\\tomcat</li>\n<li>新建变量名：CATALINA_HOME，变量值：E:\\tomcat</li>\n<li>打开PATH，添加变量值：%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;</li>\n</ol>\n<p>有了JDK环境变量配置的经验，我相信大家对配置都已经轻车熟路了，这里就不配图了。</p>\n<p>最后一步：</p>\n<p> 在CMD命令下输入命令：<code>startup</code>，出现如下对话框，表明服务启动成功。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/11.png\" alt=\"\"></p>\n<h1 id=\"JSP-标准标签库（JSTL）\"><a href=\"#JSP-标准标签库（JSTL）\" class=\"headerlink\" title=\"JSP 标准标签库（JSTL）\"></a>JSP 标准标签库（JSTL）</h1><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。具体详细介绍请各位读者自行Google或者百度，这里不做赘述。</p>\n<p><strong>JSTL 库安装</strong> </p>\n<p><strong>安装步骤如下：</strong></p>\n<ol>\n<li><p>从Apache的标准标签库中下载的二进包(jakarta-taglibs-standard-current.zip)。</p>\n<p> 官方下载地址：<a href=\"http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/\" target=\"_blank\" rel=\"external\">http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/</a></p>\n</li>\n<li><p>下载jakarta-taglibs-standard-1.1.2.zip 包并解压，将jakarta-taglibs-standard-1.1.2/lib/下的两个jar文件：standard.jar和jstl.jar文件拷贝到/WEB-INF/lib/下。</p>\n</li>\n<li><p>接下来我们在 web.xml 文件中添加以下配置：</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app version=&quot;2.4&quot; \nxmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; \nxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\nxsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee \nhttp://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;\n    &lt;jsp-config&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/fmt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/fmt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/fmt-rt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/fmt-rt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/core&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/c.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/core-rt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/c-rt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/sql&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/sql.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/sql-rt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/sql-rt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/x&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/x.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/x-rt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/x-rt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;/jsp-config&gt;\n&lt;/web-app&gt;\n</code></pre></li>\n<li><p>接下来就是在JSP文件中具体的使用了，使用方法不做赘述。</p>\n</li>\n</ol>\n<h1 id=\"Maven安装配置\"><a href=\"#Maven安装配置\" class=\"headerlink\" title=\"Maven安装配置\"></a>Maven安装配置</h1><blockquote>\n<p>Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。<br>Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。</p>\n</blockquote>\n<pre><code>Maven主要有两个功能：\n1、项目构建\n2、依赖管理\n</code></pre><p><strong>安装配置步骤如下：</strong></p>\n<ol>\n<li><p>下载maven</p>\n<p> 官方网站：<a href=\"http://maven.apache.org\" target=\"_blank\" rel=\"external\">http://maven.apache.org</a></p>\n<p> 具体应该使用那个版本做开发：1.公司中以公司要求选择；2个人开发、学习时依据个人的喜好选择。</p>\n<p> Maven是使用java开发，需要安装jdk1.6以上，推荐使用1.7</p>\n</li>\n<li><p>Maven的安装</p>\n<p>第一步：安装jdk，要求1.6或以上版本。如何安装JDK与配置环境变量请参考本文中的JDK环境变量配置一节。</p>\n<p>第二步：把maven解压缩，解压目录最好不要有中文。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven1.png\" alt=\"\"></p>\n<p>第三步：配置环境变量MAVEN_HOME</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven2.png\" alt=\"\"></p>\n<p>第四步：配置环境变量PATH，将%MAVEN_HOME%\\bin加入Path中，在Windows中一定要注意要用分号；与其他值隔开。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven3.png\" alt=\"\"></p>\n<p>第五步：验证是否安装成功，打开cmd窗口，输入mvn –v</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven4.png\" alt=\"\"></p>\n</li>\n<li><p>Maven的配置</p>\n<p>Maven有两个settings.xml配置文件，一个是全局配置文件，一个是用户配置文件。</p>\n<p>一、全局配置（默认）<br>%MAVEN_HOME%/conf/settings.xml 是maven全局的配置文件。<br>该配置文件中配置了本地仓库的路径，默认就是：~/.m2/repository。其中~表示当前用户路径C:\\Users[UserName]。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven5.png\" alt=\"\"></p>\n<p>二、用户配置</p>\n<p>~/.m2/settings.xml是用户的配置文件（默认没有该文件，需要将全局配置文件拷贝过来在进行修改）</p>\n<p>注意：一般本地仓库的地址不使用默认配置，通常情况下需要在用户配置中，配置新的仓库地址。</p>\n<p><strong>配置步骤如下：</strong></p>\n<p>第一步：创建一个本地仓库目录，比如G:\\TMavenPro\\repository。</p>\n<p>第二步：复制maven的全局配置文件到~/.m2目录下，即创建用户配置文件</p>\n<p>第三步：修改maven的用户配置文件。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven6.png\" alt=\"\"></p>\n<blockquote>\n<p>注意：<br>用户级别的仓库在全局配置中一旦设置，全局配置将不再生效，转用用户所设置的仓库，否则使用全局配置文件中的默认路径仓库。</p>\n</blockquote>\n</li>\n<li><p>Maven在eclipse中的使用</p>\n<p>第一步：查看eclipse中是否有maven插件,没有的话可以谷歌一下如何下载安装；</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven9.png\" alt=\"\"></p>\n<p>第二步：设置maven安装目录</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven7.png\" alt=\"\"></p>\n<p>第三步：设置用户配置</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven8.png\" alt=\"\"></p>\n</li>\n</ol>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>（2017-03-24）本博文主要介绍一些工具安装后对环境变量的配置，本来不打算写这种博文的，这种博文在网上一搜一大把，但网络资源鱼龙混杂，有的教程可能并不适合自己的环境，所以就写了这样一篇环境配置的博文，既然写了，那以后再遇到环境配置的问题还会继续添加，如有错误，欢迎大家指出，谢谢！</p>\n<p>（2017-07-30）为了自己记录的方便，本文章不在单独的只对类如JDK、Tomact这样的工具做环境变量配置的记录，同时增加对开发学习中遇到的一些方法库的使用如何配置使用做记录。</p>\n</blockquote>\n<p><em><p style=\"color:red;\">转载请注明：转载于Terry Tian的博客（<a href=\"www.mutouspace.cn\">www.mutouspace.cn</a>）!</p></em></p>\n<p>date: 2017-03-24 17:34:56</p>\n<ul>\n<li>JDK的环境变量配置</li>\n<li>Tomcat的环境变量配置</li>\n<li>JSP 标准标签库（JSTL）</li>\n<li>Maven安装配置</li>\n</ul></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p><strong><p style=\"color:blue;\">大家既然想找的是如何配置环境变量，那读者一定知道软件是如何下载、如何安装的，所以本文中就不再过多的介绍下载和安装过程了，重点记录一下环境变量的配置。</p></strong><br><strong>作者环境：Windows 10 X64</strong></p>\n<h1 id=\"JDK的环境变量配置\"><a href=\"#JDK的环境变量配置\" class=\"headerlink\" title=\"JDK的环境变量配置\"></a>JDK的环境变量配置</h1><ul>\n<li>新建JAVA_HOME</li>\n<li>新建CLASSPATH</li>\n<li>编辑PATH</li>\n</ul>\n<p>第一步：“我的电脑” -&gt; 右击 -&gt; “属性” -&gt; “高级系统设置” -&gt; “环境变量”;</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/01.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/02.png\" alt=\"\"></p>\n<p>第二步：新建JAVA_HOME  里边填入jdk的绝对地址： <strong>E:\\JAVA\\jdk</strong>   </p><p style=\"color:red;\">注意：最后不要加分号！！！！</p><p></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/03.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/04.png\" alt=\"\"></p>\n<p>第三步：新建CLASSPATH  内容为： <strong>.;%JAVA_HOME%\\lib;</strong>  </p><p style=\"color:red;\">注意：不要忘记前面的“ .; ”！！！！</p><p></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/05.png\" alt=\"\"></p>\n<p>第四步：编辑PATH       新加入： <strong>%JAVA_HOME%\\bin;</strong>   </p><p style=\"color:red;\">注意：每个路径之间都有分号！！！！</p><p></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/06.png\" alt=\"\"></p>\n<p>第五步：在控制台页面分别输入 “java” “javac” “java -version” 做测试</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/08.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/09.png\" alt=\"\"></p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/10.png\" alt=\"\"></p>\n<h1 id=\"Tomcat的环境变量配置\"><a href=\"#Tomcat的环境变量配置\" class=\"headerlink\" title=\"Tomcat的环境变量配置\"></a>Tomcat的环境变量配置</h1><ol>\n<li>新建变量名：CATALINA_BASE，变量值：E:\\tomcat</li>\n<li>新建变量名：CATALINA_HOME，变量值：E:\\tomcat</li>\n<li>打开PATH，添加变量值：%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;</li>\n</ol>\n<p>有了JDK环境变量配置的经验，我相信大家对配置都已经轻车熟路了，这里就不配图了。</p>\n<p>最后一步：</p>\n<p> 在CMD命令下输入命令：<code>startup</code>，出现如下对话框，表明服务启动成功。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/11.png\" alt=\"\"></p>\n<h1 id=\"JSP-标准标签库（JSTL）\"><a href=\"#JSP-标准标签库（JSTL）\" class=\"headerlink\" title=\"JSP 标准标签库（JSTL）\"></a>JSP 标准标签库（JSTL）</h1><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。具体详细介绍请各位读者自行Google或者百度，这里不做赘述。</p>\n<p><strong>JSTL 库安装</strong> </p>\n<p><strong>安装步骤如下：</strong></p>\n<ol>\n<li><p>从Apache的标准标签库中下载的二进包(jakarta-taglibs-standard-current.zip)。</p>\n<p> 官方下载地址：<a href=\"http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/\">http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/</a></p>\n</li>\n<li><p>下载jakarta-taglibs-standard-1.1.2.zip 包并解压，将jakarta-taglibs-standard-1.1.2/lib/下的两个jar文件：standard.jar和jstl.jar文件拷贝到/WEB-INF/lib/下。</p>\n</li>\n<li><p>接下来我们在 web.xml 文件中添加以下配置：</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app version=&quot;2.4&quot; \nxmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; \nxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\nxsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee \nhttp://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;\n    &lt;jsp-config&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/fmt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/fmt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/fmt-rt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/fmt-rt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/core&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/c.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/core-rt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/c-rt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/sql&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/sql.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/sql-rt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/sql-rt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/x&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/x.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;taglib&gt;\n    &lt;taglib-uri&gt;http://java.sun.com/jstl/x-rt&lt;/taglib-uri&gt;\n    &lt;taglib-location&gt;/WEB-INF/x-rt.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n    &lt;/jsp-config&gt;\n&lt;/web-app&gt;\n</code></pre></li>\n<li><p>接下来就是在JSP文件中具体的使用了，使用方法不做赘述。</p>\n</li>\n</ol>\n<h1 id=\"Maven安装配置\"><a href=\"#Maven安装配置\" class=\"headerlink\" title=\"Maven安装配置\"></a>Maven安装配置</h1><blockquote>\n<p>Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。<br>Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。</p>\n</blockquote>\n<pre><code>Maven主要有两个功能：\n1、项目构建\n2、依赖管理\n</code></pre><p><strong>安装配置步骤如下：</strong></p>\n<ol>\n<li><p>下载maven</p>\n<p> 官方网站：<a href=\"http://maven.apache.org\">http://maven.apache.org</a></p>\n<p> 具体应该使用那个版本做开发：1.公司中以公司要求选择；2个人开发、学习时依据个人的喜好选择。</p>\n<p> Maven是使用java开发，需要安装jdk1.6以上，推荐使用1.7</p>\n</li>\n<li><p>Maven的安装</p>\n<p>第一步：安装jdk，要求1.6或以上版本。如何安装JDK与配置环境变量请参考本文中的JDK环境变量配置一节。</p>\n<p>第二步：把maven解压缩，解压目录最好不要有中文。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven1.png\" alt=\"\"></p>\n<p>第三步：配置环境变量MAVEN_HOME</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven2.png\" alt=\"\"></p>\n<p>第四步：配置环境变量PATH，将%MAVEN_HOME%\\bin加入Path中，在Windows中一定要注意要用分号；与其他值隔开。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven3.png\" alt=\"\"></p>\n<p>第五步：验证是否安装成功，打开cmd窗口，输入mvn –v</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven4.png\" alt=\"\"></p>\n</li>\n<li><p>Maven的配置</p>\n<p>Maven有两个settings.xml配置文件，一个是全局配置文件，一个是用户配置文件。</p>\n<p>一、全局配置（默认）<br>%MAVEN_HOME%/conf/settings.xml 是maven全局的配置文件。<br>该配置文件中配置了本地仓库的路径，默认就是：~/.m2/repository。其中~表示当前用户路径C:\\Users[UserName]。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven5.png\" alt=\"\"></p>\n<p>二、用户配置</p>\n<p>~/.m2/settings.xml是用户的配置文件（默认没有该文件，需要将全局配置文件拷贝过来在进行修改）</p>\n<p>注意：一般本地仓库的地址不使用默认配置，通常情况下需要在用户配置中，配置新的仓库地址。</p>\n<p><strong>配置步骤如下：</strong></p>\n<p>第一步：创建一个本地仓库目录，比如G:\\TMavenPro\\repository。</p>\n<p>第二步：复制maven的全局配置文件到~/.m2目录下，即创建用户配置文件</p>\n<p>第三步：修改maven的用户配置文件。</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven6.png\" alt=\"\"></p>\n<blockquote>\n<p>注意：<br>用户级别的仓库在全局配置中一旦设置，全局配置将不再生效，转用用户所设置的仓库，否则使用全局配置文件中的默认路径仓库。</p>\n</blockquote>\n</li>\n<li><p>Maven在eclipse中的使用</p>\n<p>第一步：查看eclipse中是否有maven插件,没有的话可以谷歌一下如何下载安装；</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven9.png\" alt=\"\"></p>\n<p>第二步：设置maven安装目录</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven7.png\" alt=\"\"></p>\n<p>第三步：设置用户配置</p>\n<p><img src=\"http://olg3gwtbm.bkt.clouddn.com/maven8.png\" alt=\"\"></p>\n</li>\n</ol></The>"},{"title":"常用的专业搜索工具（分类)","date":"2017-03-24T09:34:09.000Z","_content":"\n<Excerpt in index | 首页摘要>\n\n\n> 本文基于大家日常上网的需要，分类整理了不同检索需求的工具，\n主要包括：电子书、图片、网盘、音乐、工作机会以及商品价格检索。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n## 一、电子书检索 ##\n1、[鸠摩搜书](https://www.jiumodiary.com/ \"鸠摩搜书\")\n\n\n![鸠摩搜书](http://i.imgur.com/jJG97pv.png)\n鸠摩搜书是一款非常棒的电子书搜索引擎。有了它，你可以轻易发现其他站点上的电子书资源。这样可以省去很多时间。\n\n2、[BOOKZZ](http://bookzz.org/ \"bookzz\")/[Library Genesis](http://sur.ly/o/gen.lib.rus.ec/AA000014 \"Library Genesis\")\n\n值得一提的是，这两个网站都可以不用翻墙，所以墙里的同学，也可以享受到来自世界的福利。\n\n这两款可以说是英文教材资源站的神器了。\n\n基本上，你想要的，它俩都能给你。\n\n其他的电子书资源站点收录如下（含国内和国外）：\n\n1、[电子书网站汇总](http://www.oxingtui.com/other/resource.htm \"电子书网站汇总\")\n\n注：这个是电子书资源汇总终极站，资源丰富的丧心病狂！\n\n## 二、图片检索 ##\n1、[多搜搜：www.duososo.com](http://www.duososo.com/ \"多搜搜：www.duososo.com\")\n\n2、[原寸画像检索：gensun.org](http://gensun.org/ \"原寸画像检索：gensun.org\")\n\n3、[incogna：www.incogna.com](http://www.incogna.com/#random \"incogna：www.incogna.com\")\n\n4、[百度识图](http://image.baidu.com/?fr=shitu \"百度识图\")  支持一下百度同学，毕竟国产\n\n## 三、网盘资源检索：##\n1、[胖次搜索](http://www.panc.cc/ \"胖次搜索\")\n\n![胖次搜索](http://i.imgur.com/SgbBgny.png)\n\n胖次搜索是一个很有意思的网盘资源搜索引擎，可以解析被吞的百度云分享链接。\n\n2、[百度网盘搜索](http://so.baiduyun.me/ \"百度网盘搜索\")\n\n百度网盘是比百度本身更靠谱的搜索工具。\n\n其他的网盘搜索引擎收录如下：\n\n1、[盘搜：www.pansou.com](http://www.pansou.com \"盘搜：www.pansou.com\")\n\n2、[西林街：www.xilinjie.com](http://www.xilinjie.com \"西林街：www.xilinjie.com\")\n\n3、[盘易搜：panyisou.com](http://panyisou.com \"盘易搜：panyisou.com\")\n\n4、[麦库搜索：www.baidu10.net](http://www.baidu10.net \"麦库搜索：www.baidu10.net\")\n\n5、[云搜：www.daysou.com](http://www.daysou.com \"云搜：www.daysou.com\")\n\n6、[找文件：www.zhaofile.com](http://www.zhaofile.com \"找文件：www.zhaofile.com\")\n\n7、[360搜网盘www.360swp.com](http://www.360swp.com \"360搜网盘www.360swp.com\")\n\n8、[尝鲜搜索：search.likebeta.com](http://search.likebeta.com \"尝鲜搜索：search.likebeta.com\")\n\n9、[吸盘：so.xpan.me/index.html](http://so.xpan.me/index.html \"吸盘：so.xpan.me/index.html\")\n\n10、[去转盘：www.quzhuanpan.com](http://www.quzhuanpan.com \"去转盘：www.quzhuanpan.com\")\n\n## 四、音乐检索##\n作为网易云的忠实拥簇，一般来说，刷刷评论区，随机听一听FM，再收一收网易的推荐，基本上我的音乐边界就可以触到了。\n\n然而，对于那些视音乐为生命的乐迷来说，世界上的好音乐总是不嫌多的。\n\n有什么办法可以找到更丰富的音乐资源，享受更极致的音乐体验呢？\n\n下面的音乐检索工具，相信你一定不会错过。\n\n1、[Listen 1 音乐播放器](http://listen1.github.io/listen1/ \"Listen 1 音乐播放器\")\n\n![Listen 1 音乐播放器](http://i.imgur.com/jLoy1vw.png)\n\nListen 1是一款搜索与播放来自网易云音乐，虾米，QQ音乐三个主流音乐网站的曲库软件。\n\n这款软件的作用不言而喻，可以帮你减少在不同音乐站点搜索资源的时间花费。\n\n软件本身支持windows、linux、MAC以及chrome和firefox的插件。\n\n对多平台的支持，大大提高了普适性。\n\n其他的音乐搜索工具收录如下：\n\n1、[Last.fm](http://www.last.fm/zh/ \"Last.fm\") - 通过网上最大的音乐库收听免费音乐、观赏精彩视频\n\n2、[www.midomi.com](http://www.midomi.com \"www.midomi.com\")\n\n3、[www.bored.com](http://www.bored.com \"www.bored.com\")\n\n4、[www.sogua.com](http://www.sogua.com \"www.sogua.com\")\n\n## 五、职位搜索引擎##\n按理说，职位搜索引擎是一个鸡肋般的存在。\n\n因为国内的一些主流的招聘网站，基本上能够满足我们的需求。\n\n智联、前程自不必说，拉勾、脉脉、boss直聘、猎聘、领英等，基本上就可以搞定我们的95%网络求职的需求。\n\n一些垂着的，比如topys、站酷、秒聘，甚至水木社区招聘、itpub、豆瓣招聘小组等，都可以获得丰富的招聘机会。\n\n因此机会从来不缺，但是我们缺一个获取机会的最快捷径。\n\n这时候，一款合适的搜索引擎工具，就显得尤为重要了。\n\n下面来分享几款较好的搜索引擎工具。\n\n1、百度招聘\n\n通过职位关键词，你可以找到大量的国内主流招聘网站发布的求职机会。\n\n比如，前程、智联、拉勾、boss直聘等。\n\n这样做的好处是明显的，不用疲于奔命，可以有效降低时间成本。\n\n2、伯益 ：www.boryi.com\n\n## 六、价格检索##\n现在市场上的产品信息实在是太多太杂。\n\n因为缺乏一个共同的标准，所以我们在购物的时候，总是满怀感叹：为什么同一件商品会有不同的价格。\n\n这里面除了促销、进货成本的因素，平台本身也是一个很大的影响因子。\n\n为了消除价格信息不对称引起的无效浪费，\n\n我们需要一些有用的比价工具。\n\n下面就是一些有效的比价网站。\n\n1、[比一比价](http://www.b1bj.com/ \"比一比价\")\n\n比一比价网是一款非常不错的购物价格搜索引擎。\n\n主要检索各个购物网站同类商品的价格。比如京东、天猫、1号店、亚马逊、当当等。\n\n网站主要支持关键词搜索，可以横向对比商品在各渠道的价格分布。\n\n图书比价功能也很不错，堪比枣书。\n\n2、[历史价格检索](http://www.xitie.com/ \"历史价格检索\")\n\n西贴真是一个神奇的网站。\n\n作为一个商品历史价格查询器，西贴可以监控到某个商品的历史价格分布。\n\n细心观察网站提供的价格变化曲线，我们可以发现一些不为察觉的价格猫腻。\n\n若是放在双十一前后，大家是不是会忍住剁手的欲望？\n\n其他的价格检索收录如下：\n\n1、[Tangou：www.tangou.cn](http://www.tangou.cn \"Tangou：www.tangou.cn\")\n\n2、[寻购网：go.xungou.com](http://go.xungou.com \"寻购网：go.xungou.com\")\n\n3、[惠惠网 ：www.huihui.cn](http://www.huihui.cn \"惠惠网 ：www.huihui.cn\")\n\n# 写在最后：#\n\n----------------------------\n\n ** 适合自己的才是最好的！**","source":"_posts/常用的专业搜索工具（分类.md","raw":"---\ntitle: 常用的专业搜索工具（分类)\ndate: 2017-03-24 17:34:09\ncategories: 分享 #文章文类\ntags: 分享\n\n---\n\n<Excerpt in index | 首页摘要>\n\n\n> 本文基于大家日常上网的需要，分类整理了不同检索需求的工具，\n主要包括：电子书、图片、网盘、音乐、工作机会以及商品价格检索。\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n## 一、电子书检索 ##\n1、[鸠摩搜书](https://www.jiumodiary.com/ \"鸠摩搜书\")\n\n\n![鸠摩搜书](http://i.imgur.com/jJG97pv.png)\n鸠摩搜书是一款非常棒的电子书搜索引擎。有了它，你可以轻易发现其他站点上的电子书资源。这样可以省去很多时间。\n\n2、[BOOKZZ](http://bookzz.org/ \"bookzz\")/[Library Genesis](http://sur.ly/o/gen.lib.rus.ec/AA000014 \"Library Genesis\")\n\n值得一提的是，这两个网站都可以不用翻墙，所以墙里的同学，也可以享受到来自世界的福利。\n\n这两款可以说是英文教材资源站的神器了。\n\n基本上，你想要的，它俩都能给你。\n\n其他的电子书资源站点收录如下（含国内和国外）：\n\n1、[电子书网站汇总](http://www.oxingtui.com/other/resource.htm \"电子书网站汇总\")\n\n注：这个是电子书资源汇总终极站，资源丰富的丧心病狂！\n\n## 二、图片检索 ##\n1、[多搜搜：www.duososo.com](http://www.duososo.com/ \"多搜搜：www.duososo.com\")\n\n2、[原寸画像检索：gensun.org](http://gensun.org/ \"原寸画像检索：gensun.org\")\n\n3、[incogna：www.incogna.com](http://www.incogna.com/#random \"incogna：www.incogna.com\")\n\n4、[百度识图](http://image.baidu.com/?fr=shitu \"百度识图\")  支持一下百度同学，毕竟国产\n\n## 三、网盘资源检索：##\n1、[胖次搜索](http://www.panc.cc/ \"胖次搜索\")\n\n![胖次搜索](http://i.imgur.com/SgbBgny.png)\n\n胖次搜索是一个很有意思的网盘资源搜索引擎，可以解析被吞的百度云分享链接。\n\n2、[百度网盘搜索](http://so.baiduyun.me/ \"百度网盘搜索\")\n\n百度网盘是比百度本身更靠谱的搜索工具。\n\n其他的网盘搜索引擎收录如下：\n\n1、[盘搜：www.pansou.com](http://www.pansou.com \"盘搜：www.pansou.com\")\n\n2、[西林街：www.xilinjie.com](http://www.xilinjie.com \"西林街：www.xilinjie.com\")\n\n3、[盘易搜：panyisou.com](http://panyisou.com \"盘易搜：panyisou.com\")\n\n4、[麦库搜索：www.baidu10.net](http://www.baidu10.net \"麦库搜索：www.baidu10.net\")\n\n5、[云搜：www.daysou.com](http://www.daysou.com \"云搜：www.daysou.com\")\n\n6、[找文件：www.zhaofile.com](http://www.zhaofile.com \"找文件：www.zhaofile.com\")\n\n7、[360搜网盘www.360swp.com](http://www.360swp.com \"360搜网盘www.360swp.com\")\n\n8、[尝鲜搜索：search.likebeta.com](http://search.likebeta.com \"尝鲜搜索：search.likebeta.com\")\n\n9、[吸盘：so.xpan.me/index.html](http://so.xpan.me/index.html \"吸盘：so.xpan.me/index.html\")\n\n10、[去转盘：www.quzhuanpan.com](http://www.quzhuanpan.com \"去转盘：www.quzhuanpan.com\")\n\n## 四、音乐检索##\n作为网易云的忠实拥簇，一般来说，刷刷评论区，随机听一听FM，再收一收网易的推荐，基本上我的音乐边界就可以触到了。\n\n然而，对于那些视音乐为生命的乐迷来说，世界上的好音乐总是不嫌多的。\n\n有什么办法可以找到更丰富的音乐资源，享受更极致的音乐体验呢？\n\n下面的音乐检索工具，相信你一定不会错过。\n\n1、[Listen 1 音乐播放器](http://listen1.github.io/listen1/ \"Listen 1 音乐播放器\")\n\n![Listen 1 音乐播放器](http://i.imgur.com/jLoy1vw.png)\n\nListen 1是一款搜索与播放来自网易云音乐，虾米，QQ音乐三个主流音乐网站的曲库软件。\n\n这款软件的作用不言而喻，可以帮你减少在不同音乐站点搜索资源的时间花费。\n\n软件本身支持windows、linux、MAC以及chrome和firefox的插件。\n\n对多平台的支持，大大提高了普适性。\n\n其他的音乐搜索工具收录如下：\n\n1、[Last.fm](http://www.last.fm/zh/ \"Last.fm\") - 通过网上最大的音乐库收听免费音乐、观赏精彩视频\n\n2、[www.midomi.com](http://www.midomi.com \"www.midomi.com\")\n\n3、[www.bored.com](http://www.bored.com \"www.bored.com\")\n\n4、[www.sogua.com](http://www.sogua.com \"www.sogua.com\")\n\n## 五、职位搜索引擎##\n按理说，职位搜索引擎是一个鸡肋般的存在。\n\n因为国内的一些主流的招聘网站，基本上能够满足我们的需求。\n\n智联、前程自不必说，拉勾、脉脉、boss直聘、猎聘、领英等，基本上就可以搞定我们的95%网络求职的需求。\n\n一些垂着的，比如topys、站酷、秒聘，甚至水木社区招聘、itpub、豆瓣招聘小组等，都可以获得丰富的招聘机会。\n\n因此机会从来不缺，但是我们缺一个获取机会的最快捷径。\n\n这时候，一款合适的搜索引擎工具，就显得尤为重要了。\n\n下面来分享几款较好的搜索引擎工具。\n\n1、百度招聘\n\n通过职位关键词，你可以找到大量的国内主流招聘网站发布的求职机会。\n\n比如，前程、智联、拉勾、boss直聘等。\n\n这样做的好处是明显的，不用疲于奔命，可以有效降低时间成本。\n\n2、伯益 ：www.boryi.com\n\n## 六、价格检索##\n现在市场上的产品信息实在是太多太杂。\n\n因为缺乏一个共同的标准，所以我们在购物的时候，总是满怀感叹：为什么同一件商品会有不同的价格。\n\n这里面除了促销、进货成本的因素，平台本身也是一个很大的影响因子。\n\n为了消除价格信息不对称引起的无效浪费，\n\n我们需要一些有用的比价工具。\n\n下面就是一些有效的比价网站。\n\n1、[比一比价](http://www.b1bj.com/ \"比一比价\")\n\n比一比价网是一款非常不错的购物价格搜索引擎。\n\n主要检索各个购物网站同类商品的价格。比如京东、天猫、1号店、亚马逊、当当等。\n\n网站主要支持关键词搜索，可以横向对比商品在各渠道的价格分布。\n\n图书比价功能也很不错，堪比枣书。\n\n2、[历史价格检索](http://www.xitie.com/ \"历史价格检索\")\n\n西贴真是一个神奇的网站。\n\n作为一个商品历史价格查询器，西贴可以监控到某个商品的历史价格分布。\n\n细心观察网站提供的价格变化曲线，我们可以发现一些不为察觉的价格猫腻。\n\n若是放在双十一前后，大家是不是会忍住剁手的欲望？\n\n其他的价格检索收录如下：\n\n1、[Tangou：www.tangou.cn](http://www.tangou.cn \"Tangou：www.tangou.cn\")\n\n2、[寻购网：go.xungou.com](http://go.xungou.com \"寻购网：go.xungou.com\")\n\n3、[惠惠网 ：www.huihui.cn](http://www.huihui.cn \"惠惠网 ：www.huihui.cn\")\n\n# 写在最后：#\n\n----------------------------\n\n ** 适合自己的才是最好的！**","slug":"常用的专业搜索工具（分类","published":1,"updated":"2017-03-24T11:16:24.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6x7002364xtcc7nhzvu","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n<blockquote>\n<p>本文基于大家日常上网的需要，分类整理了不同检索需求的工具，<br>主要包括：电子书、图片、网盘、音乐、工作机会以及商品价格检索。</p>\n</blockquote>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h2 id=\"一、电子书检索\"><a href=\"#一、电子书检索\" class=\"headerlink\" title=\"一、电子书检索\"></a>一、电子书检索</h2><p>1、<a href=\"https://www.jiumodiary.com/\" title=\"鸠摩搜书\" target=\"_blank\" rel=\"external\">鸠摩搜书</a></p>\n<p><img src=\"http://i.imgur.com/jJG97pv.png\" alt=\"鸠摩搜书\"><br>鸠摩搜书是一款非常棒的电子书搜索引擎。有了它，你可以轻易发现其他站点上的电子书资源。这样可以省去很多时间。</p>\n<p>2、<a href=\"http://bookzz.org/\" title=\"bookzz\" target=\"_blank\" rel=\"external\">BOOKZZ</a>/<a href=\"http://sur.ly/o/gen.lib.rus.ec/AA000014\" title=\"Library Genesis\" target=\"_blank\" rel=\"external\">Library Genesis</a></p>\n<p>值得一提的是，这两个网站都可以不用翻墙，所以墙里的同学，也可以享受到来自世界的福利。</p>\n<p>这两款可以说是英文教材资源站的神器了。</p>\n<p>基本上，你想要的，它俩都能给你。</p>\n<p>其他的电子书资源站点收录如下（含国内和国外）：</p>\n<p>1、<a href=\"http://www.oxingtui.com/other/resource.htm\" title=\"电子书网站汇总\" target=\"_blank\" rel=\"external\">电子书网站汇总</a></p>\n<p>注：这个是电子书资源汇总终极站，资源丰富的丧心病狂！</p>\n<h2 id=\"二、图片检索\"><a href=\"#二、图片检索\" class=\"headerlink\" title=\"二、图片检索\"></a>二、图片检索</h2><p>1、<a href=\"http://www.duososo.com/\" title=\"多搜搜：www.duososo.com\" target=\"_blank\" rel=\"external\">多搜搜：www.duososo.com</a></p>\n<p>2、<a href=\"http://gensun.org/\" title=\"原寸画像检索：gensun.org\" target=\"_blank\" rel=\"external\">原寸画像检索：gensun.org</a></p>\n<p>3、<a href=\"http://www.incogna.com/#random\" title=\"incogna：www.incogna.com\" target=\"_blank\" rel=\"external\">incogna：www.incogna.com</a></p>\n<p>4、<a href=\"http://image.baidu.com/?fr=shitu\" title=\"百度识图\" target=\"_blank\" rel=\"external\">百度识图</a>  支持一下百度同学，毕竟国产</p>\n<h2 id=\"三、网盘资源检索：\"><a href=\"#三、网盘资源检索：\" class=\"headerlink\" title=\"三、网盘资源检索：\"></a>三、网盘资源检索：</h2><p>1、<a href=\"http://www.panc.cc/\" title=\"胖次搜索\" target=\"_blank\" rel=\"external\">胖次搜索</a></p>\n<p><img src=\"http://i.imgur.com/SgbBgny.png\" alt=\"胖次搜索\"></p>\n<p>胖次搜索是一个很有意思的网盘资源搜索引擎，可以解析被吞的百度云分享链接。</p>\n<p>2、<a href=\"http://so.baiduyun.me/\" title=\"百度网盘搜索\" target=\"_blank\" rel=\"external\">百度网盘搜索</a></p>\n<p>百度网盘是比百度本身更靠谱的搜索工具。</p>\n<p>其他的网盘搜索引擎收录如下：</p>\n<p>1、<a href=\"http://www.pansou.com\" title=\"盘搜：www.pansou.com\" target=\"_blank\" rel=\"external\">盘搜：www.pansou.com</a></p>\n<p>2、<a href=\"http://www.xilinjie.com\" title=\"西林街：www.xilinjie.com\" target=\"_blank\" rel=\"external\">西林街：www.xilinjie.com</a></p>\n<p>3、<a href=\"http://panyisou.com\" title=\"盘易搜：panyisou.com\" target=\"_blank\" rel=\"external\">盘易搜：panyisou.com</a></p>\n<p>4、<a href=\"http://www.baidu10.net\" title=\"麦库搜索：www.baidu10.net\" target=\"_blank\" rel=\"external\">麦库搜索：www.baidu10.net</a></p>\n<p>5、<a href=\"http://www.daysou.com\" title=\"云搜：www.daysou.com\" target=\"_blank\" rel=\"external\">云搜：www.daysou.com</a></p>\n<p>6、<a href=\"http://www.zhaofile.com\" title=\"找文件：www.zhaofile.com\" target=\"_blank\" rel=\"external\">找文件：www.zhaofile.com</a></p>\n<p>7、<a href=\"http://www.360swp.com\" title=\"360搜网盘www.360swp.com\" target=\"_blank\" rel=\"external\">360搜网盘www.360swp.com</a></p>\n<p>8、<a href=\"http://search.likebeta.com\" title=\"尝鲜搜索：search.likebeta.com\" target=\"_blank\" rel=\"external\">尝鲜搜索：search.likebeta.com</a></p>\n<p>9、<a href=\"http://so.xpan.me/index.html\" title=\"吸盘：so.xpan.me/index.html\" target=\"_blank\" rel=\"external\">吸盘：so.xpan.me/index.html</a></p>\n<p>10、<a href=\"http://www.quzhuanpan.com\" title=\"去转盘：www.quzhuanpan.com\" target=\"_blank\" rel=\"external\">去转盘：www.quzhuanpan.com</a></p>\n<h2 id=\"四、音乐检索\"><a href=\"#四、音乐检索\" class=\"headerlink\" title=\"四、音乐检索\"></a>四、音乐检索</h2><p>作为网易云的忠实拥簇，一般来说，刷刷评论区，随机听一听FM，再收一收网易的推荐，基本上我的音乐边界就可以触到了。</p>\n<p>然而，对于那些视音乐为生命的乐迷来说，世界上的好音乐总是不嫌多的。</p>\n<p>有什么办法可以找到更丰富的音乐资源，享受更极致的音乐体验呢？</p>\n<p>下面的音乐检索工具，相信你一定不会错过。</p>\n<p>1、<a href=\"http://listen1.github.io/listen1/\" title=\"Listen 1 音乐播放器\" target=\"_blank\" rel=\"external\">Listen 1 音乐播放器</a></p>\n<p><img src=\"http://i.imgur.com/jLoy1vw.png\" alt=\"Listen 1 音乐播放器\"></p>\n<p>Listen 1是一款搜索与播放来自网易云音乐，虾米，QQ音乐三个主流音乐网站的曲库软件。</p>\n<p>这款软件的作用不言而喻，可以帮你减少在不同音乐站点搜索资源的时间花费。</p>\n<p>软件本身支持windows、linux、MAC以及chrome和firefox的插件。</p>\n<p>对多平台的支持，大大提高了普适性。</p>\n<p>其他的音乐搜索工具收录如下：</p>\n<p>1、<a href=\"http://www.last.fm/zh/\" title=\"Last.fm\" target=\"_blank\" rel=\"external\">Last.fm</a> - 通过网上最大的音乐库收听免费音乐、观赏精彩视频</p>\n<p>2、<a href=\"http://www.midomi.com\" title=\"www.midomi.com\" target=\"_blank\" rel=\"external\">www.midomi.com</a></p>\n<p>3、<a href=\"http://www.bored.com\" title=\"www.bored.com\" target=\"_blank\" rel=\"external\">www.bored.com</a></p>\n<p>4、<a href=\"http://www.sogua.com\" title=\"www.sogua.com\" target=\"_blank\" rel=\"external\">www.sogua.com</a></p>\n<h2 id=\"五、职位搜索引擎\"><a href=\"#五、职位搜索引擎\" class=\"headerlink\" title=\"五、职位搜索引擎\"></a>五、职位搜索引擎</h2><p>按理说，职位搜索引擎是一个鸡肋般的存在。</p>\n<p>因为国内的一些主流的招聘网站，基本上能够满足我们的需求。</p>\n<p>智联、前程自不必说，拉勾、脉脉、boss直聘、猎聘、领英等，基本上就可以搞定我们的95%网络求职的需求。</p>\n<p>一些垂着的，比如topys、站酷、秒聘，甚至水木社区招聘、itpub、豆瓣招聘小组等，都可以获得丰富的招聘机会。</p>\n<p>因此机会从来不缺，但是我们缺一个获取机会的最快捷径。</p>\n<p>这时候，一款合适的搜索引擎工具，就显得尤为重要了。</p>\n<p>下面来分享几款较好的搜索引擎工具。</p>\n<p>1、百度招聘</p>\n<p>通过职位关键词，你可以找到大量的国内主流招聘网站发布的求职机会。</p>\n<p>比如，前程、智联、拉勾、boss直聘等。</p>\n<p>这样做的好处是明显的，不用疲于奔命，可以有效降低时间成本。</p>\n<p>2、伯益 ：www.boryi.com</p>\n<h2 id=\"六、价格检索\"><a href=\"#六、价格检索\" class=\"headerlink\" title=\"六、价格检索\"></a>六、价格检索</h2><p>现在市场上的产品信息实在是太多太杂。</p>\n<p>因为缺乏一个共同的标准，所以我们在购物的时候，总是满怀感叹：为什么同一件商品会有不同的价格。</p>\n<p>这里面除了促销、进货成本的因素，平台本身也是一个很大的影响因子。</p>\n<p>为了消除价格信息不对称引起的无效浪费，</p>\n<p>我们需要一些有用的比价工具。</p>\n<p>下面就是一些有效的比价网站。</p>\n<p>1、<a href=\"http://www.b1bj.com/\" title=\"比一比价\" target=\"_blank\" rel=\"external\">比一比价</a></p>\n<p>比一比价网是一款非常不错的购物价格搜索引擎。</p>\n<p>主要检索各个购物网站同类商品的价格。比如京东、天猫、1号店、亚马逊、当当等。</p>\n<p>网站主要支持关键词搜索，可以横向对比商品在各渠道的价格分布。</p>\n<p>图书比价功能也很不错，堪比枣书。</p>\n<p>2、<a href=\"http://www.xitie.com/\" title=\"历史价格检索\" target=\"_blank\" rel=\"external\">历史价格检索</a></p>\n<p>西贴真是一个神奇的网站。</p>\n<p>作为一个商品历史价格查询器，西贴可以监控到某个商品的历史价格分布。</p>\n<p>细心观察网站提供的价格变化曲线，我们可以发现一些不为察觉的价格猫腻。</p>\n<p>若是放在双十一前后，大家是不是会忍住剁手的欲望？</p>\n<p>其他的价格检索收录如下：</p>\n<p>1、<a href=\"http://www.tangou.cn\" title=\"Tangou：www.tangou.cn\" target=\"_blank\" rel=\"external\">Tangou：www.tangou.cn</a></p>\n<p>2、<a href=\"http://go.xungou.com\" title=\"寻购网：go.xungou.com\" target=\"_blank\" rel=\"external\">寻购网：go.xungou.com</a></p>\n<p>3、<a href=\"http://www.huihui.cn\" title=\"惠惠网 ：www.huihui.cn\" target=\"_blank\" rel=\"external\">惠惠网 ：www.huihui.cn</a></p>\n<h1 id=\"写在最后：\"><a href=\"#写在最后：\" class=\"headerlink\" title=\"写在最后：\"></a>写在最后：</h1><hr>\n<p> <strong> 适合自己的才是最好的！</strong></p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n\n<blockquote>\n<p>本文基于大家日常上网的需要，分类整理了不同检索需求的工具，<br>主要包括：电子书、图片、网盘、音乐、工作机会以及商品价格检索。</p>\n</blockquote></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h2 id=\"一、电子书检索\"><a href=\"#一、电子书检索\" class=\"headerlink\" title=\"一、电子书检索\"></a>一、电子书检索</h2><p>1、<a href=\"https://www.jiumodiary.com/\" title=\"鸠摩搜书\">鸠摩搜书</a></p>\n<p><img src=\"http://i.imgur.com/jJG97pv.png\" alt=\"鸠摩搜书\"><br>鸠摩搜书是一款非常棒的电子书搜索引擎。有了它，你可以轻易发现其他站点上的电子书资源。这样可以省去很多时间。</p>\n<p>2、<a href=\"http://bookzz.org/\" title=\"bookzz\">BOOKZZ</a>/<a href=\"http://sur.ly/o/gen.lib.rus.ec/AA000014\" title=\"Library Genesis\">Library Genesis</a></p>\n<p>值得一提的是，这两个网站都可以不用翻墙，所以墙里的同学，也可以享受到来自世界的福利。</p>\n<p>这两款可以说是英文教材资源站的神器了。</p>\n<p>基本上，你想要的，它俩都能给你。</p>\n<p>其他的电子书资源站点收录如下（含国内和国外）：</p>\n<p>1、<a href=\"http://www.oxingtui.com/other/resource.htm\" title=\"电子书网站汇总\">电子书网站汇总</a></p>\n<p>注：这个是电子书资源汇总终极站，资源丰富的丧心病狂！</p>\n<h2 id=\"二、图片检索\"><a href=\"#二、图片检索\" class=\"headerlink\" title=\"二、图片检索\"></a>二、图片检索</h2><p>1、<a href=\"http://www.duososo.com/\" title=\"多搜搜：www.duososo.com\">多搜搜：www.duososo.com</a></p>\n<p>2、<a href=\"http://gensun.org/\" title=\"原寸画像检索：gensun.org\">原寸画像检索：gensun.org</a></p>\n<p>3、<a href=\"http://www.incogna.com/#random\" title=\"incogna：www.incogna.com\">incogna：www.incogna.com</a></p>\n<p>4、<a href=\"http://image.baidu.com/?fr=shitu\" title=\"百度识图\">百度识图</a>  支持一下百度同学，毕竟国产</p>\n<h2 id=\"三、网盘资源检索：\"><a href=\"#三、网盘资源检索：\" class=\"headerlink\" title=\"三、网盘资源检索：\"></a>三、网盘资源检索：</h2><p>1、<a href=\"http://www.panc.cc/\" title=\"胖次搜索\">胖次搜索</a></p>\n<p><img src=\"http://i.imgur.com/SgbBgny.png\" alt=\"胖次搜索\"></p>\n<p>胖次搜索是一个很有意思的网盘资源搜索引擎，可以解析被吞的百度云分享链接。</p>\n<p>2、<a href=\"http://so.baiduyun.me/\" title=\"百度网盘搜索\">百度网盘搜索</a></p>\n<p>百度网盘是比百度本身更靠谱的搜索工具。</p>\n<p>其他的网盘搜索引擎收录如下：</p>\n<p>1、<a href=\"http://www.pansou.com\" title=\"盘搜：www.pansou.com\">盘搜：www.pansou.com</a></p>\n<p>2、<a href=\"http://www.xilinjie.com\" title=\"西林街：www.xilinjie.com\">西林街：www.xilinjie.com</a></p>\n<p>3、<a href=\"http://panyisou.com\" title=\"盘易搜：panyisou.com\">盘易搜：panyisou.com</a></p>\n<p>4、<a href=\"http://www.baidu10.net\" title=\"麦库搜索：www.baidu10.net\">麦库搜索：www.baidu10.net</a></p>\n<p>5、<a href=\"http://www.daysou.com\" title=\"云搜：www.daysou.com\">云搜：www.daysou.com</a></p>\n<p>6、<a href=\"http://www.zhaofile.com\" title=\"找文件：www.zhaofile.com\">找文件：www.zhaofile.com</a></p>\n<p>7、<a href=\"http://www.360swp.com\" title=\"360搜网盘www.360swp.com\">360搜网盘www.360swp.com</a></p>\n<p>8、<a href=\"http://search.likebeta.com\" title=\"尝鲜搜索：search.likebeta.com\">尝鲜搜索：search.likebeta.com</a></p>\n<p>9、<a href=\"http://so.xpan.me/index.html\" title=\"吸盘：so.xpan.me/index.html\">吸盘：so.xpan.me/index.html</a></p>\n<p>10、<a href=\"http://www.quzhuanpan.com\" title=\"去转盘：www.quzhuanpan.com\">去转盘：www.quzhuanpan.com</a></p>\n<h2 id=\"四、音乐检索\"><a href=\"#四、音乐检索\" class=\"headerlink\" title=\"四、音乐检索\"></a>四、音乐检索</h2><p>作为网易云的忠实拥簇，一般来说，刷刷评论区，随机听一听FM，再收一收网易的推荐，基本上我的音乐边界就可以触到了。</p>\n<p>然而，对于那些视音乐为生命的乐迷来说，世界上的好音乐总是不嫌多的。</p>\n<p>有什么办法可以找到更丰富的音乐资源，享受更极致的音乐体验呢？</p>\n<p>下面的音乐检索工具，相信你一定不会错过。</p>\n<p>1、<a href=\"http://listen1.github.io/listen1/\" title=\"Listen 1 音乐播放器\">Listen 1 音乐播放器</a></p>\n<p><img src=\"http://i.imgur.com/jLoy1vw.png\" alt=\"Listen 1 音乐播放器\"></p>\n<p>Listen 1是一款搜索与播放来自网易云音乐，虾米，QQ音乐三个主流音乐网站的曲库软件。</p>\n<p>这款软件的作用不言而喻，可以帮你减少在不同音乐站点搜索资源的时间花费。</p>\n<p>软件本身支持windows、linux、MAC以及chrome和firefox的插件。</p>\n<p>对多平台的支持，大大提高了普适性。</p>\n<p>其他的音乐搜索工具收录如下：</p>\n<p>1、<a href=\"http://www.last.fm/zh/\" title=\"Last.fm\">Last.fm</a> - 通过网上最大的音乐库收听免费音乐、观赏精彩视频</p>\n<p>2、<a href=\"http://www.midomi.com\" title=\"www.midomi.com\">www.midomi.com</a></p>\n<p>3、<a href=\"http://www.bored.com\" title=\"www.bored.com\">www.bored.com</a></p>\n<p>4、<a href=\"http://www.sogua.com\" title=\"www.sogua.com\">www.sogua.com</a></p>\n<h2 id=\"五、职位搜索引擎\"><a href=\"#五、职位搜索引擎\" class=\"headerlink\" title=\"五、职位搜索引擎\"></a>五、职位搜索引擎</h2><p>按理说，职位搜索引擎是一个鸡肋般的存在。</p>\n<p>因为国内的一些主流的招聘网站，基本上能够满足我们的需求。</p>\n<p>智联、前程自不必说，拉勾、脉脉、boss直聘、猎聘、领英等，基本上就可以搞定我们的95%网络求职的需求。</p>\n<p>一些垂着的，比如topys、站酷、秒聘，甚至水木社区招聘、itpub、豆瓣招聘小组等，都可以获得丰富的招聘机会。</p>\n<p>因此机会从来不缺，但是我们缺一个获取机会的最快捷径。</p>\n<p>这时候，一款合适的搜索引擎工具，就显得尤为重要了。</p>\n<p>下面来分享几款较好的搜索引擎工具。</p>\n<p>1、百度招聘</p>\n<p>通过职位关键词，你可以找到大量的国内主流招聘网站发布的求职机会。</p>\n<p>比如，前程、智联、拉勾、boss直聘等。</p>\n<p>这样做的好处是明显的，不用疲于奔命，可以有效降低时间成本。</p>\n<p>2、伯益 ：www.boryi.com</p>\n<h2 id=\"六、价格检索\"><a href=\"#六、价格检索\" class=\"headerlink\" title=\"六、价格检索\"></a>六、价格检索</h2><p>现在市场上的产品信息实在是太多太杂。</p>\n<p>因为缺乏一个共同的标准，所以我们在购物的时候，总是满怀感叹：为什么同一件商品会有不同的价格。</p>\n<p>这里面除了促销、进货成本的因素，平台本身也是一个很大的影响因子。</p>\n<p>为了消除价格信息不对称引起的无效浪费，</p>\n<p>我们需要一些有用的比价工具。</p>\n<p>下面就是一些有效的比价网站。</p>\n<p>1、<a href=\"http://www.b1bj.com/\" title=\"比一比价\">比一比价</a></p>\n<p>比一比价网是一款非常不错的购物价格搜索引擎。</p>\n<p>主要检索各个购物网站同类商品的价格。比如京东、天猫、1号店、亚马逊、当当等。</p>\n<p>网站主要支持关键词搜索，可以横向对比商品在各渠道的价格分布。</p>\n<p>图书比价功能也很不错，堪比枣书。</p>\n<p>2、<a href=\"http://www.xitie.com/\" title=\"历史价格检索\">历史价格检索</a></p>\n<p>西贴真是一个神奇的网站。</p>\n<p>作为一个商品历史价格查询器，西贴可以监控到某个商品的历史价格分布。</p>\n<p>细心观察网站提供的价格变化曲线，我们可以发现一些不为察觉的价格猫腻。</p>\n<p>若是放在双十一前后，大家是不是会忍住剁手的欲望？</p>\n<p>其他的价格检索收录如下：</p>\n<p>1、<a href=\"http://www.tangou.cn\" title=\"Tangou：www.tangou.cn\">Tangou：www.tangou.cn</a></p>\n<p>2、<a href=\"http://go.xungou.com\" title=\"寻购网：go.xungou.com\">寻购网：go.xungou.com</a></p>\n<p>3、<a href=\"http://www.huihui.cn\" title=\"惠惠网 ：www.huihui.cn\">惠惠网 ：www.huihui.cn</a></p>\n<h1 id=\"写在最后：\"><a href=\"#写在最后：\" class=\"headerlink\" title=\"写在最后：\"></a>写在最后：</h1><hr>\n<p> <strong> 适合自己的才是最好的！</strong></p></The>"},{"title":"软件分享篇（Windows10）","date":"2019-05-18T12:27:07.944Z","_content":"\n<Excerpt in index | 首页摘要>\n\n> 今晚有点晚了，就不撸代码了，决定把我电脑里常用的软件、工具分享给大家，这些软件真的很好用，不信你可以试一试！\n\n转载请注明：转载于Terry Tian的博客（[www.mutouspace.cn](www.mutouspace.cn)）!\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 安全杀毒： #\n\n   TT电脑里用的杀毒防护软件是Windows系统自带的**Windows Defender**，说实话，现在Windows自带的杀软已经很好了，具体好到哪，大家可以自行百度、google。软件界面简单、实用，还没有广告，界面如下：\n    \n   ![软件截图](http://olg3gwtbm.bkt.clouddn.com/Windowsdefender.PNG)\n\n   清理软件我用的是口碑很好的 [CCleaner](http://www.piriform.com/ccleaner),功能完全足够你使用了！截图如下：\n\n   ![CC](http://olg3gwtbm.bkt.clouddn.com/cc.PNG)\n\n   对于非一般的用户，特别是计算机专业的学生，真的不是很建议在电脑了安装些安全卫士、管家、毒霸等软件的！\n\n# 开发工具 #\n\n\n  **Android Studio**：对于这款软件大家一定都不陌生，特别是对于一位安卓开发人员，Google的亲儿子，好好享受吧！\n\n  **eclipse**：一款插件丰富的开发工具，java开发者用的挺多，以前也用于开发安卓，可惜Google生了个儿子。\n\n  \n  **SQLite Expert Personal**：一款可以查看数据表中数据的软件，安卓开发人员都值得拥有！\n\n# 系统工具 #  \n\n  **chrome：**好用的不能再好用的浏览器。插件丰富，但需要科学上网。\n             缺点就是在国内没法云备份自己的收藏夹。推荐大家可以在安装一款360极速浏览器、或者QQ浏览器来备份自己的收藏夹。\n\n  **MarkdownPad 2：**我认为这可能是Windows系统下最好用的markdown书写软件了，可以去[官网](http://markdownpad.com/)下载。\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/md.PNG)\n\n  **Seer**:是一款 Windows 下的文件预览工具，可以无需打开图片、音乐、视频、压缩包等文件就能预览到内容，只需点一下空格。[下载地址：http://www.appinn.com/seer-windows/](http://www.appinn.com/seer-windows/)。\n\n  **护眼宝：**是一款护眼的工具，[下载地址：http://www.huyanbao.com/#top](http://www.huyanbao.com/#top)。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/hyb.PNG)\n\n  **Clover:**[Clover](http://cn.ejie.me/) 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/clover.jpg)\n\n  \n  **ADSafe：**[ADSafe](http://www.newadblock.com/)是一款好用的广告屏蔽软件！\n\n  **HoneyView:**[HoneyView](https://www.bandisoft.com/honeyview/cn/)是一个支持多种格式的极速图像浏览器。 \n  她同时支持不解压浏览ZIP、RAR和7z压缩包中的图片。\n  她可以显示图片的GPS信息并在Google Maps中查看该地点，同时用户可以储存喜爱的照片。\n  \n**影音工具**\n\n  **网易云音乐（UWP）：**逼格漫漫的音乐播放器。\n\n  **Potplayer：**[PotPlayer](http://potplayer.daum.net/?lang=zh_CN)诚意满满的视频播放器。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/potp.PNG)\n\n# 下载工具 #\n\n  **IDM：**Internet Download Manager(简称“IDM”)是国外的一款下载工具，提升你的下载速度最多达5倍，安排下载时程，或续传一半的软件。Internet Download Manager的续传功能可以恢复因为断线、网络问题、计算机当机甚至无预警的停电导致下传到一半的软件。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/idm.PNG)\n\n  **EagleGet:**[EagleGet](http://www.eagleget.com/)（亦称 EG Download Accelerator）是一个用于 Windows 系统的下载管理器，它是免费软件。EagleGet 使用多线程技术，支持从Youtube、Dailymotion、Facebook、Vimeo等视频网站下载 MP4 和 FLV 格式视频。EagleGet 是一个拥有简洁界面和功能的免费的新下载管理器。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/eg.PNG)\n\n  **迅雷：**国内用户电脑中常备的下载软件，大多数网站也都支持迅雷下载。但我真的越来越讨厌迅雷了，不仅下载速度限速，界面也越来越复杂，广告还多，越来越丧失了一款下载软件的本心。\n\n  ***分享到这里就结束了，如果大家有什么疑问可以留言，有好的软件推荐给我，也可以留言，谢谢阅读！***","source":"_posts/软件分享篇.md","raw":"---\ntitle: 软件分享篇（Windows10）\ndate: 2017/3/2 星期四 下午 11:23:41 \ncategories: 分享 #文章文类\ntags: 分享\n\n---\n\n<Excerpt in index | 首页摘要>\n\n> 今晚有点晚了，就不撸代码了，决定把我电脑里常用的软件、工具分享给大家，这些软件真的很好用，不信你可以试一试！\n\n转载请注明：转载于Terry Tian的博客（[www.mutouspace.cn](www.mutouspace.cn)）!\n\n<!-- more --> \n\n<The rest of contents | 余下全文>\n\n# 安全杀毒： #\n\n   TT电脑里用的杀毒防护软件是Windows系统自带的**Windows Defender**，说实话，现在Windows自带的杀软已经很好了，具体好到哪，大家可以自行百度、google。软件界面简单、实用，还没有广告，界面如下：\n    \n   ![软件截图](http://olg3gwtbm.bkt.clouddn.com/Windowsdefender.PNG)\n\n   清理软件我用的是口碑很好的 [CCleaner](http://www.piriform.com/ccleaner),功能完全足够你使用了！截图如下：\n\n   ![CC](http://olg3gwtbm.bkt.clouddn.com/cc.PNG)\n\n   对于非一般的用户，特别是计算机专业的学生，真的不是很建议在电脑了安装些安全卫士、管家、毒霸等软件的！\n\n# 开发工具 #\n\n\n  **Android Studio**：对于这款软件大家一定都不陌生，特别是对于一位安卓开发人员，Google的亲儿子，好好享受吧！\n\n  **eclipse**：一款插件丰富的开发工具，java开发者用的挺多，以前也用于开发安卓，可惜Google生了个儿子。\n\n  \n  **SQLite Expert Personal**：一款可以查看数据表中数据的软件，安卓开发人员都值得拥有！\n\n# 系统工具 #  \n\n  **chrome：**好用的不能再好用的浏览器。插件丰富，但需要科学上网。\n             缺点就是在国内没法云备份自己的收藏夹。推荐大家可以在安装一款360极速浏览器、或者QQ浏览器来备份自己的收藏夹。\n\n  **MarkdownPad 2：**我认为这可能是Windows系统下最好用的markdown书写软件了，可以去[官网](http://markdownpad.com/)下载。\n\n   ![](http://olg3gwtbm.bkt.clouddn.com/md.PNG)\n\n  **Seer**:是一款 Windows 下的文件预览工具，可以无需打开图片、音乐、视频、压缩包等文件就能预览到内容，只需点一下空格。[下载地址：http://www.appinn.com/seer-windows/](http://www.appinn.com/seer-windows/)。\n\n  **护眼宝：**是一款护眼的工具，[下载地址：http://www.huyanbao.com/#top](http://www.huyanbao.com/#top)。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/hyb.PNG)\n\n  **Clover:**[Clover](http://cn.ejie.me/) 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/clover.jpg)\n\n  \n  **ADSafe：**[ADSafe](http://www.newadblock.com/)是一款好用的广告屏蔽软件！\n\n  **HoneyView:**[HoneyView](https://www.bandisoft.com/honeyview/cn/)是一个支持多种格式的极速图像浏览器。 \n  她同时支持不解压浏览ZIP、RAR和7z压缩包中的图片。\n  她可以显示图片的GPS信息并在Google Maps中查看该地点，同时用户可以储存喜爱的照片。\n  \n**影音工具**\n\n  **网易云音乐（UWP）：**逼格漫漫的音乐播放器。\n\n  **Potplayer：**[PotPlayer](http://potplayer.daum.net/?lang=zh_CN)诚意满满的视频播放器。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/potp.PNG)\n\n# 下载工具 #\n\n  **IDM：**Internet Download Manager(简称“IDM”)是国外的一款下载工具，提升你的下载速度最多达5倍，安排下载时程，或续传一半的软件。Internet Download Manager的续传功能可以恢复因为断线、网络问题、计算机当机甚至无预警的停电导致下传到一半的软件。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/idm.PNG)\n\n  **EagleGet:**[EagleGet](http://www.eagleget.com/)（亦称 EG Download Accelerator）是一个用于 Windows 系统的下载管理器，它是免费软件。EagleGet 使用多线程技术，支持从Youtube、Dailymotion、Facebook、Vimeo等视频网站下载 MP4 和 FLV 格式视频。EagleGet 是一个拥有简洁界面和功能的免费的新下载管理器。\n\n  ![](http://olg3gwtbm.bkt.clouddn.com/eg.PNG)\n\n  **迅雷：**国内用户电脑中常备的下载软件，大多数网站也都支持迅雷下载。但我真的越来越讨厌迅雷了，不仅下载速度限速，界面也越来越复杂，广告还多，越来越丧失了一款下载软件的本心。\n\n  ***分享到这里就结束了，如果大家有什么疑问可以留言，有好的软件推荐给我，也可以留言，谢谢阅读！***","slug":"软件分享篇","published":1,"updated":"2017-03-02T15:28:16.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke02o6xg002764xt47e909iw","content":"<excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>今晚有点晚了，就不撸代码了，决定把我电脑里常用的软件、工具分享给大家，这些软件真的很好用，不信你可以试一试！</p>\n</blockquote>\n<p>转载请注明：转载于Terry Tian的博客（<a href=\"www.mutouspace.cn\">www.mutouspace.cn</a>）!</p>\n<a id=\"more\"></a> \n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"安全杀毒：\"><a href=\"#安全杀毒：\" class=\"headerlink\" title=\"安全杀毒：\"></a>安全杀毒：</h1><p>   TT电脑里用的杀毒防护软件是Windows系统自带的<strong>Windows Defender</strong>，说实话，现在Windows自带的杀软已经很好了，具体好到哪，大家可以自行百度、google。软件界面简单、实用，还没有广告，界面如下：</p>\n<p>   <img src=\"http://olg3gwtbm.bkt.clouddn.com/Windowsdefender.PNG\" alt=\"软件截图\"></p>\n<p>   清理软件我用的是口碑很好的 <a href=\"http://www.piriform.com/ccleaner\" target=\"_blank\" rel=\"external\">CCleaner</a>,功能完全足够你使用了！截图如下：</p>\n<p>   <img src=\"http://olg3gwtbm.bkt.clouddn.com/cc.PNG\" alt=\"CC\"></p>\n<p>   对于非一般的用户，特别是计算机专业的学生，真的不是很建议在电脑了安装些安全卫士、管家、毒霸等软件的！</p>\n<h1 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h1><p>  <strong>Android Studio</strong>：对于这款软件大家一定都不陌生，特别是对于一位安卓开发人员，Google的亲儿子，好好享受吧！</p>\n<p>  <strong>eclipse</strong>：一款插件丰富的开发工具，java开发者用的挺多，以前也用于开发安卓，可惜Google生了个儿子。</p>\n<p>  <strong>SQLite Expert Personal</strong>：一款可以查看数据表中数据的软件，安卓开发人员都值得拥有！</p>\n<h1 id=\"系统工具\"><a href=\"#系统工具\" class=\"headerlink\" title=\"系统工具\"></a>系统工具</h1><p>  <strong>chrome：</strong>好用的不能再好用的浏览器。插件丰富，但需要科学上网。<br>             缺点就是在国内没法云备份自己的收藏夹。推荐大家可以在安装一款360极速浏览器、或者QQ浏览器来备份自己的收藏夹。</p>\n<p>  <strong>MarkdownPad 2：</strong>我认为这可能是Windows系统下最好用的markdown书写软件了，可以去<a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"external\">官网</a>下载。</p>\n<p>   <img src=\"http://olg3gwtbm.bkt.clouddn.com/md.PNG\" alt=\"\"></p>\n<p>  <strong>Seer</strong>:是一款 Windows 下的文件预览工具，可以无需打开图片、音乐、视频、压缩包等文件就能预览到内容，只需点一下空格。<a href=\"http://www.appinn.com/seer-windows/\" target=\"_blank\" rel=\"external\">下载地址：http://www.appinn.com/seer-windows/</a>。</p>\n<p>  <strong>护眼宝：</strong>是一款护眼的工具，<a href=\"http://www.huyanbao.com/#top\" target=\"_blank\" rel=\"external\">下载地址：http://www.huyanbao.com/#top</a>。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/hyb.PNG\" alt=\"\"></p>\n<p>  <strong>Clover:</strong><a href=\"http://cn.ejie.me/\" target=\"_blank\" rel=\"external\">Clover</a> 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/clover.jpg\" alt=\"\"></p>\n<p>  <strong>ADSafe：</strong><a href=\"http://www.newadblock.com/\" target=\"_blank\" rel=\"external\">ADSafe</a>是一款好用的广告屏蔽软件！</p>\n<p>  <strong>HoneyView:</strong><a href=\"https://www.bandisoft.com/honeyview/cn/\" target=\"_blank\" rel=\"external\">HoneyView</a>是一个支持多种格式的极速图像浏览器。<br>  她同时支持不解压浏览ZIP、RAR和7z压缩包中的图片。<br>  她可以显示图片的GPS信息并在Google Maps中查看该地点，同时用户可以储存喜爱的照片。</p>\n<p><strong>影音工具</strong></p>\n<p>  <strong>网易云音乐（UWP）：</strong>逼格漫漫的音乐播放器。</p>\n<p>  <strong>Potplayer：</strong><a href=\"http://potplayer.daum.net/?lang=zh_CN\" target=\"_blank\" rel=\"external\">PotPlayer</a>诚意满满的视频播放器。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/potp.PNG\" alt=\"\"></p>\n<h1 id=\"下载工具\"><a href=\"#下载工具\" class=\"headerlink\" title=\"下载工具\"></a>下载工具</h1><p>  <strong>IDM：</strong>Internet Download Manager(简称“IDM”)是国外的一款下载工具，提升你的下载速度最多达5倍，安排下载时程，或续传一半的软件。Internet Download Manager的续传功能可以恢复因为断线、网络问题、计算机当机甚至无预警的停电导致下传到一半的软件。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/idm.PNG\" alt=\"\"></p>\n<p>  <strong>EagleGet:</strong><a href=\"http://www.eagleget.com/\" target=\"_blank\" rel=\"external\">EagleGet</a>（亦称 EG Download Accelerator）是一个用于 Windows 系统的下载管理器，它是免费软件。EagleGet 使用多线程技术，支持从Youtube、Dailymotion、Facebook、Vimeo等视频网站下载 MP4 和 FLV 格式视频。EagleGet 是一个拥有简洁界面和功能的免费的新下载管理器。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/eg.PNG\" alt=\"\"></p>\n<p>  <strong>迅雷：</strong>国内用户电脑中常备的下载软件，大多数网站也都支持迅雷下载。但我真的越来越讨厌迅雷了，不仅下载速度限速，界面也越来越复杂，广告还多，越来越丧失了一款下载软件的本心。</p>\n<p>  <strong><em>分享到这里就结束了，如果大家有什么疑问可以留言，有好的软件推荐给我，也可以留言，谢谢阅读！</em></strong></p>\n</the></excerpt>","excerpt":"<Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\">\n\n<blockquote>\n<p>今晚有点晚了，就不撸代码了，决定把我电脑里常用的软件、工具分享给大家，这些软件真的很好用，不信你可以试一试！</p>\n</blockquote>\n<p>转载请注明：转载于Terry Tian的博客（<a href=\"www.mutouspace.cn\">www.mutouspace.cn</a>）!</p></Excerpt>","more":"<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"安全杀毒：\"><a href=\"#安全杀毒：\" class=\"headerlink\" title=\"安全杀毒：\"></a>安全杀毒：</h1><p>   TT电脑里用的杀毒防护软件是Windows系统自带的<strong>Windows Defender</strong>，说实话，现在Windows自带的杀软已经很好了，具体好到哪，大家可以自行百度、google。软件界面简单、实用，还没有广告，界面如下：</p>\n<p>   <img src=\"http://olg3gwtbm.bkt.clouddn.com/Windowsdefender.PNG\" alt=\"软件截图\"></p>\n<p>   清理软件我用的是口碑很好的 <a href=\"http://www.piriform.com/ccleaner\">CCleaner</a>,功能完全足够你使用了！截图如下：</p>\n<p>   <img src=\"http://olg3gwtbm.bkt.clouddn.com/cc.PNG\" alt=\"CC\"></p>\n<p>   对于非一般的用户，特别是计算机专业的学生，真的不是很建议在电脑了安装些安全卫士、管家、毒霸等软件的！</p>\n<h1 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h1><p>  <strong>Android Studio</strong>：对于这款软件大家一定都不陌生，特别是对于一位安卓开发人员，Google的亲儿子，好好享受吧！</p>\n<p>  <strong>eclipse</strong>：一款插件丰富的开发工具，java开发者用的挺多，以前也用于开发安卓，可惜Google生了个儿子。</p>\n<p>  <strong>SQLite Expert Personal</strong>：一款可以查看数据表中数据的软件，安卓开发人员都值得拥有！</p>\n<h1 id=\"系统工具\"><a href=\"#系统工具\" class=\"headerlink\" title=\"系统工具\"></a>系统工具</h1><p>  <strong>chrome：</strong>好用的不能再好用的浏览器。插件丰富，但需要科学上网。<br>             缺点就是在国内没法云备份自己的收藏夹。推荐大家可以在安装一款360极速浏览器、或者QQ浏览器来备份自己的收藏夹。</p>\n<p>  <strong>MarkdownPad 2：</strong>我认为这可能是Windows系统下最好用的markdown书写软件了，可以去<a href=\"http://markdownpad.com/\">官网</a>下载。</p>\n<p>   <img src=\"http://olg3gwtbm.bkt.clouddn.com/md.PNG\" alt=\"\"></p>\n<p>  <strong>Seer</strong>:是一款 Windows 下的文件预览工具，可以无需打开图片、音乐、视频、压缩包等文件就能预览到内容，只需点一下空格。<a href=\"http://www.appinn.com/seer-windows/\">下载地址：http://www.appinn.com/seer-windows/</a>。</p>\n<p>  <strong>护眼宝：</strong>是一款护眼的工具，<a href=\"http://www.huyanbao.com/#top\">下载地址：http://www.huyanbao.com/#top</a>。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/hyb.PNG\" alt=\"\"></p>\n<p>  <strong>Clover:</strong><a href=\"http://cn.ejie.me/\">Clover</a> 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/clover.jpg\" alt=\"\"></p>\n<p>  <strong>ADSafe：</strong><a href=\"http://www.newadblock.com/\">ADSafe</a>是一款好用的广告屏蔽软件！</p>\n<p>  <strong>HoneyView:</strong><a href=\"https://www.bandisoft.com/honeyview/cn/\">HoneyView</a>是一个支持多种格式的极速图像浏览器。<br>  她同时支持不解压浏览ZIP、RAR和7z压缩包中的图片。<br>  她可以显示图片的GPS信息并在Google Maps中查看该地点，同时用户可以储存喜爱的照片。</p>\n<p><strong>影音工具</strong></p>\n<p>  <strong>网易云音乐（UWP）：</strong>逼格漫漫的音乐播放器。</p>\n<p>  <strong>Potplayer：</strong><a href=\"http://potplayer.daum.net/?lang=zh_CN\">PotPlayer</a>诚意满满的视频播放器。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/potp.PNG\" alt=\"\"></p>\n<h1 id=\"下载工具\"><a href=\"#下载工具\" class=\"headerlink\" title=\"下载工具\"></a>下载工具</h1><p>  <strong>IDM：</strong>Internet Download Manager(简称“IDM”)是国外的一款下载工具，提升你的下载速度最多达5倍，安排下载时程，或续传一半的软件。Internet Download Manager的续传功能可以恢复因为断线、网络问题、计算机当机甚至无预警的停电导致下传到一半的软件。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/idm.PNG\" alt=\"\"></p>\n<p>  <strong>EagleGet:</strong><a href=\"http://www.eagleget.com/\">EagleGet</a>（亦称 EG Download Accelerator）是一个用于 Windows 系统的下载管理器，它是免费软件。EagleGet 使用多线程技术，支持从Youtube、Dailymotion、Facebook、Vimeo等视频网站下载 MP4 和 FLV 格式视频。EagleGet 是一个拥有简洁界面和功能的免费的新下载管理器。</p>\n<p>  <img src=\"http://olg3gwtbm.bkt.clouddn.com/eg.PNG\" alt=\"\"></p>\n<p>  <strong>迅雷：</strong>国内用户电脑中常备的下载软件，大多数网站也都支持迅雷下载。但我真的越来越讨厌迅雷了，不仅下载速度限速，界面也越来越复杂，广告还多，越来越丧失了一款下载软件的本心。</p>\n<p>  <strong><em>分享到这里就结束了，如果大家有什么疑问可以留言，有好的软件推荐给我，也可以留言，谢谢阅读！</em></strong></p></The>"},{"title":"使用Hexo+github建设个人博客教程","date":"2017-02-18T07:46:58.000Z","_content":"\n<Excerpt in index | 首页摘要>\n# 前言 #\n\n本片文章主要用来记录搭建Hexo静态博客的过程，用于以后搭建博客更加方便。\n\n**主要内容：**\n\n1. 列出博客搭建环境+所需工具；\n2. 环境的配置与工具的安装简述，以及简单的使用教程，安装Git、Node.js环境以及Hexo框架；\n3. 创建Hexo项目，并本地运行查看效果\n4. 修改项目配置文件（根目录下的_config.yml文件）\n5. 安装Hexo框架主题（推荐：Next或yelee主题，本人用的yelee），对主题进行配置，主要是修改theme目录下的_config.yml文件\n6. 将本地设置好的Hexo项目发布到Github Pages上（包括绑定自己的域名）（这里会介绍如何写文章）\n7. 总结\n\n<!-- more --> \n\n## 准备工作 ##\n\n在搭建博客时，你需要做以下准备：\n\n1. 确定自己的系统为Windows;(因为博主用的系统是Windows10，为了避免浪费您的时间，如果不是Windows系统就不要看了。)\n2. Git下载，node.js下载。\n\n\n本文所使用的环境：\n\n- Windows 10\n- Git  version 2.11.1.windows.1\n- node.js v6.9.5 LTS\n- hexo \n\n\n# 开始搭建博客 #\n\n## Git下载安装及简单实用 ##\n\n为什么要在电脑上安装Git呢？我相信大多计算机专业的同学对Git的应该不陌生了，Git可以说是现如今最好用的、最先进的分布式版本控制系统（没有之一）。Git在接下来的环境部署及部署博客到github Pages时都是需要的。大家如果有兴趣可以阅读我的博客（[Git的简单使用](http://blog.csdn.net/tianqingdezhuanlan/article/details/51791318)），对Git进行简单的了解。如果了解Git也没有关系，只要你按照教程一步一步来也可以。\n\n**下载Git**\n\n我们可以在[Git的官网](https://git-scm.com/downloads)下载我们所需要的git，我选择的是最新版的Git Windows X64 版本。\n\n**安装Git**\n\nGit的安装也很简单，就像安装我们平时所需要的软件一样，教程参考：[Git的安装](http://blog.csdn.net/tianqingdezhuanlan/article/details/51791368)。\n\n**Git的简单实用**\n\n初始化一个Git仓库，使用`git init`命令。\n\n添加文件到Git仓库，分两步：\n\n第一步，使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n\n第二步，使用命令`git commit`，完成。\n\n我们在这里不太需要git的命令操作，一般只需要git的的shell窗口进行一些操作。\n\n## node.js的下载安装 ##\n\n**下载**\n\n打开 [Nodejs](https://nodejs.org/en/) 下载页面，选择合适你当前系统版本的安装包（建议使用 LTS 版本的）。\n\n**安装**\n\n双击安装文件 -> 下一步 -> 下一步...\n\n【具体操作请参考网上的一篇文章：[Node.js安装及环境配置之Windows篇](http://www.jianshu.com/p/03a76b2e7e00)】\n\n## Hexo框架的安装 ##\n\n首先我们可以看一下[hexo](https://hexo.io/)的官网，了解一下hexo。\n\n**Windows中的安装**\n\n1. 打开命令行\n \n   Win+R或者点击开始按钮-->运行-->输入“cmd”;\n   \n   用 **Git Bash**\n\n2. 输入命令\n\n   `npm install hexo-cli -g`\n\n输入完命令后就开始了hexo的安装，这里可能需要等待一段时间，时间不确定，只要不报错就可以了。\n\n## 创建Hexo本地博客 ##\n\n 接下来我们在一个本地盘自定义路径中创建一个文件夹作为我的项目文件，我在这里选择了在G盘下新建了一个名为TerryBlog的文件夹，作为我的项目文件，路径为【G:\\TerryBlog】.在G盘下，点击鼠标右键-->Git Bash，打开命令输入框。输入命令如下：\n\n   `hexo init TerryBlog        //hexo init +你的项目名称，如我的为TerryBlog`\n\n 执行完上述命令后，我们就创建了TerryBlog文件夹，进入刚创建的TerryBlog项目目录，命令操作如下：\n\n  `cd TerryBlog      //进入TerryBlog目录`\n\n 或者直接在TerryBlog文件夹下，再点击鼠标右键-->Git Bash，打开命令输入框。再输入以下命令：\n\n  `npm install  `\n\n 安装完成之后，【G:\\TerryBlog】目录结构是这样的：\n\n![](使用Hexo+github建设个人博客教程1.png)\n\n  到此为止，一个博客就已经搭建好了，现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令如下：\n\n  `hexo s`\n\n\n   ***在浏览器中输入：http://localhost:4000/进行访问***\n\n \n\n    ** 如果要停止 hexo 服务：在 Git Bash 下按 Ctrl + C即可**\n\n   到这里我们简单的hexo博客基本就完成一部分了！是不是很开心，如果不进行主题美化的话，我们马上就可以有一个自己的博客了。\n\n# 修改项目配置文件 #\n\n\n  在这里我们修改的是【G:\\TerryBlog】路径下的 `_config.yml ` **站点主题配置**文件，我的配置如下：\n\n  **注意：修改之前最好备份一下。**\n\n\n\n    # Hexo Configuration\n    ## Docs: https://hexo.io/docs/configuration.html\n    ## Source: https://github.com/hexojs/hexo/\n    \n    # Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的\n    \n    \n    title: Terry_Tian Code #网站标题\n    subtitle: 行是知之始   知是行之成  #网站副标题\n    description: 在山的这边，海的那边，有一只程序猿。。。  #描述\n    author: Terry Tian   #博主名字\n    avatar: http://olg3gwtbm.bkt.clouddn.com/head.jpg  #博主头像\n    email: 1015236187@qq.com   #邮箱\n    language: zh-Hans  #语言\n    timezone:   #网站时区。Hexo默认使用电脑时区\n    \n    # URL,这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息\n    ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n    url: http://mutouspace.cn/\n    root: /\n    permalink: :year/:month/:day/:title/\n    permalink_defaults:\n    \n     # Directory\n    source_dir: source\n    public_dir: public\n    tag_dir: tags\n    archive_dir: archives\n    category_dir: categories\n    code_dir: downloads/code\n    i18n_dir: :lang\n    skip_render:\n    \n    # Writing\n    new_post_name: :title.md # File name of new posts\n    default_layout: post\n    titlecase: false # Transform title into titlecase\n    external_link: true # Open external links in new tab\n    filename_case: 0\n    render_drafts: false\n    post_asset_folder: false\n    relative_link: false\n    future: true\n    highlight:\n      enable: true\n      line_number: true\n      auto_detect: false\n      tab_replace:\n    \n    # Category & Tag\n    default_category: uncategorized\n    category_map:\n    tag_map:\n    \n    # Date / Time format\n    ## Hexo uses Moment.js to parse and display date\n    ## You can customize the date format as defined in\n    ## http://momentjs.com/docs/#/displaying/format/\n     date_format: YYYY-MM-DD\n     time_format: HH:mm:ss\n    \n     # Pagination\n     ## Set per_page to 0 to disable pagination\n     per_page: 10\n     pagination_dir: page\n    \n     # Extensions\n     ## Plugins: https://hexo.io/plugins/\n     ## Themes: https://hexo.io/themes/\n     theme: yelee\n    \n     # Deployment\n     ## Docs: https://hexo.io/docs/deployment.html\n     deploy:\n       type: git\n       repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git\n       branch: master\n      \n     search:\n       path: search.xml\n       field: post\n\n\n   做完这一些之后再在Git Bash 命令框中，输入 `hexo s` 重新启动服务，在浏览器中输入：[http://localhost:4000/](http://localhost:4000/)进行访问,查看一下效果。\n\n# 安装Hexo框架主题 #\n  \n  在上一步完成后，你会发现虽然改了一部分配置，但页面还是很吃藕，接下来，咱们就要给咱们的博客美美容了。hexo的主题有很多，大家可以去这里选一下，hexo-theme：[https://hexo.io/themes/](https://hexo.io/themes/).\n\n  我选择的是yelee主题：[yelee](https://github.com/MOxFIVE/hexo-theme-yelee)\n\n  还是让 Git Bash 保持在【G:\\TerryBlog】目录下，然后输入命令：\n\n  `git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee`\n\n  这样就在 【G:\\TerryBlog\\themes】目录下生成了一个 yelee 文件夹，里面有我们刚刚 clone 下来的主题内容。\n  \n  我们现在要修改【G:\\TerryBlog】目录下的项目配置文件：_config.yml，把对应的主题目录名改下，主要是将配置中的 theme: yelee修改。\n\n  **注意：该配置文件中的键值之间一定要有空格，否则轻则没有作用，重则报错，无法启动。**\n\n  更改主题目录名后，我们还要重新生成主题静态内容，继续在 Git Bash 中输入命令输入如下命令：\n\n   `hexo g      //重新生成静态博客的所有内容`\n\n   `hexo s        //重启 hexo 本地服务`\n\n  重新访问：[http://localhost:4000/](http://localhost:4000/)，看一下效果.\n\n## 修改Hexo框架主题 ##\n  \n  上一步完成后，看到的是yelee的默认主题，这里我们可以再次配置一下，修改的是【G:\\TerryBlog\\themes\\yelee】路径下的 `_config.yml`文件。这里我们可以跟着[Yelee 主题使用说明](http://moxfive.coding.me/yelee/)来修改。\n\n# 发布到Github Pages上 #   \n\n## 创建Github Pages并SSH授权 ##\n\n  现在假设你已经有一个 Gtihub 账号，你还需要一个**特别**的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：tiantsing，那我要创建的仓库名字完整滴填写是：tiantsing.github.io ;\n\n  仔细的人可能看到，你的仓库名根本不和你的用户名一样，由于我之前已经创建了一个这样特别的仓库，再创建一个就会提示错误，为了演示方便，所以删了一个T。\n\n  创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上。\n\n  【具体可以参考网上的一篇文章：[Git安装及SSH Key管理之Windows篇](http://www.jianshu.com/p/a3b4f61d4747)】\n\n  现在用记事本打开公钥，复制文件中的所有内容。访问：[https://github.com/settings/ssh](https://github.com/settings/ssh)，\n  \n  Title：自己随便取\n\n  Key：把刚刚复制的都粘贴进来\n\n## 把本地的博客内容同步到 Github 上 ##\n\n   要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件：\n \n\n   `cd G:\\TerryBlog              //进入TerryBlog项目目录`\n\n    上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下；\n\n  `npm/cnpm install hexo-server --save         //创建`\n\n ` npm/cnpm install hexo-deployer-git --save    //安装自动部署发布工具`\n\n  编辑TerryBlog的**项目配置文件**：_config.yml\n\n  官网对此配置的介绍：[https://hexo.io/zh-cn/docs/configuration.html](https://hexo.io/zh-cn/docs/configuration.html)\n\n  主要改这里（一般在最后面）：\n  \n     # Deployment\n    ## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。\n    ## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。\n    ## Docs: https://hexo.io/docs/deployment.html\n      deploy:\n      type: git\n      repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git\n      branch: master\n\n  编辑完项目配置文件后我们需要重新部署：\n\n    cd G:\\TerryBlog              //进入TerryBlog项目目录\n\n    上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下；\n    hexo clean//先清除掉已经生成的旧文件\n    hexo g //再生成一次静态文件\n    hexo s   //在本地预览下\n    hexo d   //本地没问题之后，Ctrl + C 停掉本地预览，使用部署命令部署到 Github 上\n\n   访问服务器地址进行检查：http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名 + .github.io\n\n## 绑定域名 ##\n\n  \n -  **创建CNAME文件**\n \n    我们要一个 CNAME 文件（文件名叫 CNAME，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如：mutouspace.cn。这个CNAME可以你先建一个txt文件，把后缀名去掉），把该文件放在 G:\\TerryBlog 目录下。\n -  **获取Github的ip地址**\n    \n    实际获取的是你github上博客项目的ip（即：tiantsing.github.io），打开命令窗口，输入【ping tiantsing.github.io】来查看ip地址，并记录下来;\n -  **添加DNS Service记录**\n \n    我的域名是腾讯云上买的，用的腾讯云的域名解析，将ip地址和你买的域名绑定就好了，域名解析后需要等待几分钟才能被访问;\n\n   到此为止，我们的博客就成功配置完了！\n\n# 发表一篇文章 #\n\n  \n1. 在G:\\TerryBlog 路径下Git Bash执行命令： `hexo new \"my new post\"`\n2. 在G:\\TerryBlog\\source\\_post中打开my-new-post.md，打开方式使用记事本或notepad++（推荐使用Markdown编辑软件）。\n   \n   hexo中写文章使用的是Markdown，没接触过的可以看下Markdown语法说明.\n   \n      title: my new post #可以改成中文的，如“新文章”\n      date: 2015-04-08 22:56:29 #发表日期，一般不改动\n      categories: blog #文章文类\n      tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog\n    \n      #这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上\n      <!--more-->\n      #在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n\n3. 写完文章后，你可以使用1. hexo g生成静态文件。2. hexo s在本地预览效果。3.hexo d同步到github，然后使用[tianqing.work](tianqing.work)进行访问。\n\n# HEXO插入图片 #\n\n**第一步：安装插件，在 `hexo` 根目录打开 `Git Bash` ,执行**\n` npm install hexo-asset-image --save `\n**第二步：打开 `hexo` 的配置文件`_config.yml`**\n找到 `post_asset_folder`，把这个选项从`false`改成`true`\n**第三步：打开`/node_modules/hexo-asset-image/index.js`**\n将内容更换为下面的代码\n\n```\n'use strict';\nvar cheerio = require('cheerio');\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n}\n\nvar version = String(hexo.version).split('.');\nhexo.extend.filter.register('after_post_render', function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){\n        var link = data.permalink;\n    if(version.length > 0 && Number(version[0]) == 3)\n       var beginPos = getPosition(link, '/', 1) + 1;\n    else\n       var beginPos = getPosition(link, '/', 3) + 1;\n    // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n    var endPos = link.lastIndexOf('/') + 1;\n    link = link.substring(beginPos, endPos);\n\n    var toprocess = ['excerpt', 'more', 'content'];\n    for(var i = 0; i < toprocess.length; i++){\n      var key = toprocess[i];\n \n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n\n      $('img').each(function(){\n        if ($(this).attr('src')){\n            // For windows style path, we replace '\\' to '/'.\n            var src = $(this).attr('src').replace('\\\\', '/');\n            if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n               !/^\\s*\\//.test(src)) {\n              // For \"about\" page, the first part of \"src\" can't be removed.\n              // In addition, to support multi-level local directory.\n              var linkArray = link.split('/').filter(function(elem){\n                return elem != '';\n              });\n              var srcArray = src.split('/').filter(function(elem){\n                return elem != '' && elem != '.';\n              });\n              if(srcArray.length > 1)\n                srcArray.shift();\n              src = srcArray.join('/');\n              $(this).attr('src', config.root + link + src);\n              console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n            }\n        }else{\n            console.info&&console.info(\"no src attr, skipped...\");\n            console.info&&console.info($(this));\n        }\n      });\n      data[key] = $.html();\n    }\n  }\n});\n```\n**第四步：现在就可以插入图片了，比如 `hexo new post test` 之后**\n就在`source/_posts`生成`teest.md`文件和`test`文件夹，我们把要插入的图片复制到`test`文件夹内，\n在`test.md`文件里面按`markdown`的标准写,（我的文件名是`test.jpeg`）比如\n\n\n**![这是代替图片的文字，随便写](test.jpeg)**\n\n\n# 总结 #\n\n## 常用hexo命令 ##\n\n常见命令\n\n    hexo new \"postName\" #新建文章\n    hexo new page \"pageName\" #新建页面\n    hexo new post \"pageName\" #新建文章与文件夹\n    hexo generate #生成静态页面至public目录\n    hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n    hexo deploy #部署到GitHub\n    hexo help  # 查看帮助\n    hexo version  #查看Hexo的版本\n\n缩写：\n\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n\n组合命令：\n\n    hexo s -g #生成并本地预览\n    hexo d -g #生成并上传\n\n## 最终效果 ##\n\n  可以访问我的git博客来查看效果： [https://tiantsing.github.io/](https://tiantsing.github.io/)\n\n## 参考 ##\n\n   [基于Hexo+Github Pages的博客搭建](http://www.jianshu.com/p/0a3cad3e8cdf)\n\n   [使用Hexo搭建个人博客(基于hexo3.0)](http://opiece.me/2015/04/09/hexo-guide/)\n\n   [使用hexo+github搭建免费个人博客详细教程](http://blog.liuxianan.com/build-blog-website-by-hexo-github.html#qian-yan)","source":"_posts/使用Hexo-github建设个人博客教程.md","raw":"---\n  title: 使用Hexo+github建设个人博客教程\n  date: 2017-02-18 15:46:58\n  categories: Hexo\n  tags: [Hexo,Git,node,github]\n\n---\n\n<Excerpt in index | 首页摘要>\n# 前言 #\n\n本片文章主要用来记录搭建Hexo静态博客的过程，用于以后搭建博客更加方便。\n\n**主要内容：**\n\n1. 列出博客搭建环境+所需工具；\n2. 环境的配置与工具的安装简述，以及简单的使用教程，安装Git、Node.js环境以及Hexo框架；\n3. 创建Hexo项目，并本地运行查看效果\n4. 修改项目配置文件（根目录下的_config.yml文件）\n5. 安装Hexo框架主题（推荐：Next或yelee主题，本人用的yelee），对主题进行配置，主要是修改theme目录下的_config.yml文件\n6. 将本地设置好的Hexo项目发布到Github Pages上（包括绑定自己的域名）（这里会介绍如何写文章）\n7. 总结\n\n<!-- more --> \n\n## 准备工作 ##\n\n在搭建博客时，你需要做以下准备：\n\n1. 确定自己的系统为Windows;(因为博主用的系统是Windows10，为了避免浪费您的时间，如果不是Windows系统就不要看了。)\n2. Git下载，node.js下载。\n\n\n本文所使用的环境：\n\n- Windows 10\n- Git  version 2.11.1.windows.1\n- node.js v6.9.5 LTS\n- hexo \n\n\n# 开始搭建博客 #\n\n## Git下载安装及简单实用 ##\n\n为什么要在电脑上安装Git呢？我相信大多计算机专业的同学对Git的应该不陌生了，Git可以说是现如今最好用的、最先进的分布式版本控制系统（没有之一）。Git在接下来的环境部署及部署博客到github Pages时都是需要的。大家如果有兴趣可以阅读我的博客（[Git的简单使用](http://blog.csdn.net/tianqingdezhuanlan/article/details/51791318)），对Git进行简单的了解。如果了解Git也没有关系，只要你按照教程一步一步来也可以。\n\n**下载Git**\n\n我们可以在[Git的官网](https://git-scm.com/downloads)下载我们所需要的git，我选择的是最新版的Git Windows X64 版本。\n\n**安装Git**\n\nGit的安装也很简单，就像安装我们平时所需要的软件一样，教程参考：[Git的安装](http://blog.csdn.net/tianqingdezhuanlan/article/details/51791368)。\n\n**Git的简单实用**\n\n初始化一个Git仓库，使用`git init`命令。\n\n添加文件到Git仓库，分两步：\n\n第一步，使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n\n第二步，使用命令`git commit`，完成。\n\n我们在这里不太需要git的命令操作，一般只需要git的的shell窗口进行一些操作。\n\n## node.js的下载安装 ##\n\n**下载**\n\n打开 [Nodejs](https://nodejs.org/en/) 下载页面，选择合适你当前系统版本的安装包（建议使用 LTS 版本的）。\n\n**安装**\n\n双击安装文件 -> 下一步 -> 下一步...\n\n【具体操作请参考网上的一篇文章：[Node.js安装及环境配置之Windows篇](http://www.jianshu.com/p/03a76b2e7e00)】\n\n## Hexo框架的安装 ##\n\n首先我们可以看一下[hexo](https://hexo.io/)的官网，了解一下hexo。\n\n**Windows中的安装**\n\n1. 打开命令行\n \n   Win+R或者点击开始按钮-->运行-->输入“cmd”;\n   \n   用 **Git Bash**\n\n2. 输入命令\n\n   `npm install hexo-cli -g`\n\n输入完命令后就开始了hexo的安装，这里可能需要等待一段时间，时间不确定，只要不报错就可以了。\n\n## 创建Hexo本地博客 ##\n\n 接下来我们在一个本地盘自定义路径中创建一个文件夹作为我的项目文件，我在这里选择了在G盘下新建了一个名为TerryBlog的文件夹，作为我的项目文件，路径为【G:\\TerryBlog】.在G盘下，点击鼠标右键-->Git Bash，打开命令输入框。输入命令如下：\n\n   `hexo init TerryBlog        //hexo init +你的项目名称，如我的为TerryBlog`\n\n 执行完上述命令后，我们就创建了TerryBlog文件夹，进入刚创建的TerryBlog项目目录，命令操作如下：\n\n  `cd TerryBlog      //进入TerryBlog目录`\n\n 或者直接在TerryBlog文件夹下，再点击鼠标右键-->Git Bash，打开命令输入框。再输入以下命令：\n\n  `npm install  `\n\n 安装完成之后，【G:\\TerryBlog】目录结构是这样的：\n\n![](使用Hexo+github建设个人博客教程1.png)\n\n  到此为止，一个博客就已经搭建好了，现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令如下：\n\n  `hexo s`\n\n\n   ***在浏览器中输入：http://localhost:4000/进行访问***\n\n \n\n    ** 如果要停止 hexo 服务：在 Git Bash 下按 Ctrl + C即可**\n\n   到这里我们简单的hexo博客基本就完成一部分了！是不是很开心，如果不进行主题美化的话，我们马上就可以有一个自己的博客了。\n\n# 修改项目配置文件 #\n\n\n  在这里我们修改的是【G:\\TerryBlog】路径下的 `_config.yml ` **站点主题配置**文件，我的配置如下：\n\n  **注意：修改之前最好备份一下。**\n\n\n\n    # Hexo Configuration\n    ## Docs: https://hexo.io/docs/configuration.html\n    ## Source: https://github.com/hexojs/hexo/\n    \n    # Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的\n    \n    \n    title: Terry_Tian Code #网站标题\n    subtitle: 行是知之始   知是行之成  #网站副标题\n    description: 在山的这边，海的那边，有一只程序猿。。。  #描述\n    author: Terry Tian   #博主名字\n    avatar: http://olg3gwtbm.bkt.clouddn.com/head.jpg  #博主头像\n    email: 1015236187@qq.com   #邮箱\n    language: zh-Hans  #语言\n    timezone:   #网站时区。Hexo默认使用电脑时区\n    \n    # URL,这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息\n    ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n    url: http://mutouspace.cn/\n    root: /\n    permalink: :year/:month/:day/:title/\n    permalink_defaults:\n    \n     # Directory\n    source_dir: source\n    public_dir: public\n    tag_dir: tags\n    archive_dir: archives\n    category_dir: categories\n    code_dir: downloads/code\n    i18n_dir: :lang\n    skip_render:\n    \n    # Writing\n    new_post_name: :title.md # File name of new posts\n    default_layout: post\n    titlecase: false # Transform title into titlecase\n    external_link: true # Open external links in new tab\n    filename_case: 0\n    render_drafts: false\n    post_asset_folder: false\n    relative_link: false\n    future: true\n    highlight:\n      enable: true\n      line_number: true\n      auto_detect: false\n      tab_replace:\n    \n    # Category & Tag\n    default_category: uncategorized\n    category_map:\n    tag_map:\n    \n    # Date / Time format\n    ## Hexo uses Moment.js to parse and display date\n    ## You can customize the date format as defined in\n    ## http://momentjs.com/docs/#/displaying/format/\n     date_format: YYYY-MM-DD\n     time_format: HH:mm:ss\n    \n     # Pagination\n     ## Set per_page to 0 to disable pagination\n     per_page: 10\n     pagination_dir: page\n    \n     # Extensions\n     ## Plugins: https://hexo.io/plugins/\n     ## Themes: https://hexo.io/themes/\n     theme: yelee\n    \n     # Deployment\n     ## Docs: https://hexo.io/docs/deployment.html\n     deploy:\n       type: git\n       repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git\n       branch: master\n      \n     search:\n       path: search.xml\n       field: post\n\n\n   做完这一些之后再在Git Bash 命令框中，输入 `hexo s` 重新启动服务，在浏览器中输入：[http://localhost:4000/](http://localhost:4000/)进行访问,查看一下效果。\n\n# 安装Hexo框架主题 #\n  \n  在上一步完成后，你会发现虽然改了一部分配置，但页面还是很吃藕，接下来，咱们就要给咱们的博客美美容了。hexo的主题有很多，大家可以去这里选一下，hexo-theme：[https://hexo.io/themes/](https://hexo.io/themes/).\n\n  我选择的是yelee主题：[yelee](https://github.com/MOxFIVE/hexo-theme-yelee)\n\n  还是让 Git Bash 保持在【G:\\TerryBlog】目录下，然后输入命令：\n\n  `git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee`\n\n  这样就在 【G:\\TerryBlog\\themes】目录下生成了一个 yelee 文件夹，里面有我们刚刚 clone 下来的主题内容。\n  \n  我们现在要修改【G:\\TerryBlog】目录下的项目配置文件：_config.yml，把对应的主题目录名改下，主要是将配置中的 theme: yelee修改。\n\n  **注意：该配置文件中的键值之间一定要有空格，否则轻则没有作用，重则报错，无法启动。**\n\n  更改主题目录名后，我们还要重新生成主题静态内容，继续在 Git Bash 中输入命令输入如下命令：\n\n   `hexo g      //重新生成静态博客的所有内容`\n\n   `hexo s        //重启 hexo 本地服务`\n\n  重新访问：[http://localhost:4000/](http://localhost:4000/)，看一下效果.\n\n## 修改Hexo框架主题 ##\n  \n  上一步完成后，看到的是yelee的默认主题，这里我们可以再次配置一下，修改的是【G:\\TerryBlog\\themes\\yelee】路径下的 `_config.yml`文件。这里我们可以跟着[Yelee 主题使用说明](http://moxfive.coding.me/yelee/)来修改。\n\n# 发布到Github Pages上 #   \n\n## 创建Github Pages并SSH授权 ##\n\n  现在假设你已经有一个 Gtihub 账号，你还需要一个**特别**的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：tiantsing，那我要创建的仓库名字完整滴填写是：tiantsing.github.io ;\n\n  仔细的人可能看到，你的仓库名根本不和你的用户名一样，由于我之前已经创建了一个这样特别的仓库，再创建一个就会提示错误，为了演示方便，所以删了一个T。\n\n  创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上。\n\n  【具体可以参考网上的一篇文章：[Git安装及SSH Key管理之Windows篇](http://www.jianshu.com/p/a3b4f61d4747)】\n\n  现在用记事本打开公钥，复制文件中的所有内容。访问：[https://github.com/settings/ssh](https://github.com/settings/ssh)，\n  \n  Title：自己随便取\n\n  Key：把刚刚复制的都粘贴进来\n\n## 把本地的博客内容同步到 Github 上 ##\n\n   要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件：\n \n\n   `cd G:\\TerryBlog              //进入TerryBlog项目目录`\n\n    上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下；\n\n  `npm/cnpm install hexo-server --save         //创建`\n\n ` npm/cnpm install hexo-deployer-git --save    //安装自动部署发布工具`\n\n  编辑TerryBlog的**项目配置文件**：_config.yml\n\n  官网对此配置的介绍：[https://hexo.io/zh-cn/docs/configuration.html](https://hexo.io/zh-cn/docs/configuration.html)\n\n  主要改这里（一般在最后面）：\n  \n     # Deployment\n    ## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。\n    ## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。\n    ## Docs: https://hexo.io/docs/deployment.html\n      deploy:\n      type: git\n      repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git\n      branch: master\n\n  编辑完项目配置文件后我们需要重新部署：\n\n    cd G:\\TerryBlog              //进入TerryBlog项目目录\n\n    上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下；\n    hexo clean//先清除掉已经生成的旧文件\n    hexo g //再生成一次静态文件\n    hexo s   //在本地预览下\n    hexo d   //本地没问题之后，Ctrl + C 停掉本地预览，使用部署命令部署到 Github 上\n\n   访问服务器地址进行检查：http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名 + .github.io\n\n## 绑定域名 ##\n\n  \n -  **创建CNAME文件**\n \n    我们要一个 CNAME 文件（文件名叫 CNAME，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如：mutouspace.cn。这个CNAME可以你先建一个txt文件，把后缀名去掉），把该文件放在 G:\\TerryBlog 目录下。\n -  **获取Github的ip地址**\n    \n    实际获取的是你github上博客项目的ip（即：tiantsing.github.io），打开命令窗口，输入【ping tiantsing.github.io】来查看ip地址，并记录下来;\n -  **添加DNS Service记录**\n \n    我的域名是腾讯云上买的，用的腾讯云的域名解析，将ip地址和你买的域名绑定就好了，域名解析后需要等待几分钟才能被访问;\n\n   到此为止，我们的博客就成功配置完了！\n\n# 发表一篇文章 #\n\n  \n1. 在G:\\TerryBlog 路径下Git Bash执行命令： `hexo new \"my new post\"`\n2. 在G:\\TerryBlog\\source\\_post中打开my-new-post.md，打开方式使用记事本或notepad++（推荐使用Markdown编辑软件）。\n   \n   hexo中写文章使用的是Markdown，没接触过的可以看下Markdown语法说明.\n   \n      title: my new post #可以改成中文的，如“新文章”\n      date: 2015-04-08 22:56:29 #发表日期，一般不改动\n      categories: blog #文章文类\n      tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog\n    \n      #这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上\n      <!--more-->\n      #在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n\n3. 写完文章后，你可以使用1. hexo g生成静态文件。2. hexo s在本地预览效果。3.hexo d同步到github，然后使用[tianqing.work](tianqing.work)进行访问。\n\n# HEXO插入图片 #\n\n**第一步：安装插件，在 `hexo` 根目录打开 `Git Bash` ,执行**\n` npm install hexo-asset-image --save `\n**第二步：打开 `hexo` 的配置文件`_config.yml`**\n找到 `post_asset_folder`，把这个选项从`false`改成`true`\n**第三步：打开`/node_modules/hexo-asset-image/index.js`**\n将内容更换为下面的代码\n\n```\n'use strict';\nvar cheerio = require('cheerio');\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n}\n\nvar version = String(hexo.version).split('.');\nhexo.extend.filter.register('after_post_render', function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){\n        var link = data.permalink;\n    if(version.length > 0 && Number(version[0]) == 3)\n       var beginPos = getPosition(link, '/', 1) + 1;\n    else\n       var beginPos = getPosition(link, '/', 3) + 1;\n    // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n    var endPos = link.lastIndexOf('/') + 1;\n    link = link.substring(beginPos, endPos);\n\n    var toprocess = ['excerpt', 'more', 'content'];\n    for(var i = 0; i < toprocess.length; i++){\n      var key = toprocess[i];\n \n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n\n      $('img').each(function(){\n        if ($(this).attr('src')){\n            // For windows style path, we replace '\\' to '/'.\n            var src = $(this).attr('src').replace('\\\\', '/');\n            if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n               !/^\\s*\\//.test(src)) {\n              // For \"about\" page, the first part of \"src\" can't be removed.\n              // In addition, to support multi-level local directory.\n              var linkArray = link.split('/').filter(function(elem){\n                return elem != '';\n              });\n              var srcArray = src.split('/').filter(function(elem){\n                return elem != '' && elem != '.';\n              });\n              if(srcArray.length > 1)\n                srcArray.shift();\n              src = srcArray.join('/');\n              $(this).attr('src', config.root + link + src);\n              console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n            }\n        }else{\n            console.info&&console.info(\"no src attr, skipped...\");\n            console.info&&console.info($(this));\n        }\n      });\n      data[key] = $.html();\n    }\n  }\n});\n```\n**第四步：现在就可以插入图片了，比如 `hexo new post test` 之后**\n就在`source/_posts`生成`teest.md`文件和`test`文件夹，我们把要插入的图片复制到`test`文件夹内，\n在`test.md`文件里面按`markdown`的标准写,（我的文件名是`test.jpeg`）比如\n\n\n**![这是代替图片的文字，随便写](test.jpeg)**\n\n\n# 总结 #\n\n## 常用hexo命令 ##\n\n常见命令\n\n    hexo new \"postName\" #新建文章\n    hexo new page \"pageName\" #新建页面\n    hexo new post \"pageName\" #新建文章与文件夹\n    hexo generate #生成静态页面至public目录\n    hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n    hexo deploy #部署到GitHub\n    hexo help  # 查看帮助\n    hexo version  #查看Hexo的版本\n\n缩写：\n\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n\n组合命令：\n\n    hexo s -g #生成并本地预览\n    hexo d -g #生成并上传\n\n## 最终效果 ##\n\n  可以访问我的git博客来查看效果： [https://tiantsing.github.io/](https://tiantsing.github.io/)\n\n## 参考 ##\n\n   [基于Hexo+Github Pages的博客搭建](http://www.jianshu.com/p/0a3cad3e8cdf)\n\n   [使用Hexo搭建个人博客(基于hexo3.0)](http://opiece.me/2015/04/09/hexo-guide/)\n\n   [使用hexo+github搭建免费个人博客详细教程](http://blog.liuxianan.com/build-blog-website-by-hexo-github.html#qian-yan)","slug":"使用Hexo-github建设个人博客教程","published":1,"updated":"2020-08-18T15:11:06.565Z","_id":"cke02o6xk002a64xteckef2p7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"></excerpt></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本片文章主要用来记录搭建Hexo静态博客的过程，用于以后搭建博客更加方便。</p>\n<p><strong>主要内容：</strong></p>\n<ol>\n<li>列出博客搭建环境+所需工具；</li>\n<li>环境的配置与工具的安装简述，以及简单的使用教程，安装Git、Node.js环境以及Hexo框架；</li>\n<li>创建Hexo项目，并本地运行查看效果</li>\n<li>修改项目配置文件（根目录下的_config.yml文件）</li>\n<li>安装Hexo框架主题（推荐：Next或yelee主题，本人用的yelee），对主题进行配置，主要是修改theme目录下的_config.yml文件</li>\n<li>将本地设置好的Hexo项目发布到Github Pages上（包括绑定自己的域名）（这里会介绍如何写文章）</li>\n<li>总结</li>\n</ol>\n<a id=\"more\"></a> \n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>在搭建博客时，你需要做以下准备：</p>\n<ol>\n<li>确定自己的系统为Windows;(因为博主用的系统是Windows10，为了避免浪费您的时间，如果不是Windows系统就不要看了。)</li>\n<li>Git下载，node.js下载。</li>\n</ol>\n<p>本文所使用的环境：</p>\n<ul>\n<li>Windows 10</li>\n<li>Git  version 2.11.1.windows.1</li>\n<li>node.js v6.9.5 LTS</li>\n<li>hexo </li>\n</ul>\n<h1 id=\"开始搭建博客\"><a href=\"#开始搭建博客\" class=\"headerlink\" title=\"开始搭建博客\"></a>开始搭建博客</h1><h2 id=\"Git下载安装及简单实用\"><a href=\"#Git下载安装及简单实用\" class=\"headerlink\" title=\"Git下载安装及简单实用\"></a>Git下载安装及简单实用</h2><p>为什么要在电脑上安装Git呢？我相信大多计算机专业的同学对Git的应该不陌生了，Git可以说是现如今最好用的、最先进的分布式版本控制系统（没有之一）。Git在接下来的环境部署及部署博客到github Pages时都是需要的。大家如果有兴趣可以阅读我的博客（<a href=\"http://blog.csdn.net/tianqingdezhuanlan/article/details/51791318\" target=\"_blank\" rel=\"external\">Git的简单使用</a>），对Git进行简单的了解。如果了解Git也没有关系，只要你按照教程一步一步来也可以。</p>\n<p><strong>下载Git</strong></p>\n<p>我们可以在<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">Git的官网</a>下载我们所需要的git，我选择的是最新版的Git Windows X64 版本。</p>\n<p><strong>安装Git</strong></p>\n<p>Git的安装也很简单，就像安装我们平时所需要的软件一样，教程参考：<a href=\"http://blog.csdn.net/tianqingdezhuanlan/article/details/51791368\" target=\"_blank\" rel=\"external\">Git的安装</a>。</p>\n<p><strong>Git的简单实用</strong></p>\n<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>\n<p>添加文件到Git仓库，分两步：</p>\n<p>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</p>\n<p>第二步，使用命令<code>git commit</code>，完成。</p>\n<p>我们在这里不太需要git的命令操作，一般只需要git的的shell窗口进行一些操作。</p>\n<h2 id=\"node-js的下载安装\"><a href=\"#node-js的下载安装\" class=\"headerlink\" title=\"node.js的下载安装\"></a>node.js的下载安装</h2><p><strong>下载</strong></p>\n<p>打开 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Nodejs</a> 下载页面，选择合适你当前系统版本的安装包（建议使用 LTS 版本的）。</p>\n<p><strong>安装</strong></p>\n<p>双击安装文件 -&gt; 下一步 -&gt; 下一步…</p>\n<p>【具体操作请参考网上的一篇文章：<a href=\"http://www.jianshu.com/p/03a76b2e7e00\" target=\"_blank\" rel=\"external\">Node.js安装及环境配置之Windows篇</a>】</p>\n<h2 id=\"Hexo框架的安装\"><a href=\"#Hexo框架的安装\" class=\"headerlink\" title=\"Hexo框架的安装\"></a>Hexo框架的安装</h2><p>首先我们可以看一下<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">hexo</a>的官网，了解一下hexo。</p>\n<p><strong>Windows中的安装</strong></p>\n<ol>\n<li><p>打开命令行</p>\n<p>Win+R或者点击开始按钮–&gt;运行–&gt;输入“cmd”;</p>\n<p>用 <strong>Git Bash</strong></p>\n</li>\n<li><p>输入命令</p>\n<p><code>npm install hexo-cli -g</code></p>\n</li>\n</ol>\n<p>输入完命令后就开始了hexo的安装，这里可能需要等待一段时间，时间不确定，只要不报错就可以了。</p>\n<h2 id=\"创建Hexo本地博客\"><a href=\"#创建Hexo本地博客\" class=\"headerlink\" title=\"创建Hexo本地博客\"></a>创建Hexo本地博客</h2><p> 接下来我们在一个本地盘自定义路径中创建一个文件夹作为我的项目文件，我在这里选择了在G盘下新建了一个名为TerryBlog的文件夹，作为我的项目文件，路径为【G:\\TerryBlog】.在G盘下，点击鼠标右键–&gt;Git Bash，打开命令输入框。输入命令如下：</p>\n<p>   <code>hexo init TerryBlog        //hexo init +你的项目名称，如我的为TerryBlog</code></p>\n<p> 执行完上述命令后，我们就创建了TerryBlog文件夹，进入刚创建的TerryBlog项目目录，命令操作如下：</p>\n<p>  <code>cd TerryBlog      //进入TerryBlog目录</code></p>\n<p> 或者直接在TerryBlog文件夹下，再点击鼠标右键–&gt;Git Bash，打开命令输入框。再输入以下命令：</p>\n<p>  <code>npm install</code></p>\n<p> 安装完成之后，【G:\\TerryBlog】目录结构是这样的：</p>\n<p><img src=\"//tianqing.work/2017/02/18/使用Hexo-github建设个人博客教程/使用Hexo+github建设个人博客教程1.png\" alt=\"\"></p>\n<p>  到此为止，一个博客就已经搭建好了，现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令如下：</p>\n<p>  <code>hexo s</code></p>\n<p>   <strong><em>在浏览器中输入：<a href=\"http://localhost:4000/进行访问\" target=\"_blank\" rel=\"external\">http://localhost:4000/进行访问</a></em></strong></p>\n<pre><code>** 如果要停止 hexo 服务：在 Git Bash 下按 Ctrl + C即可**\n</code></pre><p>   到这里我们简单的hexo博客基本就完成一部分了！是不是很开心，如果不进行主题美化的话，我们马上就可以有一个自己的博客了。</p>\n<h1 id=\"修改项目配置文件\"><a href=\"#修改项目配置文件\" class=\"headerlink\" title=\"修改项目配置文件\"></a>修改项目配置文件</h1><p>  在这里我们修改的是【G:\\TerryBlog】路径下的 <code>_config.yml</code> <strong>站点主题配置</strong>文件，我的配置如下：</p>\n<p>  <strong>注意：修改之前最好备份一下。</strong></p>\n<pre><code># Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的\n\n\ntitle: Terry_Tian Code #网站标题\nsubtitle: 行是知之始   知是行之成  #网站副标题\ndescription: 在山的这边，海的那边，有一只程序猿。。。  #描述\nauthor: Terry Tian   #博主名字\navatar: http://olg3gwtbm.bkt.clouddn.com/head.jpg  #博主头像\nemail: 1015236187@qq.com   #邮箱\nlanguage: zh-Hans  #语言\ntimezone:   #网站时区。Hexo默认使用电脑时区\n\n# URL,这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息\n## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;\nurl: http://mutouspace.cn/\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n # Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category &amp; Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\n date_format: YYYY-MM-DD\n time_format: HH:mm:ss\n\n # Pagination\n ## Set per_page to 0 to disable pagination\n per_page: 10\n pagination_dir: page\n\n # Extensions\n ## Plugins: https://hexo.io/plugins/\n ## Themes: https://hexo.io/themes/\n theme: yelee\n\n # Deployment\n ## Docs: https://hexo.io/docs/deployment.html\n deploy:\n   type: git\n   repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git\n   branch: master\n\n search:\n   path: search.xml\n   field: post\n</code></pre><p>   做完这一些之后再在Git Bash 命令框中，输入 <code>hexo s</code> 重新启动服务，在浏览器中输入：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>进行访问,查看一下效果。</p>\n<h1 id=\"安装Hexo框架主题\"><a href=\"#安装Hexo框架主题\" class=\"headerlink\" title=\"安装Hexo框架主题\"></a>安装Hexo框架主题</h1><p>  在上一步完成后，你会发现虽然改了一部分配置，但页面还是很吃藕，接下来，咱们就要给咱们的博客美美容了。hexo的主题有很多，大家可以去这里选一下，hexo-theme：<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">https://hexo.io/themes/</a>.</p>\n<p>  我选择的是yelee主题：<a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" rel=\"external\">yelee</a></p>\n<p>  还是让 Git Bash 保持在【G:\\TerryBlog】目录下，然后输入命令：</p>\n<p>  <code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</code></p>\n<p>  这样就在 【G:\\TerryBlog\\themes】目录下生成了一个 yelee 文件夹，里面有我们刚刚 clone 下来的主题内容。</p>\n<p>  我们现在要修改【G:\\TerryBlog】目录下的项目配置文件：_config.yml，把对应的主题目录名改下，主要是将配置中的 theme: yelee修改。</p>\n<p>  <strong>注意：该配置文件中的键值之间一定要有空格，否则轻则没有作用，重则报错，无法启动。</strong></p>\n<p>  更改主题目录名后，我们还要重新生成主题静态内容，继续在 Git Bash 中输入命令输入如下命令：</p>\n<p>   <code>hexo g      //重新生成静态博客的所有内容</code></p>\n<p>   <code>hexo s        //重启 hexo 本地服务</code></p>\n<p>  重新访问：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>，看一下效果.</p>\n<h2 id=\"修改Hexo框架主题\"><a href=\"#修改Hexo框架主题\" class=\"headerlink\" title=\"修改Hexo框架主题\"></a>修改Hexo框架主题</h2><p>  上一步完成后，看到的是yelee的默认主题，这里我们可以再次配置一下，修改的是【G:\\TerryBlog\\themes\\yelee】路径下的 <code>_config.yml</code>文件。这里我们可以跟着<a href=\"http://moxfive.coding.me/yelee/\" target=\"_blank\" rel=\"external\">Yelee 主题使用说明</a>来修改。</p>\n<h1 id=\"发布到Github-Pages上\"><a href=\"#发布到Github-Pages上\" class=\"headerlink\" title=\"发布到Github Pages上\"></a>发布到Github Pages上</h1><h2 id=\"创建Github-Pages并SSH授权\"><a href=\"#创建Github-Pages并SSH授权\" class=\"headerlink\" title=\"创建Github Pages并SSH授权\"></a>创建Github Pages并SSH授权</h2><p>  现在假设你已经有一个 Gtihub 账号，你还需要一个<strong>特别</strong>的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：tiantsing，那我要创建的仓库名字完整滴填写是：tiantsing.github.io ;</p>\n<p>  仔细的人可能看到，你的仓库名根本不和你的用户名一样，由于我之前已经创建了一个这样特别的仓库，再创建一个就会提示错误，为了演示方便，所以删了一个T。</p>\n<p>  创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上。</p>\n<p>  【具体可以参考网上的一篇文章：<a href=\"http://www.jianshu.com/p/a3b4f61d4747\" target=\"_blank\" rel=\"external\">Git安装及SSH Key管理之Windows篇</a>】</p>\n<p>  现在用记事本打开公钥，复制文件中的所有内容。访问：<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"external\">https://github.com/settings/ssh</a>，</p>\n<p>  Title：自己随便取</p>\n<p>  Key：把刚刚复制的都粘贴进来</p>\n<h2 id=\"把本地的博客内容同步到-Github-上\"><a href=\"#把本地的博客内容同步到-Github-上\" class=\"headerlink\" title=\"把本地的博客内容同步到 Github 上\"></a>把本地的博客内容同步到 Github 上</h2><p>   要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件：</p>\n<p>   <code>cd G:\\TerryBlog              //进入TerryBlog项目目录</code></p>\n<pre><code>上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下；\n</code></pre><p>  <code>npm/cnpm install hexo-server --save         //创建</code></p>\n<p> <code>npm/cnpm install hexo-deployer-git --save    //安装自动部署发布工具</code></p>\n<p>  编辑TerryBlog的<strong>项目配置文件</strong>：_config.yml</p>\n<p>  官网对此配置的介绍：<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/configuration.html</a></p>\n<p>  主要改这里（一般在最后面）：</p>\n<pre><code> # Deployment\n## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。\n## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。\n## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n  type: git\n  repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git\n  branch: master\n</code></pre><p>  编辑完项目配置文件后我们需要重新部署：</p>\n<pre><code>cd G:\\TerryBlog              //进入TerryBlog项目目录\n\n上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下；\nhexo clean//先清除掉已经生成的旧文件\nhexo g //再生成一次静态文件\nhexo s   //在本地预览下\nhexo d   //本地没问题之后，Ctrl + C 停掉本地预览，使用部署命令部署到 Github 上\n</code></pre><p>   访问服务器地址进行检查：<a href=\"http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名\" target=\"_blank\" rel=\"external\">http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名</a> + .github.io</p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><ul>\n<li><p><strong>创建CNAME文件</strong></p>\n<p>我们要一个 CNAME 文件（文件名叫 CNAME，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如：mutouspace.cn。这个CNAME可以你先建一个txt文件，把后缀名去掉），把该文件放在 G:\\TerryBlog 目录下。</p>\n</li>\n<li><p><strong>获取Github的ip地址</strong></p>\n<p>实际获取的是你github上博客项目的ip（即：tiantsing.github.io），打开命令窗口，输入【ping tiantsing.github.io】来查看ip地址，并记录下来;</p>\n</li>\n<li><p><strong>添加DNS Service记录</strong></p>\n<p>我的域名是腾讯云上买的，用的腾讯云的域名解析，将ip地址和你买的域名绑定就好了，域名解析后需要等待几分钟才能被访问;</p>\n<p>到此为止，我们的博客就成功配置完了！</p>\n</li>\n</ul>\n<h1 id=\"发表一篇文章\"><a href=\"#发表一篇文章\" class=\"headerlink\" title=\"发表一篇文章\"></a>发表一篇文章</h1><ol>\n<li>在G:\\TerryBlog 路径下Git Bash执行命令： <code>hexo new &quot;my new post&quot;</code></li>\n<li><p>在G:\\TerryBlog\\source_post中打开my-new-post.md，打开方式使用记事本或notepad++（推荐使用Markdown编辑软件）。</p>\n<p>hexo中写文章使用的是Markdown，没接触过的可以看下Markdown语法说明.</p>\n<p>   title: my new post #可以改成中文的，如“新文章”<br>   date: 2015-04-08 22:56:29 #发表日期，一般不改动<br>   categories: blog #文章文类<br>   tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</p>\n<p>   #这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</p>\n   <!--more-->\n<p>   #在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>\n</li>\n<li><p>写完文章后，你可以使用1. hexo g生成静态文件。2. hexo s在本地预览效果。3.hexo d同步到github，然后使用<a href=\"tianqing.work\">tianqing.work</a>进行访问。</p>\n</li>\n</ol>\n<h1 id=\"HEXO插入图片\"><a href=\"#HEXO插入图片\" class=\"headerlink\" title=\"HEXO插入图片\"></a>HEXO插入图片</h1><p><strong>第一步：安装插件，在 <code>hexo</code> 根目录打开 <code>Git Bash</code> ,执行</strong><br><code>npm install hexo-asset-image --save</code><br><strong>第二步：打开 <code>hexo</code> 的配置文件<code>_config.yml</code></strong><br>找到 <code>post_asset_folder</code>，把这个选项从<code>false</code>改成<code>true</code><br><strong>第三步：打开<code>/node_modules/hexo-asset-image/index.js</code></strong><br>将内容更换为下面的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">var cheerio = require(&apos;cheerio&apos;);</div><div class=\"line\"></div><div class=\"line\">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</div><div class=\"line\">function getPosition(str, m, i) &#123;</div><div class=\"line\">  return str.split(m, i).join(m).length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var version = String(hexo.version).split(&apos;.&apos;);</div><div class=\"line\">hexo.extend.filter.register(&apos;after_post_render&apos;, function(data)&#123;</div><div class=\"line\">  var config = hexo.config;</div><div class=\"line\">  if(config.post_asset_folder)&#123;</div><div class=\"line\">        var link = data.permalink;</div><div class=\"line\">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</div><div class=\"line\">       var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;</div><div class=\"line\">    else</div><div class=\"line\">       var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;</div><div class=\"line\">    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</div><div class=\"line\">    var endPos = link.lastIndexOf(&apos;/&apos;) + 1;</div><div class=\"line\">    link = link.substring(beginPos, endPos);</div><div class=\"line\"></div><div class=\"line\">    var toprocess = [&apos;excerpt&apos;, &apos;more&apos;, &apos;content&apos;];</div><div class=\"line\">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</div><div class=\"line\">      var key = toprocess[i];</div><div class=\"line\"> </div><div class=\"line\">      var $ = cheerio.load(data[key], &#123;</div><div class=\"line\">        ignoreWhitespace: false,</div><div class=\"line\">        xmlMode: false,</div><div class=\"line\">        lowerCaseTags: false,</div><div class=\"line\">        decodeEntities: false</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      $(&apos;img&apos;).each(function()&#123;</div><div class=\"line\">        if ($(this).attr(&apos;src&apos;))&#123;</div><div class=\"line\">            // For windows style path, we replace &apos;\\&apos; to &apos;/&apos;.</div><div class=\"line\">            var src = $(this).attr(&apos;src&apos;).replace(&apos;\\\\&apos;, &apos;/&apos;);</div><div class=\"line\">            if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp;</div><div class=\"line\">               !/^\\s*\\//.test(src)) &#123;</div><div class=\"line\">              // For &quot;about&quot; page, the first part of &quot;src&quot; can&apos;t be removed.</div><div class=\"line\">              // In addition, to support multi-level local directory.</div><div class=\"line\">              var linkArray = link.split(&apos;/&apos;).filter(function(elem)&#123;</div><div class=\"line\">                return elem != &apos;&apos;;</div><div class=\"line\">              &#125;);</div><div class=\"line\">              var srcArray = src.split(&apos;/&apos;).filter(function(elem)&#123;</div><div class=\"line\">                return elem != &apos;&apos; &amp;&amp; elem != &apos;.&apos;;</div><div class=\"line\">              &#125;);</div><div class=\"line\">              if(srcArray.length &gt; 1)</div><div class=\"line\">                srcArray.shift();</div><div class=\"line\">              src = srcArray.join(&apos;/&apos;);</div><div class=\"line\">              $(this).attr(&apos;src&apos;, config.root + link + src);</div><div class=\"line\">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</div><div class=\"line\">            console.info&amp;&amp;console.info($(this));</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      data[key] = $.html();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>第四步：现在就可以插入图片了，比如 <code>hexo new post test</code> 之后</strong><br>就在<code>source/_posts</code>生成<code>teest.md</code>文件和<code>test</code>文件夹，我们把要插入的图片复制到<code>test</code>文件夹内，<br>在<code>test.md</code>文件里面按<code>markdown</code>的标准写,（我的文件名是<code>test.jpeg</code>）比如</p>\n<p><strong><img src=\"//tianqing.work/2017/02/18/使用Hexo-github建设个人博客教程/test.jpeg\" alt=\"这是代替图片的文字，随便写\"></strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"常用hexo命令\"><a href=\"#常用hexo命令\" class=\"headerlink\" title=\"常用hexo命令\"></a>常用hexo命令</h2><p>常见命令</p>\n<pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo new post &quot;pageName&quot; #新建文章与文件夹\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\n</code></pre><p>缩写：</p>\n<pre><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n</code></pre><p>组合命令：</p>\n<pre><code>hexo s -g #生成并本地预览\nhexo d -g #生成并上传\n</code></pre><h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p>  可以访问我的git博客来查看效果： <a href=\"https://tiantsing.github.io/\" target=\"_blank\" rel=\"external\">https://tiantsing.github.io/</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>   <a href=\"http://www.jianshu.com/p/0a3cad3e8cdf\" target=\"_blank\" rel=\"external\">基于Hexo+Github Pages的博客搭建</a></p>\n<p>   <a href=\"http://opiece.me/2015/04/09/hexo-guide/\" target=\"_blank\" rel=\"external\">使用Hexo搭建个人博客(基于hexo3.0)</a></p>\n<p>   <a href=\"http://blog.liuxianan.com/build-blog-website-by-hexo-github.html#qian-yan\" target=\"_blank\" rel=\"external\">使用hexo+github搭建免费个人博客详细教程</a></p>\n","excerpt":"<p><Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"></Excerpt></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本片文章主要用来记录搭建Hexo静态博客的过程，用于以后搭建博客更加方便。</p>\n<p><strong>主要内容：</strong></p>\n<ol>\n<li>列出博客搭建环境+所需工具；</li>\n<li>环境的配置与工具的安装简述，以及简单的使用教程，安装Git、Node.js环境以及Hexo框架；</li>\n<li>创建Hexo项目，并本地运行查看效果</li>\n<li>修改项目配置文件（根目录下的_config.yml文件）</li>\n<li>安装Hexo框架主题（推荐：Next或yelee主题，本人用的yelee），对主题进行配置，主要是修改theme目录下的_config.yml文件</li>\n<li>将本地设置好的Hexo项目发布到Github Pages上（包括绑定自己的域名）（这里会介绍如何写文章）</li>\n<li>总结</li>\n</ol>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>在搭建博客时，你需要做以下准备：</p>\n<ol>\n<li>确定自己的系统为Windows;(因为博主用的系统是Windows10，为了避免浪费您的时间，如果不是Windows系统就不要看了。)</li>\n<li>Git下载，node.js下载。</li>\n</ol>\n<p>本文所使用的环境：</p>\n<ul>\n<li>Windows 10</li>\n<li>Git  version 2.11.1.windows.1</li>\n<li>node.js v6.9.5 LTS</li>\n<li>hexo </li>\n</ul>\n<h1 id=\"开始搭建博客\"><a href=\"#开始搭建博客\" class=\"headerlink\" title=\"开始搭建博客\"></a>开始搭建博客</h1><h2 id=\"Git下载安装及简单实用\"><a href=\"#Git下载安装及简单实用\" class=\"headerlink\" title=\"Git下载安装及简单实用\"></a>Git下载安装及简单实用</h2><p>为什么要在电脑上安装Git呢？我相信大多计算机专业的同学对Git的应该不陌生了，Git可以说是现如今最好用的、最先进的分布式版本控制系统（没有之一）。Git在接下来的环境部署及部署博客到github Pages时都是需要的。大家如果有兴趣可以阅读我的博客（<a href=\"http://blog.csdn.net/tianqingdezhuanlan/article/details/51791318\">Git的简单使用</a>），对Git进行简单的了解。如果了解Git也没有关系，只要你按照教程一步一步来也可以。</p>\n<p><strong>下载Git</strong></p>\n<p>我们可以在<a href=\"https://git-scm.com/downloads\">Git的官网</a>下载我们所需要的git，我选择的是最新版的Git Windows X64 版本。</p>\n<p><strong>安装Git</strong></p>\n<p>Git的安装也很简单，就像安装我们平时所需要的软件一样，教程参考：<a href=\"http://blog.csdn.net/tianqingdezhuanlan/article/details/51791368\">Git的安装</a>。</p>\n<p><strong>Git的简单实用</strong></p>\n<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>\n<p>添加文件到Git仓库，分两步：</p>\n<p>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</p>\n<p>第二步，使用命令<code>git commit</code>，完成。</p>\n<p>我们在这里不太需要git的命令操作，一般只需要git的的shell窗口进行一些操作。</p>\n<h2 id=\"node-js的下载安装\"><a href=\"#node-js的下载安装\" class=\"headerlink\" title=\"node.js的下载安装\"></a>node.js的下载安装</h2><p><strong>下载</strong></p>\n<p>打开 <a href=\"https://nodejs.org/en/\">Nodejs</a> 下载页面，选择合适你当前系统版本的安装包（建议使用 LTS 版本的）。</p>\n<p><strong>安装</strong></p>\n<p>双击安装文件 -&gt; 下一步 -&gt; 下一步…</p>\n<p>【具体操作请参考网上的一篇文章：<a href=\"http://www.jianshu.com/p/03a76b2e7e00\">Node.js安装及环境配置之Windows篇</a>】</p>\n<h2 id=\"Hexo框架的安装\"><a href=\"#Hexo框架的安装\" class=\"headerlink\" title=\"Hexo框架的安装\"></a>Hexo框架的安装</h2><p>首先我们可以看一下<a href=\"https://hexo.io/\">hexo</a>的官网，了解一下hexo。</p>\n<p><strong>Windows中的安装</strong></p>\n<ol>\n<li><p>打开命令行</p>\n<p>Win+R或者点击开始按钮–&gt;运行–&gt;输入“cmd”;</p>\n<p>用 <strong>Git Bash</strong></p>\n</li>\n<li><p>输入命令</p>\n<p><code>npm install hexo-cli -g</code></p>\n</li>\n</ol>\n<p>输入完命令后就开始了hexo的安装，这里可能需要等待一段时间，时间不确定，只要不报错就可以了。</p>\n<h2 id=\"创建Hexo本地博客\"><a href=\"#创建Hexo本地博客\" class=\"headerlink\" title=\"创建Hexo本地博客\"></a>创建Hexo本地博客</h2><p> 接下来我们在一个本地盘自定义路径中创建一个文件夹作为我的项目文件，我在这里选择了在G盘下新建了一个名为TerryBlog的文件夹，作为我的项目文件，路径为【G:\\TerryBlog】.在G盘下，点击鼠标右键–&gt;Git Bash，打开命令输入框。输入命令如下：</p>\n<p>   <code>hexo init TerryBlog        //hexo init +你的项目名称，如我的为TerryBlog</code></p>\n<p> 执行完上述命令后，我们就创建了TerryBlog文件夹，进入刚创建的TerryBlog项目目录，命令操作如下：</p>\n<p>  <code>cd TerryBlog      //进入TerryBlog目录</code></p>\n<p> 或者直接在TerryBlog文件夹下，再点击鼠标右键–&gt;Git Bash，打开命令输入框。再输入以下命令：</p>\n<p>  <code>npm install</code></p>\n<p> 安装完成之后，【G:\\TerryBlog】目录结构是这样的：</p>\n<p><img src=\"//tianqing.work/2017/02/18/使用Hexo-github建设个人博客教程/使用Hexo+github建设个人博客教程1.png\" alt=\"\"></p>\n<p>  到此为止，一个博客就已经搭建好了，现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令如下：</p>\n<p>  <code>hexo s</code></p>\n<p>   <strong><em>在浏览器中输入：<a href=\"http://localhost:4000/进行访问\">http://localhost:4000/进行访问</a></em></strong></p>\n<pre><code>** 如果要停止 hexo 服务：在 Git Bash 下按 Ctrl + C即可**\n</code></pre><p>   到这里我们简单的hexo博客基本就完成一部分了！是不是很开心，如果不进行主题美化的话，我们马上就可以有一个自己的博客了。</p>\n<h1 id=\"修改项目配置文件\"><a href=\"#修改项目配置文件\" class=\"headerlink\" title=\"修改项目配置文件\"></a>修改项目配置文件</h1><p>  在这里我们修改的是【G:\\TerryBlog】路径下的 <code>_config.yml</code> <strong>站点主题配置</strong>文件，我的配置如下：</p>\n<p>  <strong>注意：修改之前最好备份一下。</strong></p>\n<pre><code># Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的\n\n\ntitle: Terry_Tian Code #网站标题\nsubtitle: 行是知之始   知是行之成  #网站副标题\ndescription: 在山的这边，海的那边，有一只程序猿。。。  #描述\nauthor: Terry Tian   #博主名字\navatar: http://olg3gwtbm.bkt.clouddn.com/head.jpg  #博主头像\nemail: 1015236187@qq.com   #邮箱\nlanguage: zh-Hans  #语言\ntimezone:   #网站时区。Hexo默认使用电脑时区\n\n# URL,这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息\n## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;\nurl: http://mutouspace.cn/\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n # Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category &amp; Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\n date_format: YYYY-MM-DD\n time_format: HH:mm:ss\n\n # Pagination\n ## Set per_page to 0 to disable pagination\n per_page: 10\n pagination_dir: page\n\n # Extensions\n ## Plugins: https://hexo.io/plugins/\n ## Themes: https://hexo.io/themes/\n theme: yelee\n\n # Deployment\n ## Docs: https://hexo.io/docs/deployment.html\n deploy:\n   type: git\n   repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git\n   branch: master\n\n search:\n   path: search.xml\n   field: post\n</code></pre><p>   做完这一些之后再在Git Bash 命令框中，输入 <code>hexo s</code> 重新启动服务，在浏览器中输入：<a href=\"http://localhost:4000/\">http://localhost:4000/</a>进行访问,查看一下效果。</p>\n<h1 id=\"安装Hexo框架主题\"><a href=\"#安装Hexo框架主题\" class=\"headerlink\" title=\"安装Hexo框架主题\"></a>安装Hexo框架主题</h1><p>  在上一步完成后，你会发现虽然改了一部分配置，但页面还是很吃藕，接下来，咱们就要给咱们的博客美美容了。hexo的主题有很多，大家可以去这里选一下，hexo-theme：<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a>.</p>\n<p>  我选择的是yelee主题：<a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\">yelee</a></p>\n<p>  还是让 Git Bash 保持在【G:\\TerryBlog】目录下，然后输入命令：</p>\n<p>  <code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</code></p>\n<p>  这样就在 【G:\\TerryBlog\\themes】目录下生成了一个 yelee 文件夹，里面有我们刚刚 clone 下来的主题内容。</p>\n<p>  我们现在要修改【G:\\TerryBlog】目录下的项目配置文件：_config.yml，把对应的主题目录名改下，主要是将配置中的 theme: yelee修改。</p>\n<p>  <strong>注意：该配置文件中的键值之间一定要有空格，否则轻则没有作用，重则报错，无法启动。</strong></p>\n<p>  更改主题目录名后，我们还要重新生成主题静态内容，继续在 Git Bash 中输入命令输入如下命令：</p>\n<p>   <code>hexo g      //重新生成静态博客的所有内容</code></p>\n<p>   <code>hexo s        //重启 hexo 本地服务</code></p>\n<p>  重新访问：<a href=\"http://localhost:4000/\">http://localhost:4000/</a>，看一下效果.</p>\n<h2 id=\"修改Hexo框架主题\"><a href=\"#修改Hexo框架主题\" class=\"headerlink\" title=\"修改Hexo框架主题\"></a>修改Hexo框架主题</h2><p>  上一步完成后，看到的是yelee的默认主题，这里我们可以再次配置一下，修改的是【G:\\TerryBlog\\themes\\yelee】路径下的 <code>_config.yml</code>文件。这里我们可以跟着<a href=\"http://moxfive.coding.me/yelee/\">Yelee 主题使用说明</a>来修改。</p>\n<h1 id=\"发布到Github-Pages上\"><a href=\"#发布到Github-Pages上\" class=\"headerlink\" title=\"发布到Github Pages上\"></a>发布到Github Pages上</h1><h2 id=\"创建Github-Pages并SSH授权\"><a href=\"#创建Github-Pages并SSH授权\" class=\"headerlink\" title=\"创建Github Pages并SSH授权\"></a>创建Github Pages并SSH授权</h2><p>  现在假设你已经有一个 Gtihub 账号，你还需要一个<strong>特别</strong>的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：tiantsing，那我要创建的仓库名字完整滴填写是：tiantsing.github.io ;</p>\n<p>  仔细的人可能看到，你的仓库名根本不和你的用户名一样，由于我之前已经创建了一个这样特别的仓库，再创建一个就会提示错误，为了演示方便，所以删了一个T。</p>\n<p>  创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上。</p>\n<p>  【具体可以参考网上的一篇文章：<a href=\"http://www.jianshu.com/p/a3b4f61d4747\">Git安装及SSH Key管理之Windows篇</a>】</p>\n<p>  现在用记事本打开公钥，复制文件中的所有内容。访问：<a href=\"https://github.com/settings/ssh\">https://github.com/settings/ssh</a>，</p>\n<p>  Title：自己随便取</p>\n<p>  Key：把刚刚复制的都粘贴进来</p>\n<h2 id=\"把本地的博客内容同步到-Github-上\"><a href=\"#把本地的博客内容同步到-Github-上\" class=\"headerlink\" title=\"把本地的博客内容同步到 Github 上\"></a>把本地的博客内容同步到 Github 上</h2><p>   要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件：</p>\n<p>   <code>cd G:\\TerryBlog              //进入TerryBlog项目目录</code></p>\n<pre><code>上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下；\n</code></pre><p>  <code>npm/cnpm install hexo-server --save         //创建</code></p>\n<p> <code>npm/cnpm install hexo-deployer-git --save    //安装自动部署发布工具</code></p>\n<p>  编辑TerryBlog的<strong>项目配置文件</strong>：_config.yml</p>\n<p>  官网对此配置的介绍：<a href=\"https://hexo.io/zh-cn/docs/configuration.html\">https://hexo.io/zh-cn/docs/configuration.html</a></p>\n<p>  主要改这里（一般在最后面）：</p>\n<pre><code> # Deployment\n## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。\n## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。\n## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n  type: git\n  repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git\n  branch: master\n</code></pre><p>  编辑完项目配置文件后我们需要重新部署：</p>\n<pre><code>cd G:\\TerryBlog              //进入TerryBlog项目目录\n\n上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下；\nhexo clean//先清除掉已经生成的旧文件\nhexo g //再生成一次静态文件\nhexo s   //在本地预览下\nhexo d   //本地没问题之后，Ctrl + C 停掉本地预览，使用部署命令部署到 Github 上\n</code></pre><p>   访问服务器地址进行检查：<a href=\"http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名\">http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名</a> + .github.io</p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><ul>\n<li><p><strong>创建CNAME文件</strong></p>\n<p>我们要一个 CNAME 文件（文件名叫 CNAME，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如：mutouspace.cn。这个CNAME可以你先建一个txt文件，把后缀名去掉），把该文件放在 G:\\TerryBlog 目录下。</p>\n</li>\n<li><p><strong>获取Github的ip地址</strong></p>\n<p>实际获取的是你github上博客项目的ip（即：tiantsing.github.io），打开命令窗口，输入【ping tiantsing.github.io】来查看ip地址，并记录下来;</p>\n</li>\n<li><p><strong>添加DNS Service记录</strong></p>\n<p>我的域名是腾讯云上买的，用的腾讯云的域名解析，将ip地址和你买的域名绑定就好了，域名解析后需要等待几分钟才能被访问;</p>\n<p>到此为止，我们的博客就成功配置完了！</p>\n</li>\n</ul>\n<h1 id=\"发表一篇文章\"><a href=\"#发表一篇文章\" class=\"headerlink\" title=\"发表一篇文章\"></a>发表一篇文章</h1><ol>\n<li>在G:\\TerryBlog 路径下Git Bash执行命令： <code>hexo new &quot;my new post&quot;</code></li>\n<li><p>在G:\\TerryBlog\\source_post中打开my-new-post.md，打开方式使用记事本或notepad++（推荐使用Markdown编辑软件）。</p>\n<p>hexo中写文章使用的是Markdown，没接触过的可以看下Markdown语法说明.</p>\n<p>   title: my new post #可以改成中文的，如“新文章”<br>   date: 2015-04-08 22:56:29 #发表日期，一般不改动<br>   categories: blog #文章文类<br>   tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</p>\n<p>   #这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</p>\n   <!--more-->\n<p>   #在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>\n</li>\n<li><p>写完文章后，你可以使用1. hexo g生成静态文件。2. hexo s在本地预览效果。3.hexo d同步到github，然后使用<a href=\"tianqing.work\">tianqing.work</a>进行访问。</p>\n</li>\n</ol>\n<h1 id=\"HEXO插入图片\"><a href=\"#HEXO插入图片\" class=\"headerlink\" title=\"HEXO插入图片\"></a>HEXO插入图片</h1><p><strong>第一步：安装插件，在 <code>hexo</code> 根目录打开 <code>Git Bash</code> ,执行</strong><br><code>npm install hexo-asset-image --save</code><br><strong>第二步：打开 <code>hexo</code> 的配置文件<code>_config.yml</code></strong><br>找到 <code>post_asset_folder</code>，把这个选项从<code>false</code>改成<code>true</code><br><strong>第三步：打开<code>/node_modules/hexo-asset-image/index.js</code></strong><br>将内容更换为下面的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">var cheerio = require(&apos;cheerio&apos;);</div><div class=\"line\"></div><div class=\"line\">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</div><div class=\"line\">function getPosition(str, m, i) &#123;</div><div class=\"line\">  return str.split(m, i).join(m).length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var version = String(hexo.version).split(&apos;.&apos;);</div><div class=\"line\">hexo.extend.filter.register(&apos;after_post_render&apos;, function(data)&#123;</div><div class=\"line\">  var config = hexo.config;</div><div class=\"line\">  if(config.post_asset_folder)&#123;</div><div class=\"line\">        var link = data.permalink;</div><div class=\"line\">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</div><div class=\"line\">       var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;</div><div class=\"line\">    else</div><div class=\"line\">       var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;</div><div class=\"line\">    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</div><div class=\"line\">    var endPos = link.lastIndexOf(&apos;/&apos;) + 1;</div><div class=\"line\">    link = link.substring(beginPos, endPos);</div><div class=\"line\"></div><div class=\"line\">    var toprocess = [&apos;excerpt&apos;, &apos;more&apos;, &apos;content&apos;];</div><div class=\"line\">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</div><div class=\"line\">      var key = toprocess[i];</div><div class=\"line\"> </div><div class=\"line\">      var $ = cheerio.load(data[key], &#123;</div><div class=\"line\">        ignoreWhitespace: false,</div><div class=\"line\">        xmlMode: false,</div><div class=\"line\">        lowerCaseTags: false,</div><div class=\"line\">        decodeEntities: false</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      $(&apos;img&apos;).each(function()&#123;</div><div class=\"line\">        if ($(this).attr(&apos;src&apos;))&#123;</div><div class=\"line\">            // For windows style path, we replace &apos;\\&apos; to &apos;/&apos;.</div><div class=\"line\">            var src = $(this).attr(&apos;src&apos;).replace(&apos;\\\\&apos;, &apos;/&apos;);</div><div class=\"line\">            if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp;</div><div class=\"line\">               !/^\\s*\\//.test(src)) &#123;</div><div class=\"line\">              // For &quot;about&quot; page, the first part of &quot;src&quot; can&apos;t be removed.</div><div class=\"line\">              // In addition, to support multi-level local directory.</div><div class=\"line\">              var linkArray = link.split(&apos;/&apos;).filter(function(elem)&#123;</div><div class=\"line\">                return elem != &apos;&apos;;</div><div class=\"line\">              &#125;);</div><div class=\"line\">              var srcArray = src.split(&apos;/&apos;).filter(function(elem)&#123;</div><div class=\"line\">                return elem != &apos;&apos; &amp;&amp; elem != &apos;.&apos;;</div><div class=\"line\">              &#125;);</div><div class=\"line\">              if(srcArray.length &gt; 1)</div><div class=\"line\">                srcArray.shift();</div><div class=\"line\">              src = srcArray.join(&apos;/&apos;);</div><div class=\"line\">              $(this).attr(&apos;src&apos;, config.root + link + src);</div><div class=\"line\">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</div><div class=\"line\">            console.info&amp;&amp;console.info($(this));</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      data[key] = $.html();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>第四步：现在就可以插入图片了，比如 <code>hexo new post test</code> 之后</strong><br>就在<code>source/_posts</code>生成<code>teest.md</code>文件和<code>test</code>文件夹，我们把要插入的图片复制到<code>test</code>文件夹内，<br>在<code>test.md</code>文件里面按<code>markdown</code>的标准写,（我的文件名是<code>test.jpeg</code>）比如</p>\n<p><strong><img src=\"//tianqing.work/2017/02/18/使用Hexo-github建设个人博客教程/test.jpeg\" alt=\"这是代替图片的文字，随便写\"></strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"常用hexo命令\"><a href=\"#常用hexo命令\" class=\"headerlink\" title=\"常用hexo命令\"></a>常用hexo命令</h2><p>常见命令</p>\n<pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo new post &quot;pageName&quot; #新建文章与文件夹\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\n</code></pre><p>缩写：</p>\n<pre><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n</code></pre><p>组合命令：</p>\n<pre><code>hexo s -g #生成并本地预览\nhexo d -g #生成并上传\n</code></pre><h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p>  可以访问我的git博客来查看效果： <a href=\"https://tiantsing.github.io/\">https://tiantsing.github.io/</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>   <a href=\"http://www.jianshu.com/p/0a3cad3e8cdf\">基于Hexo+Github Pages的博客搭建</a></p>\n<p>   <a href=\"http://opiece.me/2015/04/09/hexo-guide/\">使用Hexo搭建个人博客(基于hexo3.0)</a></p>\n<p>   <a href=\"http://blog.liuxianan.com/build-blog-website-by-hexo-github.html#qian-yan\">使用hexo+github搭建免费个人博客详细教程</a></p>"}],"PostAsset":[{"_id":"source/_posts/photo/1.png","slug":"1.png","post":"cke02o6wj001q64xtep6o3szc","modified":0,"renderable":0},{"_id":"source/_posts/使用Hexo-github建设个人博客教程/使用Hexo+github建设个人博客教程1.png","slug":"使用Hexo+github建设个人博客教程1.png","post":"cke02o6xk002a64xteckef2p7","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cke02o6tk000164xtydb7fjmw","category_id":"cke02o6tu000464xtxhb42rwb","_id":"cke02o6uh000f64xti921seq9"},{"post_id":"cke02o6ts000364xt6b9vwa0v","category_id":"cke02o6ua000b64xtdgsx099k","_id":"cke02o6uw000l64xtq6gagtyb"},{"post_id":"cke02o6tz000764xtuxeh4mv3","category_id":"cke02o6ua000b64xtdgsx099k","_id":"cke02o6v6000r64xtini4kz0r"},{"post_id":"cke02o6u6000964xtip8ndsuy","category_id":"cke02o6ua000b64xtdgsx099k","_id":"cke02o6ve000y64xt27v2pujc"},{"post_id":"cke02o6ud000e64xtzyso0mr4","category_id":"cke02o6v7000s64xtw6h7dtb0","_id":"cke02o6vq001464xt02vwuaw6"},{"post_id":"cke02o6vj001164xt6jzb658r","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6vx001964xtfu2k697w"},{"post_id":"cke02o6ui000g64xtvocx3p19","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6w0001b64xt08b2pm7r"},{"post_id":"cke02o6vn001364xtynalxtmb","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6w5001f64xt950lctmy"},{"post_id":"cke02o6us000j64xtv92fjjf9","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6w8001i64xtstohjzqj"},{"post_id":"cke02o6vz001a64xtla8co0ax","category_id":"cke02o6ua000b64xtdgsx099k","_id":"cke02o6wf001m64xth68g2ock"},{"post_id":"cke02o6w2001d64xttuxbxn8w","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6wi001o64xtuviwsqnn"},{"post_id":"cke02o6uu000k64xtnog2c4xt","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6wm001s64xt9a3w6erz"},{"post_id":"cke02o6v0000o64xtnvio2q4n","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6wu001v64xtyev8esdu"},{"post_id":"cke02o6wg001n64xtjnvqlzm9","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6x2002064xtlupqrsvq"},{"post_id":"cke02o6wn001t64xtxj85mh9w","category_id":"cke02o6wi001p64xt6gt8jjkq","_id":"cke02o6x6002264xta7x0nkfb"},{"post_id":"cke02o6v5000q64xtvjpdutc0","category_id":"cke02o6wi001p64xt6gt8jjkq","_id":"cke02o6xe002564xtizyhc4fl"},{"post_id":"cke02o6v9000v64xtqjgbgii3","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6xj002964xtjipiohnx"},{"post_id":"cke02o6vc000x64xt1zkccjpn","category_id":"cke02o6vf000z64xt9lru3y1u","_id":"cke02o6xs002e64xtmqxs0v9m"},{"post_id":"cke02o6vt001764xtjyz3kyun","category_id":"cke02o6xm002b64xty8ol0hn8","_id":"cke02o6xv002i64xttmvsdb5s"},{"post_id":"cke02o6w6001h64xtombyvg0k","category_id":"cke02o6xs002f64xtlqmepv0r","_id":"cke02o6xy002m64xtv6shl4h1"},{"post_id":"cke02o6ww001w64xt837az9gl","category_id":"cke02o6xv002j64xtc89exp3b","_id":"cke02o6y1002q64xthqatgm7f"},{"post_id":"cke02o6x3002164xtr433j5bt","category_id":"cke02o6xs002f64xtlqmepv0r","_id":"cke02o6y6002u64xtcw8s99hf"},{"post_id":"cke02o6x7002364xtcc7nhzvu","category_id":"cke02o6y2002r64xtlgeanoed","_id":"cke02o6y9002x64xtf7yfqql7"},{"post_id":"cke02o6xg002764xt47e909iw","category_id":"cke02o6y2002r64xtlgeanoed","_id":"cke02o6yc003164xtphqii8x2"},{"post_id":"cke02o6xk002a64xteckef2p7","category_id":"cke02o6ya002y64xtbzkgullb","_id":"cke02o6yg003564xtoijyjhni"}],"PostTag":[{"post_id":"cke02o6tk000164xtydb7fjmw","tag_id":"cke02o6tw000564xtxletgoti","_id":"cke02o6uc000d64xtyeh00dx9"},{"post_id":"cke02o6ts000364xt6b9vwa0v","tag_id":"cke02o6ub000c64xtn55dcynm","_id":"cke02o6v4000p64xtgw0a7k4x"},{"post_id":"cke02o6ts000364xt6b9vwa0v","tag_id":"cke02o6up000i64xt9tr8mqll","_id":"cke02o6v7000t64xtwsc42rlu"},{"post_id":"cke02o6tz000764xtuxeh4mv3","tag_id":"cke02o6ub000c64xtn55dcynm","_id":"cke02o6vb000w64xtggl83i83"},{"post_id":"cke02o6u6000964xtip8ndsuy","tag_id":"cke02o6ub000c64xtn55dcynm","_id":"cke02o6vl001264xtothsj2p0"},{"post_id":"cke02o6u8000a64xt9kdb4bu6","tag_id":"cke02o6vh001064xtd4a8blh3","_id":"cke02o6vw001864xti5sdh4i7"},{"post_id":"cke02o6ud000e64xtzyso0mr4","tag_id":"cke02o6vs001664xt43s87c32","_id":"cke02o6w5001g64xtdflqy55c"},{"post_id":"cke02o6ui000g64xtvocx3p19","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6wr001u64xteutrh8jj"},{"post_id":"cke02o6ui000g64xtvocx3p19","tag_id":"cke02o6we001l64xt9fr22i32","_id":"cke02o6x0001y64xt6qmjb7zw"},{"post_id":"cke02o6us000j64xtv92fjjf9","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6xj002864xtgc3u76gj"},{"post_id":"cke02o6us000j64xtv92fjjf9","tag_id":"cke02o6x1001z64xt7sin0r2p","_id":"cke02o6xn002c64xtyrik493x"},{"post_id":"cke02o6uu000k64xtnog2c4xt","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6xu002h64xta2307fzs"},{"post_id":"cke02o6uu000k64xtnog2c4xt","tag_id":"cke02o6xn002d64xt16gjkroy","_id":"cke02o6xw002k64xtr52n0eyr"},{"post_id":"cke02o6v0000o64xtnvio2q4n","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6y1002p64xtx4d2v8ft"},{"post_id":"cke02o6v0000o64xtnvio2q4n","tag_id":"cke02o6xx002l64xtq2qqmdge","_id":"cke02o6y3002s64xtdprayp96"},{"post_id":"cke02o6v5000q64xtvjpdutc0","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6yc003064xtvvql3lqv"},{"post_id":"cke02o6v5000q64xtvjpdutc0","tag_id":"cke02o6y3002t64xtmvutp2gh","_id":"cke02o6yd003264xthqr0rbvj"},{"post_id":"cke02o6v5000q64xtvjpdutc0","tag_id":"cke02o6y8002w64xtr3q6qd2n","_id":"cke02o6yf003464xt8x64s3k3"},{"post_id":"cke02o6v9000v64xtqjgbgii3","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6yi003864xto162o5f1"},{"post_id":"cke02o6v9000v64xtqjgbgii3","tag_id":"cke02o6ye003364xt4xi75lov","_id":"cke02o6yj003964xtuuicvng4"},{"post_id":"cke02o6v9000v64xtqjgbgii3","tag_id":"cke02o6yg003664xtr3ibtwrs","_id":"cke02o6yo003b64xtj32d8x1g"},{"post_id":"cke02o6vc000x64xt1zkccjpn","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6yr003e64xtzaw47lbf"},{"post_id":"cke02o6vc000x64xt1zkccjpn","tag_id":"cke02o6ye003364xt4xi75lov","_id":"cke02o6ys003f64xtsdoqfcmo"},{"post_id":"cke02o6vc000x64xt1zkccjpn","tag_id":"cke02o6yg003664xtr3ibtwrs","_id":"cke02o6yt003h64xtolidfrd1"},{"post_id":"cke02o6vj001164xt6jzb658r","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6yv003j64xtzndov6wu"},{"post_id":"cke02o6vj001164xt6jzb658r","tag_id":"cke02o6ys003g64xt7i9ltg9k","_id":"cke02o6yv003k64xt0gespxs8"},{"post_id":"cke02o6vn001364xtynalxtmb","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6yy003n64xt444jbjfh"},{"post_id":"cke02o6vn001364xtynalxtmb","tag_id":"cke02o6ye003364xt4xi75lov","_id":"cke02o6yz003o64xtjuzhruk5"},{"post_id":"cke02o6vt001764xtjyz3kyun","tag_id":"cke02o6yx003m64xt70447ud7","_id":"cke02o6z2003q64xt918yqahe"},{"post_id":"cke02o6vz001a64xtla8co0ax","tag_id":"cke02o6ub000c64xtn55dcynm","_id":"cke02o6z5003s64xtne6uk9z2"},{"post_id":"cke02o6vz001a64xtla8co0ax","tag_id":"cke02o6z0003p64xt078nlz71","_id":"cke02o6z6003t64xty9fpbois"},{"post_id":"cke02o6w2001d64xttuxbxn8w","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6z8003w64xtb30ivgd4"},{"post_id":"cke02o6w2001d64xttuxbxn8w","tag_id":"cke02o6z6003u64xtl8syo9ee","_id":"cke02o6z8003x64xt0toxj5os"},{"post_id":"cke02o6w6001h64xtombyvg0k","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6z9003z64xtrj0w5utm"},{"post_id":"cke02o6w6001h64xtombyvg0k","tag_id":"cke02o6z7003v64xtw60zcfs0","_id":"cke02o6za004064xt6aoxmthd"},{"post_id":"cke02o6w9001k64xt91xpz2fo","tag_id":"cke02o6z9003y64xt80eqjqtx","_id":"cke02o6zb004264xtsnaxlv22"},{"post_id":"cke02o6wg001n64xtjnvqlzm9","tag_id":"cke02o6w4001e64xt2l9r8mi9","_id":"cke02o6zc004464xtxtd7s1d7"},{"post_id":"cke02o6wg001n64xtjnvqlzm9","tag_id":"cke02o6za004164xtc7siuuj4","_id":"cke02o6zd004564xtko9uz06o"},{"post_id":"cke02o6wn001t64xtxj85mh9w","tag_id":"cke02o6zc004364xta02tlxv1","_id":"cke02o6zg004764xtv5nwu3um"},{"post_id":"cke02o6ww001w64xt837az9gl","tag_id":"cke02o6zd004664xtaoqjgjr2","_id":"cke02o6zi004964xty92r8luy"},{"post_id":"cke02o6x3002164xtr433j5bt","tag_id":"cke02o6zh004864xt8bni9yc5","_id":"cke02o6zk004b64xtif6m4nxu"},{"post_id":"cke02o6x7002364xtcc7nhzvu","tag_id":"cke02o6zj004a64xtoz7t6sm1","_id":"cke02o6zm004d64xth5h0emk0"},{"post_id":"cke02o6xg002764xt47e909iw","tag_id":"cke02o6zj004a64xtoz7t6sm1","_id":"cke02o6zo004f64xt736hrmps"},{"post_id":"cke02o6xk002a64xteckef2p7","tag_id":"cke02o6z9003y64xt80eqjqtx","_id":"cke02o6zr004i64xtr76a3nb6"},{"post_id":"cke02o6xk002a64xteckef2p7","tag_id":"cke02o6vs001664xt43s87c32","_id":"cke02o6zs004j64xtwpzmtnbw"},{"post_id":"cke02o6xk002a64xteckef2p7","tag_id":"cke02o6zo004g64xtfaxbpcfp","_id":"cke02o6zs004k64xt7nijohye"},{"post_id":"cke02o6xk002a64xteckef2p7","tag_id":"cke02o6zq004h64xtao83spz1","_id":"cke02o6zu004l64xtgx7g7cb4"}],"Tag":[{"name":"消息中间件","_id":"cke02o6tw000564xtxletgoti"},{"name":"Android","_id":"cke02o6ub000c64xtn55dcynm"},{"name":"ADB","_id":"cke02o6up000i64xt9tr8mqll"},{"name":"测试","_id":"cke02o6vh001064xtd4a8blh3"},{"name":"Git","_id":"cke02o6vs001664xt43s87c32"},{"name":"JAVA","_id":"cke02o6w4001e64xt2l9r8mi9"},{"name":"Servlet","_id":"cke02o6we001l64xt9fr22i32"},{"name":"JDBC","_id":"cke02o6x1001z64xt7sin0r2p"},{"name":"JUnit","_id":"cke02o6xn002d64xt16gjkroy"},{"name":"JSP","_id":"cke02o6xx002l64xtq2qqmdge"},{"name":"MySQL","_id":"cke02o6y3002t64xtmvutp2gh"},{"name":"数据库","_id":"cke02o6y8002w64xtr3q6qd2n"},{"name":"框架","_id":"cke02o6ye003364xt4xi75lov"},{"name":"Struts2","_id":"cke02o6yg003664xtr3ibtwrs"},{"name":"连接池","_id":"cke02o6ys003g64xt7i9ltg9k"},{"name":"单例模式","_id":"cke02o6yx003m64xt70447ud7"},{"name":"Recycle","_id":"cke02o6z0003p64xt078nlz71"},{"name":"Volley","_id":"cke02o6z6003u64xtl8syo9ee"},{"name":"eclipse","_id":"cke02o6z7003v64xtw60zcfs0"},{"name":"Hexo","_id":"cke02o6z9003y64xt80eqjqtx"},{"name":"基础","_id":"cke02o6za004164xtc7siuuj4"},{"name":"SQL Developer","_id":"cke02o6zc004364xta02tlxv1"},{"name":"maven","_id":"cke02o6zd004664xtaoqjgjr2"},{"name":"工具配置","_id":"cke02o6zh004864xt8bni9yc5"},{"name":"分享","_id":"cke02o6zj004a64xtoz7t6sm1"},{"name":"node","_id":"cke02o6zo004g64xtfaxbpcfp"},{"name":"github","_id":"cke02o6zq004h64xtao83spz1"}]}}